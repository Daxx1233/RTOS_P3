
RTOS_P3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004360  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  08004500  08004500  00005500  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080045c0  080045c0  00006060  2**0
                  CONTENTS
  4 .ARM          00000008  080045c0  080045c0  000055c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080045c8  080045c8  00006060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080045c8  080045c8  000055c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080045cc  080045cc  000055cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  080045d0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b54  20000060  08004630  00006060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004bb4  08004630  00006bb4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e74b  00000000  00000000  00006090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002534  00000000  00000000  000147db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c20  00000000  00000000  00016d10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000921  00000000  00000000  00017930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002845  00000000  00000000  00018251  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d575  00000000  00000000  0001aa96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c728  00000000  00000000  0002800b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b4733  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003400  00000000  00000000  000b4778  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  000b7b78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080044e8 	.word	0x080044e8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	080044e8 	.word	0x080044e8

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b96a 	b.w	80004cc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	460c      	mov	r4, r1
 8000218:	2b00      	cmp	r3, #0
 800021a:	d14e      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021c:	4694      	mov	ip, r2
 800021e:	458c      	cmp	ip, r1
 8000220:	4686      	mov	lr, r0
 8000222:	fab2 f282 	clz	r2, r2
 8000226:	d962      	bls.n	80002ee <__udivmoddi4+0xde>
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0320 	rsb	r3, r2, #32
 800022e:	4091      	lsls	r1, r2
 8000230:	fa20 f303 	lsr.w	r3, r0, r3
 8000234:	fa0c fc02 	lsl.w	ip, ip, r2
 8000238:	4319      	orrs	r1, r3
 800023a:	fa00 fe02 	lsl.w	lr, r0, r2
 800023e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000242:	fa1f f68c 	uxth.w	r6, ip
 8000246:	fbb1 f4f7 	udiv	r4, r1, r7
 800024a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800024e:	fb07 1114 	mls	r1, r7, r4, r1
 8000252:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000256:	fb04 f106 	mul.w	r1, r4, r6
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f104 30ff 	add.w	r0, r4, #4294967295
 8000266:	f080 8112 	bcs.w	800048e <__udivmoddi4+0x27e>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 810f 	bls.w	800048e <__udivmoddi4+0x27e>
 8000270:	3c02      	subs	r4, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a59      	subs	r1, r3, r1
 8000276:	fa1f f38e 	uxth.w	r3, lr
 800027a:	fbb1 f0f7 	udiv	r0, r1, r7
 800027e:	fb07 1110 	mls	r1, r7, r0, r1
 8000282:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000286:	fb00 f606 	mul.w	r6, r0, r6
 800028a:	429e      	cmp	r6, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x94>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f100 31ff 	add.w	r1, r0, #4294967295
 8000296:	f080 80fc 	bcs.w	8000492 <__udivmoddi4+0x282>
 800029a:	429e      	cmp	r6, r3
 800029c:	f240 80f9 	bls.w	8000492 <__udivmoddi4+0x282>
 80002a0:	4463      	add	r3, ip
 80002a2:	3802      	subs	r0, #2
 80002a4:	1b9b      	subs	r3, r3, r6
 80002a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002aa:	2100      	movs	r1, #0
 80002ac:	b11d      	cbz	r5, 80002b6 <__udivmoddi4+0xa6>
 80002ae:	40d3      	lsrs	r3, r2
 80002b0:	2200      	movs	r2, #0
 80002b2:	e9c5 3200 	strd	r3, r2, [r5]
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d905      	bls.n	80002ca <__udivmoddi4+0xba>
 80002be:	b10d      	cbz	r5, 80002c4 <__udivmoddi4+0xb4>
 80002c0:	e9c5 0100 	strd	r0, r1, [r5]
 80002c4:	2100      	movs	r1, #0
 80002c6:	4608      	mov	r0, r1
 80002c8:	e7f5      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ca:	fab3 f183 	clz	r1, r3
 80002ce:	2900      	cmp	r1, #0
 80002d0:	d146      	bne.n	8000360 <__udivmoddi4+0x150>
 80002d2:	42a3      	cmp	r3, r4
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xcc>
 80002d6:	4290      	cmp	r0, r2
 80002d8:	f0c0 80f0 	bcc.w	80004bc <__udivmoddi4+0x2ac>
 80002dc:	1a86      	subs	r6, r0, r2
 80002de:	eb64 0303 	sbc.w	r3, r4, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	2d00      	cmp	r5, #0
 80002e6:	d0e6      	beq.n	80002b6 <__udivmoddi4+0xa6>
 80002e8:	e9c5 6300 	strd	r6, r3, [r5]
 80002ec:	e7e3      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ee:	2a00      	cmp	r2, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x204>
 80002f4:	eba1 040c 	sub.w	r4, r1, ip
 80002f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002fc:	fa1f f78c 	uxth.w	r7, ip
 8000300:	2101      	movs	r1, #1
 8000302:	fbb4 f6f8 	udiv	r6, r4, r8
 8000306:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030a:	fb08 4416 	mls	r4, r8, r6, r4
 800030e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000312:	fb07 f006 	mul.w	r0, r7, r6
 8000316:	4298      	cmp	r0, r3
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x11c>
 800031a:	eb1c 0303 	adds.w	r3, ip, r3
 800031e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x11a>
 8000324:	4298      	cmp	r0, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2b4>
 800032a:	4626      	mov	r6, r4
 800032c:	1a1c      	subs	r4, r3, r0
 800032e:	fa1f f38e 	uxth.w	r3, lr
 8000332:	fbb4 f0f8 	udiv	r0, r4, r8
 8000336:	fb08 4410 	mls	r4, r8, r0, r4
 800033a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800033e:	fb00 f707 	mul.w	r7, r0, r7
 8000342:	429f      	cmp	r7, r3
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x148>
 8000346:	eb1c 0303 	adds.w	r3, ip, r3
 800034a:	f100 34ff 	add.w	r4, r0, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x146>
 8000350:	429f      	cmp	r7, r3
 8000352:	f200 80b0 	bhi.w	80004b6 <__udivmoddi4+0x2a6>
 8000356:	4620      	mov	r0, r4
 8000358:	1bdb      	subs	r3, r3, r7
 800035a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800035e:	e7a5      	b.n	80002ac <__udivmoddi4+0x9c>
 8000360:	f1c1 0620 	rsb	r6, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 f706 	lsr.w	r7, r2, r6
 800036a:	431f      	orrs	r7, r3
 800036c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000370:	fa04 f301 	lsl.w	r3, r4, r1
 8000374:	ea43 030c 	orr.w	r3, r3, ip
 8000378:	40f4      	lsrs	r4, r6
 800037a:	fa00 f801 	lsl.w	r8, r0, r1
 800037e:	0c38      	lsrs	r0, r7, #16
 8000380:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000384:	fbb4 fef0 	udiv	lr, r4, r0
 8000388:	fa1f fc87 	uxth.w	ip, r7
 800038c:	fb00 441e 	mls	r4, r0, lr, r4
 8000390:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000394:	fb0e f90c 	mul.w	r9, lr, ip
 8000398:	45a1      	cmp	r9, r4
 800039a:	fa02 f201 	lsl.w	r2, r2, r1
 800039e:	d90a      	bls.n	80003b6 <__udivmoddi4+0x1a6>
 80003a0:	193c      	adds	r4, r7, r4
 80003a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003a6:	f080 8084 	bcs.w	80004b2 <__udivmoddi4+0x2a2>
 80003aa:	45a1      	cmp	r9, r4
 80003ac:	f240 8081 	bls.w	80004b2 <__udivmoddi4+0x2a2>
 80003b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003b4:	443c      	add	r4, r7
 80003b6:	eba4 0409 	sub.w	r4, r4, r9
 80003ba:	fa1f f983 	uxth.w	r9, r3
 80003be:	fbb4 f3f0 	udiv	r3, r4, r0
 80003c2:	fb00 4413 	mls	r4, r0, r3, r4
 80003c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d907      	bls.n	80003e2 <__udivmoddi4+0x1d2>
 80003d2:	193c      	adds	r4, r7, r4
 80003d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d8:	d267      	bcs.n	80004aa <__udivmoddi4+0x29a>
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d965      	bls.n	80004aa <__udivmoddi4+0x29a>
 80003de:	3b02      	subs	r3, #2
 80003e0:	443c      	add	r4, r7
 80003e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003e6:	fba0 9302 	umull	r9, r3, r0, r2
 80003ea:	eba4 040c 	sub.w	r4, r4, ip
 80003ee:	429c      	cmp	r4, r3
 80003f0:	46ce      	mov	lr, r9
 80003f2:	469c      	mov	ip, r3
 80003f4:	d351      	bcc.n	800049a <__udivmoddi4+0x28a>
 80003f6:	d04e      	beq.n	8000496 <__udivmoddi4+0x286>
 80003f8:	b155      	cbz	r5, 8000410 <__udivmoddi4+0x200>
 80003fa:	ebb8 030e 	subs.w	r3, r8, lr
 80003fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000402:	fa04 f606 	lsl.w	r6, r4, r6
 8000406:	40cb      	lsrs	r3, r1
 8000408:	431e      	orrs	r6, r3
 800040a:	40cc      	lsrs	r4, r1
 800040c:	e9c5 6400 	strd	r6, r4, [r5]
 8000410:	2100      	movs	r1, #0
 8000412:	e750      	b.n	80002b6 <__udivmoddi4+0xa6>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f103 	lsr.w	r1, r0, r3
 800041c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000420:	fa24 f303 	lsr.w	r3, r4, r3
 8000424:	4094      	lsls	r4, r2
 8000426:	430c      	orrs	r4, r1
 8000428:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800042c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000430:	fa1f f78c 	uxth.w	r7, ip
 8000434:	fbb3 f0f8 	udiv	r0, r3, r8
 8000438:	fb08 3110 	mls	r1, r8, r0, r3
 800043c:	0c23      	lsrs	r3, r4, #16
 800043e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000442:	fb00 f107 	mul.w	r1, r0, r7
 8000446:	4299      	cmp	r1, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x24c>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000452:	d22c      	bcs.n	80004ae <__udivmoddi4+0x29e>
 8000454:	4299      	cmp	r1, r3
 8000456:	d92a      	bls.n	80004ae <__udivmoddi4+0x29e>
 8000458:	3802      	subs	r0, #2
 800045a:	4463      	add	r3, ip
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b2a4      	uxth	r4, r4
 8000460:	fbb3 f1f8 	udiv	r1, r3, r8
 8000464:	fb08 3311 	mls	r3, r8, r1, r3
 8000468:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800046c:	fb01 f307 	mul.w	r3, r1, r7
 8000470:	42a3      	cmp	r3, r4
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x276>
 8000474:	eb1c 0404 	adds.w	r4, ip, r4
 8000478:	f101 36ff 	add.w	r6, r1, #4294967295
 800047c:	d213      	bcs.n	80004a6 <__udivmoddi4+0x296>
 800047e:	42a3      	cmp	r3, r4
 8000480:	d911      	bls.n	80004a6 <__udivmoddi4+0x296>
 8000482:	3902      	subs	r1, #2
 8000484:	4464      	add	r4, ip
 8000486:	1ae4      	subs	r4, r4, r3
 8000488:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800048c:	e739      	b.n	8000302 <__udivmoddi4+0xf2>
 800048e:	4604      	mov	r4, r0
 8000490:	e6f0      	b.n	8000274 <__udivmoddi4+0x64>
 8000492:	4608      	mov	r0, r1
 8000494:	e706      	b.n	80002a4 <__udivmoddi4+0x94>
 8000496:	45c8      	cmp	r8, r9
 8000498:	d2ae      	bcs.n	80003f8 <__udivmoddi4+0x1e8>
 800049a:	ebb9 0e02 	subs.w	lr, r9, r2
 800049e:	eb63 0c07 	sbc.w	ip, r3, r7
 80004a2:	3801      	subs	r0, #1
 80004a4:	e7a8      	b.n	80003f8 <__udivmoddi4+0x1e8>
 80004a6:	4631      	mov	r1, r6
 80004a8:	e7ed      	b.n	8000486 <__udivmoddi4+0x276>
 80004aa:	4603      	mov	r3, r0
 80004ac:	e799      	b.n	80003e2 <__udivmoddi4+0x1d2>
 80004ae:	4630      	mov	r0, r6
 80004b0:	e7d4      	b.n	800045c <__udivmoddi4+0x24c>
 80004b2:	46d6      	mov	lr, sl
 80004b4:	e77f      	b.n	80003b6 <__udivmoddi4+0x1a6>
 80004b6:	4463      	add	r3, ip
 80004b8:	3802      	subs	r0, #2
 80004ba:	e74d      	b.n	8000358 <__udivmoddi4+0x148>
 80004bc:	4606      	mov	r6, r0
 80004be:	4623      	mov	r3, r4
 80004c0:	4608      	mov	r0, r1
 80004c2:	e70f      	b.n	80002e4 <__udivmoddi4+0xd4>
 80004c4:	3e02      	subs	r6, #2
 80004c6:	4463      	add	r3, ip
 80004c8:	e730      	b.n	800032c <__udivmoddi4+0x11c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d4:	f000 f9e2 	bl	800089c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d8:	f000 f832 	bl	8000540 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004dc:	f000 f890 	bl	8000600 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004e0:	f001 f968 	bl	80017b4 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80004e4:	4a0d      	ldr	r2, [pc, #52]	@ (800051c <main+0x4c>)
 80004e6:	2100      	movs	r1, #0
 80004e8:	480d      	ldr	r0, [pc, #52]	@ (8000520 <main+0x50>)
 80004ea:	f001 f9ad 	bl	8001848 <osThreadNew>
 80004ee:	4603      	mov	r3, r0
 80004f0:	4a0c      	ldr	r2, [pc, #48]	@ (8000524 <main+0x54>)
 80004f2:	6013      	str	r3, [r2, #0]

  /* creation of FlashGreenLedTa */
  FlashGreenLedTaHandle = osThreadNew(FlashGreenTask, NULL, &FlashGreenLedTa_attributes);
 80004f4:	4a0c      	ldr	r2, [pc, #48]	@ (8000528 <main+0x58>)
 80004f6:	2100      	movs	r1, #0
 80004f8:	480c      	ldr	r0, [pc, #48]	@ (800052c <main+0x5c>)
 80004fa:	f001 f9a5 	bl	8001848 <osThreadNew>
 80004fe:	4603      	mov	r3, r0
 8000500:	4a0b      	ldr	r2, [pc, #44]	@ (8000530 <main+0x60>)
 8000502:	6013      	str	r3, [r2, #0]

  /* creation of FlashRedLedTask */
  FlashRedLedTaskHandle = osThreadNew(FlashRedTask, NULL, &FlashRedLedTask_attributes);
 8000504:	4a0b      	ldr	r2, [pc, #44]	@ (8000534 <main+0x64>)
 8000506:	2100      	movs	r1, #0
 8000508:	480b      	ldr	r0, [pc, #44]	@ (8000538 <main+0x68>)
 800050a:	f001 f99d 	bl	8001848 <osThreadNew>
 800050e:	4603      	mov	r3, r0
 8000510:	4a0a      	ldr	r2, [pc, #40]	@ (800053c <main+0x6c>)
 8000512:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000514:	f001 f972 	bl	80017fc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000518:	bf00      	nop
 800051a:	e7fd      	b.n	8000518 <main+0x48>
 800051c:	08004544 	.word	0x08004544
 8000520:	08000689 	.word	0x08000689
 8000524:	2000007c 	.word	0x2000007c
 8000528:	08004568 	.word	0x08004568
 800052c:	08000699 	.word	0x08000699
 8000530:	20000080 	.word	0x20000080
 8000534:	0800458c 	.word	0x0800458c
 8000538:	08000705 	.word	0x08000705
 800053c:	20000084 	.word	0x20000084

08000540 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b094      	sub	sp, #80	@ 0x50
 8000544:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000546:	f107 0320 	add.w	r3, r7, #32
 800054a:	2230      	movs	r2, #48	@ 0x30
 800054c:	2100      	movs	r1, #0
 800054e:	4618      	mov	r0, r3
 8000550:	f003 fee2 	bl	8004318 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000554:	f107 030c 	add.w	r3, r7, #12
 8000558:	2200      	movs	r2, #0
 800055a:	601a      	str	r2, [r3, #0]
 800055c:	605a      	str	r2, [r3, #4]
 800055e:	609a      	str	r2, [r3, #8]
 8000560:	60da      	str	r2, [r3, #12]
 8000562:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000564:	2300      	movs	r3, #0
 8000566:	60bb      	str	r3, [r7, #8]
 8000568:	4b23      	ldr	r3, [pc, #140]	@ (80005f8 <SystemClock_Config+0xb8>)
 800056a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800056c:	4a22      	ldr	r2, [pc, #136]	@ (80005f8 <SystemClock_Config+0xb8>)
 800056e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000572:	6413      	str	r3, [r2, #64]	@ 0x40
 8000574:	4b20      	ldr	r3, [pc, #128]	@ (80005f8 <SystemClock_Config+0xb8>)
 8000576:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000578:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800057c:	60bb      	str	r3, [r7, #8]
 800057e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000580:	2300      	movs	r3, #0
 8000582:	607b      	str	r3, [r7, #4]
 8000584:	4b1d      	ldr	r3, [pc, #116]	@ (80005fc <SystemClock_Config+0xbc>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800058c:	4a1b      	ldr	r2, [pc, #108]	@ (80005fc <SystemClock_Config+0xbc>)
 800058e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000592:	6013      	str	r3, [r2, #0]
 8000594:	4b19      	ldr	r3, [pc, #100]	@ (80005fc <SystemClock_Config+0xbc>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800059c:	607b      	str	r3, [r7, #4]
 800059e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005a0:	2302      	movs	r3, #2
 80005a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005a4:	2301      	movs	r3, #1
 80005a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005a8:	2310      	movs	r3, #16
 80005aa:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005ac:	2300      	movs	r3, #0
 80005ae:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b0:	f107 0320 	add.w	r3, r7, #32
 80005b4:	4618      	mov	r0, r3
 80005b6:	f000 fca5 	bl	8000f04 <HAL_RCC_OscConfig>
 80005ba:	4603      	mov	r3, r0
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d001      	beq.n	80005c4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80005c0:	f000 f8d6 	bl	8000770 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005c4:	230f      	movs	r3, #15
 80005c6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005c8:	2300      	movs	r3, #0
 80005ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005cc:	2300      	movs	r3, #0
 80005ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005d0:	2300      	movs	r3, #0
 80005d2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005d4:	2300      	movs	r3, #0
 80005d6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005d8:	f107 030c 	add.w	r3, r7, #12
 80005dc:	2100      	movs	r1, #0
 80005de:	4618      	mov	r0, r3
 80005e0:	f000 ff08 	bl	80013f4 <HAL_RCC_ClockConfig>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d001      	beq.n	80005ee <SystemClock_Config+0xae>
  {
    Error_Handler();
 80005ea:	f000 f8c1 	bl	8000770 <Error_Handler>
  }
}
 80005ee:	bf00      	nop
 80005f0:	3750      	adds	r7, #80	@ 0x50
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	40023800 	.word	0x40023800
 80005fc:	40007000 	.word	0x40007000

08000600 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b088      	sub	sp, #32
 8000604:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000606:	f107 030c 	add.w	r3, r7, #12
 800060a:	2200      	movs	r2, #0
 800060c:	601a      	str	r2, [r3, #0]
 800060e:	605a      	str	r2, [r3, #4]
 8000610:	609a      	str	r2, [r3, #8]
 8000612:	60da      	str	r2, [r3, #12]
 8000614:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000616:	2300      	movs	r3, #0
 8000618:	60bb      	str	r3, [r7, #8]
 800061a:	4b19      	ldr	r3, [pc, #100]	@ (8000680 <MX_GPIO_Init+0x80>)
 800061c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800061e:	4a18      	ldr	r2, [pc, #96]	@ (8000680 <MX_GPIO_Init+0x80>)
 8000620:	f043 0302 	orr.w	r3, r3, #2
 8000624:	6313      	str	r3, [r2, #48]	@ 0x30
 8000626:	4b16      	ldr	r3, [pc, #88]	@ (8000680 <MX_GPIO_Init+0x80>)
 8000628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800062a:	f003 0302 	and.w	r3, r3, #2
 800062e:	60bb      	str	r3, [r7, #8]
 8000630:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000632:	2300      	movs	r3, #0
 8000634:	607b      	str	r3, [r7, #4]
 8000636:	4b12      	ldr	r3, [pc, #72]	@ (8000680 <MX_GPIO_Init+0x80>)
 8000638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800063a:	4a11      	ldr	r2, [pc, #68]	@ (8000680 <MX_GPIO_Init+0x80>)
 800063c:	f043 0301 	orr.w	r3, r3, #1
 8000640:	6313      	str	r3, [r2, #48]	@ 0x30
 8000642:	4b0f      	ldr	r3, [pc, #60]	@ (8000680 <MX_GPIO_Init+0x80>)
 8000644:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000646:	f003 0301 	and.w	r3, r3, #1
 800064a:	607b      	str	r3, [r7, #4]
 800064c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, green_led_task_Pin|green_led_Pin|red_led_task_Pin|red_led_Pin, GPIO_PIN_RESET);
 800064e:	2200      	movs	r2, #0
 8000650:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8000654:	480b      	ldr	r0, [pc, #44]	@ (8000684 <MX_GPIO_Init+0x84>)
 8000656:	f000 fc21 	bl	8000e9c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : green_led_task_Pin green_led_Pin red_led_task_Pin red_led_Pin */
  GPIO_InitStruct.Pin = green_led_task_Pin|green_led_Pin|red_led_task_Pin|red_led_Pin;
 800065a:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 800065e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000660:	2301      	movs	r3, #1
 8000662:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000664:	2300      	movs	r3, #0
 8000666:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000668:	2300      	movs	r3, #0
 800066a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800066c:	f107 030c 	add.w	r3, r7, #12
 8000670:	4619      	mov	r1, r3
 8000672:	4804      	ldr	r0, [pc, #16]	@ (8000684 <MX_GPIO_Init+0x84>)
 8000674:	f000 fa8e 	bl	8000b94 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000678:	bf00      	nop
 800067a:	3720      	adds	r7, #32
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}
 8000680:	40023800 	.word	0x40023800
 8000684:	40020400 	.word	0x40020400

08000688 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b082      	sub	sp, #8
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000690:	2001      	movs	r0, #1
 8000692:	f001 f96b 	bl	800196c <osDelay>
 8000696:	e7fb      	b.n	8000690 <StartDefaultTask+0x8>

08000698 <FlashGreenTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_FlashGreenTask */
void FlashGreenTask(void *argument)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b084      	sub	sp, #16
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN FlashGreenTask */
  /* Infinite loop */
	 for(;;)
	  {
		HAL_GPIO_WritePin(green_led_task_GPIO_Port, green_led_task_Pin, 1);
 80006a0:	2201      	movs	r2, #1
 80006a2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80006a6:	4816      	ldr	r0, [pc, #88]	@ (8000700 <FlashGreenTask+0x68>)
 80006a8:	f000 fbf8 	bl	8000e9c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(green_led_GPIO_Port, green_led_Pin, 0);
 80006ac:	2200      	movs	r2, #0
 80006ae:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80006b2:	4813      	ldr	r0, [pc, #76]	@ (8000700 <FlashGreenTask+0x68>)
 80006b4:	f000 fbf2 	bl	8000e9c <HAL_GPIO_WritePin>
		for (int var = 0; var < 80; ++var) {
 80006b8:	2300      	movs	r3, #0
 80006ba:	60fb      	str	r3, [r7, #12]
 80006bc:	e012      	b.n	80006e4 <FlashGreenTask+0x4c>
		HAL_GPIO_TogglePin(green_led_GPIO_Port, green_led_Pin);
 80006be:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80006c2:	480f      	ldr	r0, [pc, #60]	@ (8000700 <FlashGreenTask+0x68>)
 80006c4:	f000 fc03 	bl	8000ece <HAL_GPIO_TogglePin>
		HAL_Delay(25);
 80006c8:	2019      	movs	r0, #25
 80006ca:	f000 f959 	bl	8000980 <HAL_Delay>
		HAL_GPIO_TogglePin(green_led_GPIO_Port, green_led_Pin);
 80006ce:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80006d2:	480b      	ldr	r0, [pc, #44]	@ (8000700 <FlashGreenTask+0x68>)
 80006d4:	f000 fbfb 	bl	8000ece <HAL_GPIO_TogglePin>
		HAL_Delay(25);
 80006d8:	2019      	movs	r0, #25
 80006da:	f000 f951 	bl	8000980 <HAL_Delay>
		for (int var = 0; var < 80; ++var) {
 80006de:	68fb      	ldr	r3, [r7, #12]
 80006e0:	3301      	adds	r3, #1
 80006e2:	60fb      	str	r3, [r7, #12]
 80006e4:	68fb      	ldr	r3, [r7, #12]
 80006e6:	2b4f      	cmp	r3, #79	@ 0x4f
 80006e8:	dde9      	ble.n	80006be <FlashGreenTask+0x26>
		}
	    HAL_GPIO_WritePin(green_led_task_GPIO_Port, green_led_task_Pin, 0);
 80006ea:	2200      	movs	r2, #0
 80006ec:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80006f0:	4803      	ldr	r0, [pc, #12]	@ (8000700 <FlashGreenTask+0x68>)
 80006f2:	f000 fbd3 	bl	8000e9c <HAL_GPIO_WritePin>
	    osDelay(6000);
 80006f6:	f241 7070 	movw	r0, #6000	@ 0x1770
 80006fa:	f001 f937 	bl	800196c <osDelay>
		HAL_GPIO_WritePin(green_led_task_GPIO_Port, green_led_task_Pin, 1);
 80006fe:	e7cf      	b.n	80006a0 <FlashGreenTask+0x8>
 8000700:	40020400 	.word	0x40020400

08000704 <FlashRedTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_FlashRedTask */
void FlashRedTask(void *argument)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b084      	sub	sp, #16
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN FlashRedTask */
  /* Infinite loop */
	 for(;;)
	  {
			HAL_GPIO_WritePin(red_led_task_GPIO_Port, red_led_task_Pin, 1);
 800070c:	2201      	movs	r2, #1
 800070e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000712:	4816      	ldr	r0, [pc, #88]	@ (800076c <FlashRedTask+0x68>)
 8000714:	f000 fbc2 	bl	8000e9c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(red_led_GPIO_Port, red_led_Pin, 0);
 8000718:	2200      	movs	r2, #0
 800071a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800071e:	4813      	ldr	r0, [pc, #76]	@ (800076c <FlashRedTask+0x68>)
 8000720:	f000 fbbc 	bl	8000e9c <HAL_GPIO_WritePin>
			for (int var = 0; var < 10; ++var) {
 8000724:	2300      	movs	r3, #0
 8000726:	60fb      	str	r3, [r7, #12]
 8000728:	e012      	b.n	8000750 <FlashRedTask+0x4c>
			HAL_GPIO_TogglePin(red_led_GPIO_Port, red_led_Pin);
 800072a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800072e:	480f      	ldr	r0, [pc, #60]	@ (800076c <FlashRedTask+0x68>)
 8000730:	f000 fbcd 	bl	8000ece <HAL_GPIO_TogglePin>
			HAL_Delay(25);
 8000734:	2019      	movs	r0, #25
 8000736:	f000 f923 	bl	8000980 <HAL_Delay>
			HAL_GPIO_TogglePin(red_led_GPIO_Port, red_led_Pin);
 800073a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800073e:	480b      	ldr	r0, [pc, #44]	@ (800076c <FlashRedTask+0x68>)
 8000740:	f000 fbc5 	bl	8000ece <HAL_GPIO_TogglePin>
			HAL_Delay(25);
 8000744:	2019      	movs	r0, #25
 8000746:	f000 f91b 	bl	8000980 <HAL_Delay>
			for (int var = 0; var < 10; ++var) {
 800074a:	68fb      	ldr	r3, [r7, #12]
 800074c:	3301      	adds	r3, #1
 800074e:	60fb      	str	r3, [r7, #12]
 8000750:	68fb      	ldr	r3, [r7, #12]
 8000752:	2b09      	cmp	r3, #9
 8000754:	dde9      	ble.n	800072a <FlashRedTask+0x26>
			}
		    HAL_GPIO_WritePin(red_led_task_GPIO_Port, red_led_task_Pin, 0);
 8000756:	2200      	movs	r2, #0
 8000758:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800075c:	4803      	ldr	r0, [pc, #12]	@ (800076c <FlashRedTask+0x68>)
 800075e:	f000 fb9d 	bl	8000e9c <HAL_GPIO_WritePin>
		    osDelay(1500);
 8000762:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000766:	f001 f901 	bl	800196c <osDelay>
			HAL_GPIO_WritePin(red_led_task_GPIO_Port, red_led_task_Pin, 1);
 800076a:	e7cf      	b.n	800070c <FlashRedTask+0x8>
 800076c:	40020400 	.word	0x40020400

08000770 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000774:	b672      	cpsid	i
}
 8000776:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000778:	bf00      	nop
 800077a:	e7fd      	b.n	8000778 <Error_Handler+0x8>

0800077c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b082      	sub	sp, #8
 8000780:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000782:	2300      	movs	r3, #0
 8000784:	607b      	str	r3, [r7, #4]
 8000786:	4b12      	ldr	r3, [pc, #72]	@ (80007d0 <HAL_MspInit+0x54>)
 8000788:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800078a:	4a11      	ldr	r2, [pc, #68]	@ (80007d0 <HAL_MspInit+0x54>)
 800078c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000790:	6453      	str	r3, [r2, #68]	@ 0x44
 8000792:	4b0f      	ldr	r3, [pc, #60]	@ (80007d0 <HAL_MspInit+0x54>)
 8000794:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000796:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800079a:	607b      	str	r3, [r7, #4]
 800079c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	603b      	str	r3, [r7, #0]
 80007a2:	4b0b      	ldr	r3, [pc, #44]	@ (80007d0 <HAL_MspInit+0x54>)
 80007a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007a6:	4a0a      	ldr	r2, [pc, #40]	@ (80007d0 <HAL_MspInit+0x54>)
 80007a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80007ae:	4b08      	ldr	r3, [pc, #32]	@ (80007d0 <HAL_MspInit+0x54>)
 80007b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007b6:	603b      	str	r3, [r7, #0]
 80007b8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80007ba:	2200      	movs	r2, #0
 80007bc:	210f      	movs	r1, #15
 80007be:	f06f 0001 	mvn.w	r0, #1
 80007c2:	f000 f9be 	bl	8000b42 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007c6:	bf00      	nop
 80007c8:	3708      	adds	r7, #8
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	40023800 	.word	0x40023800

080007d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80007d8:	bf00      	nop
 80007da:	e7fd      	b.n	80007d8 <NMI_Handler+0x4>

080007dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007dc:	b480      	push	{r7}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007e0:	bf00      	nop
 80007e2:	e7fd      	b.n	80007e0 <HardFault_Handler+0x4>

080007e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007e8:	bf00      	nop
 80007ea:	e7fd      	b.n	80007e8 <MemManage_Handler+0x4>

080007ec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007f0:	bf00      	nop
 80007f2:	e7fd      	b.n	80007f0 <BusFault_Handler+0x4>

080007f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007f8:	bf00      	nop
 80007fa:	e7fd      	b.n	80007f8 <UsageFault_Handler+0x4>

080007fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000800:	bf00      	nop
 8000802:	46bd      	mov	sp, r7
 8000804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000808:	4770      	bx	lr

0800080a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800080a:	b580      	push	{r7, lr}
 800080c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800080e:	f000 f897 	bl	8000940 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000812:	f002 fd01 	bl	8003218 <xTaskGetSchedulerState>
 8000816:	4603      	mov	r3, r0
 8000818:	2b01      	cmp	r3, #1
 800081a:	d001      	beq.n	8000820 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800081c:	f003 fafc 	bl	8003e18 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000820:	bf00      	nop
 8000822:	bd80      	pop	{r7, pc}

08000824 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000828:	4b06      	ldr	r3, [pc, #24]	@ (8000844 <SystemInit+0x20>)
 800082a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800082e:	4a05      	ldr	r2, [pc, #20]	@ (8000844 <SystemInit+0x20>)
 8000830:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000834:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000838:	bf00      	nop
 800083a:	46bd      	mov	sp, r7
 800083c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000840:	4770      	bx	lr
 8000842:	bf00      	nop
 8000844:	e000ed00 	.word	0xe000ed00

08000848 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000848:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000880 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800084c:	f7ff ffea 	bl	8000824 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000850:	480c      	ldr	r0, [pc, #48]	@ (8000884 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000852:	490d      	ldr	r1, [pc, #52]	@ (8000888 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000854:	4a0d      	ldr	r2, [pc, #52]	@ (800088c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000856:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000858:	e002      	b.n	8000860 <LoopCopyDataInit>

0800085a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800085a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800085c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800085e:	3304      	adds	r3, #4

08000860 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000860:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000862:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000864:	d3f9      	bcc.n	800085a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000866:	4a0a      	ldr	r2, [pc, #40]	@ (8000890 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000868:	4c0a      	ldr	r4, [pc, #40]	@ (8000894 <LoopFillZerobss+0x22>)
  movs r3, #0
 800086a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800086c:	e001      	b.n	8000872 <LoopFillZerobss>

0800086e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800086e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000870:	3204      	adds	r2, #4

08000872 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000872:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000874:	d3fb      	bcc.n	800086e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000876:	f003 fdad 	bl	80043d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800087a:	f7ff fe29 	bl	80004d0 <main>
  bx  lr    
 800087e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000880:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000884:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000888:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 800088c:	080045d0 	.word	0x080045d0
  ldr r2, =_sbss
 8000890:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000894:	20004bb4 	.word	0x20004bb4

08000898 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000898:	e7fe      	b.n	8000898 <ADC_IRQHandler>
	...

0800089c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80008a0:	4b0e      	ldr	r3, [pc, #56]	@ (80008dc <HAL_Init+0x40>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	4a0d      	ldr	r2, [pc, #52]	@ (80008dc <HAL_Init+0x40>)
 80008a6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80008aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80008ac:	4b0b      	ldr	r3, [pc, #44]	@ (80008dc <HAL_Init+0x40>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	4a0a      	ldr	r2, [pc, #40]	@ (80008dc <HAL_Init+0x40>)
 80008b2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80008b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008b8:	4b08      	ldr	r3, [pc, #32]	@ (80008dc <HAL_Init+0x40>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	4a07      	ldr	r2, [pc, #28]	@ (80008dc <HAL_Init+0x40>)
 80008be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80008c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008c4:	2003      	movs	r0, #3
 80008c6:	f000 f931 	bl	8000b2c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008ca:	200f      	movs	r0, #15
 80008cc:	f000 f808 	bl	80008e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008d0:	f7ff ff54 	bl	800077c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008d4:	2300      	movs	r3, #0
}
 80008d6:	4618      	mov	r0, r3
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	40023c00 	.word	0x40023c00

080008e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008e8:	4b12      	ldr	r3, [pc, #72]	@ (8000934 <HAL_InitTick+0x54>)
 80008ea:	681a      	ldr	r2, [r3, #0]
 80008ec:	4b12      	ldr	r3, [pc, #72]	@ (8000938 <HAL_InitTick+0x58>)
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	4619      	mov	r1, r3
 80008f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80008fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80008fe:	4618      	mov	r0, r3
 8000900:	f000 f93b 	bl	8000b7a <HAL_SYSTICK_Config>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800090a:	2301      	movs	r3, #1
 800090c:	e00e      	b.n	800092c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	2b0f      	cmp	r3, #15
 8000912:	d80a      	bhi.n	800092a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000914:	2200      	movs	r2, #0
 8000916:	6879      	ldr	r1, [r7, #4]
 8000918:	f04f 30ff 	mov.w	r0, #4294967295
 800091c:	f000 f911 	bl	8000b42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000920:	4a06      	ldr	r2, [pc, #24]	@ (800093c <HAL_InitTick+0x5c>)
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000926:	2300      	movs	r3, #0
 8000928:	e000      	b.n	800092c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800092a:	2301      	movs	r3, #1
}
 800092c:	4618      	mov	r0, r3
 800092e:	3708      	adds	r7, #8
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	20000000 	.word	0x20000000
 8000938:	20000008 	.word	0x20000008
 800093c:	20000004 	.word	0x20000004

08000940 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000944:	4b06      	ldr	r3, [pc, #24]	@ (8000960 <HAL_IncTick+0x20>)
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	461a      	mov	r2, r3
 800094a:	4b06      	ldr	r3, [pc, #24]	@ (8000964 <HAL_IncTick+0x24>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	4413      	add	r3, r2
 8000950:	4a04      	ldr	r2, [pc, #16]	@ (8000964 <HAL_IncTick+0x24>)
 8000952:	6013      	str	r3, [r2, #0]
}
 8000954:	bf00      	nop
 8000956:	46bd      	mov	sp, r7
 8000958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095c:	4770      	bx	lr
 800095e:	bf00      	nop
 8000960:	20000008 	.word	0x20000008
 8000964:	20000088 	.word	0x20000088

08000968 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  return uwTick;
 800096c:	4b03      	ldr	r3, [pc, #12]	@ (800097c <HAL_GetTick+0x14>)
 800096e:	681b      	ldr	r3, [r3, #0]
}
 8000970:	4618      	mov	r0, r3
 8000972:	46bd      	mov	sp, r7
 8000974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000978:	4770      	bx	lr
 800097a:	bf00      	nop
 800097c:	20000088 	.word	0x20000088

08000980 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b084      	sub	sp, #16
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000988:	f7ff ffee 	bl	8000968 <HAL_GetTick>
 800098c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000998:	d005      	beq.n	80009a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800099a:	4b0a      	ldr	r3, [pc, #40]	@ (80009c4 <HAL_Delay+0x44>)
 800099c:	781b      	ldrb	r3, [r3, #0]
 800099e:	461a      	mov	r2, r3
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	4413      	add	r3, r2
 80009a4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80009a6:	bf00      	nop
 80009a8:	f7ff ffde 	bl	8000968 <HAL_GetTick>
 80009ac:	4602      	mov	r2, r0
 80009ae:	68bb      	ldr	r3, [r7, #8]
 80009b0:	1ad3      	subs	r3, r2, r3
 80009b2:	68fa      	ldr	r2, [r7, #12]
 80009b4:	429a      	cmp	r2, r3
 80009b6:	d8f7      	bhi.n	80009a8 <HAL_Delay+0x28>
  {
  }
}
 80009b8:	bf00      	nop
 80009ba:	bf00      	nop
 80009bc:	3710      	adds	r7, #16
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	20000008 	.word	0x20000008

080009c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009c8:	b480      	push	{r7}
 80009ca:	b085      	sub	sp, #20
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	f003 0307 	and.w	r3, r3, #7
 80009d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009d8:	4b0c      	ldr	r3, [pc, #48]	@ (8000a0c <__NVIC_SetPriorityGrouping+0x44>)
 80009da:	68db      	ldr	r3, [r3, #12]
 80009dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009de:	68ba      	ldr	r2, [r7, #8]
 80009e0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80009e4:	4013      	ands	r3, r2
 80009e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009ec:	68bb      	ldr	r3, [r7, #8]
 80009ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009f0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80009f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009fa:	4a04      	ldr	r2, [pc, #16]	@ (8000a0c <__NVIC_SetPriorityGrouping+0x44>)
 80009fc:	68bb      	ldr	r3, [r7, #8]
 80009fe:	60d3      	str	r3, [r2, #12]
}
 8000a00:	bf00      	nop
 8000a02:	3714      	adds	r7, #20
 8000a04:	46bd      	mov	sp, r7
 8000a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0a:	4770      	bx	lr
 8000a0c:	e000ed00 	.word	0xe000ed00

08000a10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a14:	4b04      	ldr	r3, [pc, #16]	@ (8000a28 <__NVIC_GetPriorityGrouping+0x18>)
 8000a16:	68db      	ldr	r3, [r3, #12]
 8000a18:	0a1b      	lsrs	r3, r3, #8
 8000a1a:	f003 0307 	and.w	r3, r3, #7
}
 8000a1e:	4618      	mov	r0, r3
 8000a20:	46bd      	mov	sp, r7
 8000a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a26:	4770      	bx	lr
 8000a28:	e000ed00 	.word	0xe000ed00

08000a2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b083      	sub	sp, #12
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	4603      	mov	r3, r0
 8000a34:	6039      	str	r1, [r7, #0]
 8000a36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	db0a      	blt.n	8000a56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a40:	683b      	ldr	r3, [r7, #0]
 8000a42:	b2da      	uxtb	r2, r3
 8000a44:	490c      	ldr	r1, [pc, #48]	@ (8000a78 <__NVIC_SetPriority+0x4c>)
 8000a46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a4a:	0112      	lsls	r2, r2, #4
 8000a4c:	b2d2      	uxtb	r2, r2
 8000a4e:	440b      	add	r3, r1
 8000a50:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a54:	e00a      	b.n	8000a6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a56:	683b      	ldr	r3, [r7, #0]
 8000a58:	b2da      	uxtb	r2, r3
 8000a5a:	4908      	ldr	r1, [pc, #32]	@ (8000a7c <__NVIC_SetPriority+0x50>)
 8000a5c:	79fb      	ldrb	r3, [r7, #7]
 8000a5e:	f003 030f 	and.w	r3, r3, #15
 8000a62:	3b04      	subs	r3, #4
 8000a64:	0112      	lsls	r2, r2, #4
 8000a66:	b2d2      	uxtb	r2, r2
 8000a68:	440b      	add	r3, r1
 8000a6a:	761a      	strb	r2, [r3, #24]
}
 8000a6c:	bf00      	nop
 8000a6e:	370c      	adds	r7, #12
 8000a70:	46bd      	mov	sp, r7
 8000a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a76:	4770      	bx	lr
 8000a78:	e000e100 	.word	0xe000e100
 8000a7c:	e000ed00 	.word	0xe000ed00

08000a80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b089      	sub	sp, #36	@ 0x24
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	60f8      	str	r0, [r7, #12]
 8000a88:	60b9      	str	r1, [r7, #8]
 8000a8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	f003 0307 	and.w	r3, r3, #7
 8000a92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a94:	69fb      	ldr	r3, [r7, #28]
 8000a96:	f1c3 0307 	rsb	r3, r3, #7
 8000a9a:	2b04      	cmp	r3, #4
 8000a9c:	bf28      	it	cs
 8000a9e:	2304      	movcs	r3, #4
 8000aa0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000aa2:	69fb      	ldr	r3, [r7, #28]
 8000aa4:	3304      	adds	r3, #4
 8000aa6:	2b06      	cmp	r3, #6
 8000aa8:	d902      	bls.n	8000ab0 <NVIC_EncodePriority+0x30>
 8000aaa:	69fb      	ldr	r3, [r7, #28]
 8000aac:	3b03      	subs	r3, #3
 8000aae:	e000      	b.n	8000ab2 <NVIC_EncodePriority+0x32>
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ab4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ab8:	69bb      	ldr	r3, [r7, #24]
 8000aba:	fa02 f303 	lsl.w	r3, r2, r3
 8000abe:	43da      	mvns	r2, r3
 8000ac0:	68bb      	ldr	r3, [r7, #8]
 8000ac2:	401a      	ands	r2, r3
 8000ac4:	697b      	ldr	r3, [r7, #20]
 8000ac6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ac8:	f04f 31ff 	mov.w	r1, #4294967295
 8000acc:	697b      	ldr	r3, [r7, #20]
 8000ace:	fa01 f303 	lsl.w	r3, r1, r3
 8000ad2:	43d9      	mvns	r1, r3
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ad8:	4313      	orrs	r3, r2
         );
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	3724      	adds	r7, #36	@ 0x24
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr
	...

08000ae8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b082      	sub	sp, #8
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	3b01      	subs	r3, #1
 8000af4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000af8:	d301      	bcc.n	8000afe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000afa:	2301      	movs	r3, #1
 8000afc:	e00f      	b.n	8000b1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000afe:	4a0a      	ldr	r2, [pc, #40]	@ (8000b28 <SysTick_Config+0x40>)
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	3b01      	subs	r3, #1
 8000b04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b06:	210f      	movs	r1, #15
 8000b08:	f04f 30ff 	mov.w	r0, #4294967295
 8000b0c:	f7ff ff8e 	bl	8000a2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b10:	4b05      	ldr	r3, [pc, #20]	@ (8000b28 <SysTick_Config+0x40>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b16:	4b04      	ldr	r3, [pc, #16]	@ (8000b28 <SysTick_Config+0x40>)
 8000b18:	2207      	movs	r2, #7
 8000b1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b1c:	2300      	movs	r3, #0
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	3708      	adds	r7, #8
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	e000e010 	.word	0xe000e010

08000b2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b34:	6878      	ldr	r0, [r7, #4]
 8000b36:	f7ff ff47 	bl	80009c8 <__NVIC_SetPriorityGrouping>
}
 8000b3a:	bf00      	nop
 8000b3c:	3708      	adds	r7, #8
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}

08000b42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b42:	b580      	push	{r7, lr}
 8000b44:	b086      	sub	sp, #24
 8000b46:	af00      	add	r7, sp, #0
 8000b48:	4603      	mov	r3, r0
 8000b4a:	60b9      	str	r1, [r7, #8]
 8000b4c:	607a      	str	r2, [r7, #4]
 8000b4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b50:	2300      	movs	r3, #0
 8000b52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b54:	f7ff ff5c 	bl	8000a10 <__NVIC_GetPriorityGrouping>
 8000b58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b5a:	687a      	ldr	r2, [r7, #4]
 8000b5c:	68b9      	ldr	r1, [r7, #8]
 8000b5e:	6978      	ldr	r0, [r7, #20]
 8000b60:	f7ff ff8e 	bl	8000a80 <NVIC_EncodePriority>
 8000b64:	4602      	mov	r2, r0
 8000b66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b6a:	4611      	mov	r1, r2
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f7ff ff5d 	bl	8000a2c <__NVIC_SetPriority>
}
 8000b72:	bf00      	nop
 8000b74:	3718      	adds	r7, #24
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}

08000b7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b7a:	b580      	push	{r7, lr}
 8000b7c:	b082      	sub	sp, #8
 8000b7e:	af00      	add	r7, sp, #0
 8000b80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b82:	6878      	ldr	r0, [r7, #4]
 8000b84:	f7ff ffb0 	bl	8000ae8 <SysTick_Config>
 8000b88:	4603      	mov	r3, r0
}
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	3708      	adds	r7, #8
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
	...

08000b94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b089      	sub	sp, #36	@ 0x24
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
 8000b9c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000baa:	2300      	movs	r3, #0
 8000bac:	61fb      	str	r3, [r7, #28]
 8000bae:	e159      	b.n	8000e64 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	69fb      	ldr	r3, [r7, #28]
 8000bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000bba:	683b      	ldr	r3, [r7, #0]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	697a      	ldr	r2, [r7, #20]
 8000bc0:	4013      	ands	r3, r2
 8000bc2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000bc4:	693a      	ldr	r2, [r7, #16]
 8000bc6:	697b      	ldr	r3, [r7, #20]
 8000bc8:	429a      	cmp	r2, r3
 8000bca:	f040 8148 	bne.w	8000e5e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	685b      	ldr	r3, [r3, #4]
 8000bd2:	f003 0303 	and.w	r3, r3, #3
 8000bd6:	2b01      	cmp	r3, #1
 8000bd8:	d005      	beq.n	8000be6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	685b      	ldr	r3, [r3, #4]
 8000bde:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000be2:	2b02      	cmp	r3, #2
 8000be4:	d130      	bne.n	8000c48 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	689b      	ldr	r3, [r3, #8]
 8000bea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000bec:	69fb      	ldr	r3, [r7, #28]
 8000bee:	005b      	lsls	r3, r3, #1
 8000bf0:	2203      	movs	r2, #3
 8000bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf6:	43db      	mvns	r3, r3
 8000bf8:	69ba      	ldr	r2, [r7, #24]
 8000bfa:	4013      	ands	r3, r2
 8000bfc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	68da      	ldr	r2, [r3, #12]
 8000c02:	69fb      	ldr	r3, [r7, #28]
 8000c04:	005b      	lsls	r3, r3, #1
 8000c06:	fa02 f303 	lsl.w	r3, r2, r3
 8000c0a:	69ba      	ldr	r2, [r7, #24]
 8000c0c:	4313      	orrs	r3, r2
 8000c0e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	69ba      	ldr	r2, [r7, #24]
 8000c14:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	685b      	ldr	r3, [r3, #4]
 8000c1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	69fb      	ldr	r3, [r7, #28]
 8000c20:	fa02 f303 	lsl.w	r3, r2, r3
 8000c24:	43db      	mvns	r3, r3
 8000c26:	69ba      	ldr	r2, [r7, #24]
 8000c28:	4013      	ands	r3, r2
 8000c2a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	685b      	ldr	r3, [r3, #4]
 8000c30:	091b      	lsrs	r3, r3, #4
 8000c32:	f003 0201 	and.w	r2, r3, #1
 8000c36:	69fb      	ldr	r3, [r7, #28]
 8000c38:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3c:	69ba      	ldr	r2, [r7, #24]
 8000c3e:	4313      	orrs	r3, r2
 8000c40:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	69ba      	ldr	r2, [r7, #24]
 8000c46:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	685b      	ldr	r3, [r3, #4]
 8000c4c:	f003 0303 	and.w	r3, r3, #3
 8000c50:	2b03      	cmp	r3, #3
 8000c52:	d017      	beq.n	8000c84 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	68db      	ldr	r3, [r3, #12]
 8000c58:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000c5a:	69fb      	ldr	r3, [r7, #28]
 8000c5c:	005b      	lsls	r3, r3, #1
 8000c5e:	2203      	movs	r2, #3
 8000c60:	fa02 f303 	lsl.w	r3, r2, r3
 8000c64:	43db      	mvns	r3, r3
 8000c66:	69ba      	ldr	r2, [r7, #24]
 8000c68:	4013      	ands	r3, r2
 8000c6a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	689a      	ldr	r2, [r3, #8]
 8000c70:	69fb      	ldr	r3, [r7, #28]
 8000c72:	005b      	lsls	r3, r3, #1
 8000c74:	fa02 f303 	lsl.w	r3, r2, r3
 8000c78:	69ba      	ldr	r2, [r7, #24]
 8000c7a:	4313      	orrs	r3, r2
 8000c7c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	69ba      	ldr	r2, [r7, #24]
 8000c82:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	685b      	ldr	r3, [r3, #4]
 8000c88:	f003 0303 	and.w	r3, r3, #3
 8000c8c:	2b02      	cmp	r3, #2
 8000c8e:	d123      	bne.n	8000cd8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000c90:	69fb      	ldr	r3, [r7, #28]
 8000c92:	08da      	lsrs	r2, r3, #3
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	3208      	adds	r2, #8
 8000c98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000c9e:	69fb      	ldr	r3, [r7, #28]
 8000ca0:	f003 0307 	and.w	r3, r3, #7
 8000ca4:	009b      	lsls	r3, r3, #2
 8000ca6:	220f      	movs	r2, #15
 8000ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cac:	43db      	mvns	r3, r3
 8000cae:	69ba      	ldr	r2, [r7, #24]
 8000cb0:	4013      	ands	r3, r2
 8000cb2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	691a      	ldr	r2, [r3, #16]
 8000cb8:	69fb      	ldr	r3, [r7, #28]
 8000cba:	f003 0307 	and.w	r3, r3, #7
 8000cbe:	009b      	lsls	r3, r3, #2
 8000cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc4:	69ba      	ldr	r2, [r7, #24]
 8000cc6:	4313      	orrs	r3, r2
 8000cc8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000cca:	69fb      	ldr	r3, [r7, #28]
 8000ccc:	08da      	lsrs	r2, r3, #3
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	3208      	adds	r2, #8
 8000cd2:	69b9      	ldr	r1, [r7, #24]
 8000cd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000cde:	69fb      	ldr	r3, [r7, #28]
 8000ce0:	005b      	lsls	r3, r3, #1
 8000ce2:	2203      	movs	r2, #3
 8000ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce8:	43db      	mvns	r3, r3
 8000cea:	69ba      	ldr	r2, [r7, #24]
 8000cec:	4013      	ands	r3, r2
 8000cee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	685b      	ldr	r3, [r3, #4]
 8000cf4:	f003 0203 	and.w	r2, r3, #3
 8000cf8:	69fb      	ldr	r3, [r7, #28]
 8000cfa:	005b      	lsls	r3, r3, #1
 8000cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000d00:	69ba      	ldr	r2, [r7, #24]
 8000d02:	4313      	orrs	r3, r2
 8000d04:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	69ba      	ldr	r2, [r7, #24]
 8000d0a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	685b      	ldr	r3, [r3, #4]
 8000d10:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	f000 80a2 	beq.w	8000e5e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	60fb      	str	r3, [r7, #12]
 8000d1e:	4b57      	ldr	r3, [pc, #348]	@ (8000e7c <HAL_GPIO_Init+0x2e8>)
 8000d20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d22:	4a56      	ldr	r2, [pc, #344]	@ (8000e7c <HAL_GPIO_Init+0x2e8>)
 8000d24:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d28:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d2a:	4b54      	ldr	r3, [pc, #336]	@ (8000e7c <HAL_GPIO_Init+0x2e8>)
 8000d2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d2e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d32:	60fb      	str	r3, [r7, #12]
 8000d34:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d36:	4a52      	ldr	r2, [pc, #328]	@ (8000e80 <HAL_GPIO_Init+0x2ec>)
 8000d38:	69fb      	ldr	r3, [r7, #28]
 8000d3a:	089b      	lsrs	r3, r3, #2
 8000d3c:	3302      	adds	r3, #2
 8000d3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d42:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000d44:	69fb      	ldr	r3, [r7, #28]
 8000d46:	f003 0303 	and.w	r3, r3, #3
 8000d4a:	009b      	lsls	r3, r3, #2
 8000d4c:	220f      	movs	r2, #15
 8000d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d52:	43db      	mvns	r3, r3
 8000d54:	69ba      	ldr	r2, [r7, #24]
 8000d56:	4013      	ands	r3, r2
 8000d58:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	4a49      	ldr	r2, [pc, #292]	@ (8000e84 <HAL_GPIO_Init+0x2f0>)
 8000d5e:	4293      	cmp	r3, r2
 8000d60:	d019      	beq.n	8000d96 <HAL_GPIO_Init+0x202>
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	4a48      	ldr	r2, [pc, #288]	@ (8000e88 <HAL_GPIO_Init+0x2f4>)
 8000d66:	4293      	cmp	r3, r2
 8000d68:	d013      	beq.n	8000d92 <HAL_GPIO_Init+0x1fe>
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	4a47      	ldr	r2, [pc, #284]	@ (8000e8c <HAL_GPIO_Init+0x2f8>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d00d      	beq.n	8000d8e <HAL_GPIO_Init+0x1fa>
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	4a46      	ldr	r2, [pc, #280]	@ (8000e90 <HAL_GPIO_Init+0x2fc>)
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d007      	beq.n	8000d8a <HAL_GPIO_Init+0x1f6>
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	4a45      	ldr	r2, [pc, #276]	@ (8000e94 <HAL_GPIO_Init+0x300>)
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	d101      	bne.n	8000d86 <HAL_GPIO_Init+0x1f2>
 8000d82:	2304      	movs	r3, #4
 8000d84:	e008      	b.n	8000d98 <HAL_GPIO_Init+0x204>
 8000d86:	2307      	movs	r3, #7
 8000d88:	e006      	b.n	8000d98 <HAL_GPIO_Init+0x204>
 8000d8a:	2303      	movs	r3, #3
 8000d8c:	e004      	b.n	8000d98 <HAL_GPIO_Init+0x204>
 8000d8e:	2302      	movs	r3, #2
 8000d90:	e002      	b.n	8000d98 <HAL_GPIO_Init+0x204>
 8000d92:	2301      	movs	r3, #1
 8000d94:	e000      	b.n	8000d98 <HAL_GPIO_Init+0x204>
 8000d96:	2300      	movs	r3, #0
 8000d98:	69fa      	ldr	r2, [r7, #28]
 8000d9a:	f002 0203 	and.w	r2, r2, #3
 8000d9e:	0092      	lsls	r2, r2, #2
 8000da0:	4093      	lsls	r3, r2
 8000da2:	69ba      	ldr	r2, [r7, #24]
 8000da4:	4313      	orrs	r3, r2
 8000da6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000da8:	4935      	ldr	r1, [pc, #212]	@ (8000e80 <HAL_GPIO_Init+0x2ec>)
 8000daa:	69fb      	ldr	r3, [r7, #28]
 8000dac:	089b      	lsrs	r3, r3, #2
 8000dae:	3302      	adds	r3, #2
 8000db0:	69ba      	ldr	r2, [r7, #24]
 8000db2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000db6:	4b38      	ldr	r3, [pc, #224]	@ (8000e98 <HAL_GPIO_Init+0x304>)
 8000db8:	689b      	ldr	r3, [r3, #8]
 8000dba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000dbc:	693b      	ldr	r3, [r7, #16]
 8000dbe:	43db      	mvns	r3, r3
 8000dc0:	69ba      	ldr	r2, [r7, #24]
 8000dc2:	4013      	ands	r3, r2
 8000dc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	685b      	ldr	r3, [r3, #4]
 8000dca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d003      	beq.n	8000dda <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000dd2:	69ba      	ldr	r2, [r7, #24]
 8000dd4:	693b      	ldr	r3, [r7, #16]
 8000dd6:	4313      	orrs	r3, r2
 8000dd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000dda:	4a2f      	ldr	r2, [pc, #188]	@ (8000e98 <HAL_GPIO_Init+0x304>)
 8000ddc:	69bb      	ldr	r3, [r7, #24]
 8000dde:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000de0:	4b2d      	ldr	r3, [pc, #180]	@ (8000e98 <HAL_GPIO_Init+0x304>)
 8000de2:	68db      	ldr	r3, [r3, #12]
 8000de4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000de6:	693b      	ldr	r3, [r7, #16]
 8000de8:	43db      	mvns	r3, r3
 8000dea:	69ba      	ldr	r2, [r7, #24]
 8000dec:	4013      	ands	r3, r2
 8000dee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d003      	beq.n	8000e04 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000dfc:	69ba      	ldr	r2, [r7, #24]
 8000dfe:	693b      	ldr	r3, [r7, #16]
 8000e00:	4313      	orrs	r3, r2
 8000e02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000e04:	4a24      	ldr	r2, [pc, #144]	@ (8000e98 <HAL_GPIO_Init+0x304>)
 8000e06:	69bb      	ldr	r3, [r7, #24]
 8000e08:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000e0a:	4b23      	ldr	r3, [pc, #140]	@ (8000e98 <HAL_GPIO_Init+0x304>)
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e10:	693b      	ldr	r3, [r7, #16]
 8000e12:	43db      	mvns	r3, r3
 8000e14:	69ba      	ldr	r2, [r7, #24]
 8000e16:	4013      	ands	r3, r2
 8000e18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	685b      	ldr	r3, [r3, #4]
 8000e1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d003      	beq.n	8000e2e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000e26:	69ba      	ldr	r2, [r7, #24]
 8000e28:	693b      	ldr	r3, [r7, #16]
 8000e2a:	4313      	orrs	r3, r2
 8000e2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000e2e:	4a1a      	ldr	r2, [pc, #104]	@ (8000e98 <HAL_GPIO_Init+0x304>)
 8000e30:	69bb      	ldr	r3, [r7, #24]
 8000e32:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e34:	4b18      	ldr	r3, [pc, #96]	@ (8000e98 <HAL_GPIO_Init+0x304>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e3a:	693b      	ldr	r3, [r7, #16]
 8000e3c:	43db      	mvns	r3, r3
 8000e3e:	69ba      	ldr	r2, [r7, #24]
 8000e40:	4013      	ands	r3, r2
 8000e42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d003      	beq.n	8000e58 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000e50:	69ba      	ldr	r2, [r7, #24]
 8000e52:	693b      	ldr	r3, [r7, #16]
 8000e54:	4313      	orrs	r3, r2
 8000e56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000e58:	4a0f      	ldr	r2, [pc, #60]	@ (8000e98 <HAL_GPIO_Init+0x304>)
 8000e5a:	69bb      	ldr	r3, [r7, #24]
 8000e5c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e5e:	69fb      	ldr	r3, [r7, #28]
 8000e60:	3301      	adds	r3, #1
 8000e62:	61fb      	str	r3, [r7, #28]
 8000e64:	69fb      	ldr	r3, [r7, #28]
 8000e66:	2b0f      	cmp	r3, #15
 8000e68:	f67f aea2 	bls.w	8000bb0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000e6c:	bf00      	nop
 8000e6e:	bf00      	nop
 8000e70:	3724      	adds	r7, #36	@ 0x24
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	40023800 	.word	0x40023800
 8000e80:	40013800 	.word	0x40013800
 8000e84:	40020000 	.word	0x40020000
 8000e88:	40020400 	.word	0x40020400
 8000e8c:	40020800 	.word	0x40020800
 8000e90:	40020c00 	.word	0x40020c00
 8000e94:	40021000 	.word	0x40021000
 8000e98:	40013c00 	.word	0x40013c00

08000e9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b083      	sub	sp, #12
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
 8000ea4:	460b      	mov	r3, r1
 8000ea6:	807b      	strh	r3, [r7, #2]
 8000ea8:	4613      	mov	r3, r2
 8000eaa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000eac:	787b      	ldrb	r3, [r7, #1]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d003      	beq.n	8000eba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000eb2:	887a      	ldrh	r2, [r7, #2]
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000eb8:	e003      	b.n	8000ec2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000eba:	887b      	ldrh	r3, [r7, #2]
 8000ebc:	041a      	lsls	r2, r3, #16
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	619a      	str	r2, [r3, #24]
}
 8000ec2:	bf00      	nop
 8000ec4:	370c      	adds	r7, #12
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr

08000ece <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000ece:	b480      	push	{r7}
 8000ed0:	b085      	sub	sp, #20
 8000ed2:	af00      	add	r7, sp, #0
 8000ed4:	6078      	str	r0, [r7, #4]
 8000ed6:	460b      	mov	r3, r1
 8000ed8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	695b      	ldr	r3, [r3, #20]
 8000ede:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000ee0:	887a      	ldrh	r2, [r7, #2]
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	4013      	ands	r3, r2
 8000ee6:	041a      	lsls	r2, r3, #16
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	43d9      	mvns	r1, r3
 8000eec:	887b      	ldrh	r3, [r7, #2]
 8000eee:	400b      	ands	r3, r1
 8000ef0:	431a      	orrs	r2, r3
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	619a      	str	r2, [r3, #24]
}
 8000ef6:	bf00      	nop
 8000ef8:	3714      	adds	r7, #20
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr
	...

08000f04 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b086      	sub	sp, #24
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d101      	bne.n	8000f16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f12:	2301      	movs	r3, #1
 8000f14:	e267      	b.n	80013e6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	f003 0301 	and.w	r3, r3, #1
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d075      	beq.n	800100e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8000f22:	4b88      	ldr	r3, [pc, #544]	@ (8001144 <HAL_RCC_OscConfig+0x240>)
 8000f24:	689b      	ldr	r3, [r3, #8]
 8000f26:	f003 030c 	and.w	r3, r3, #12
 8000f2a:	2b04      	cmp	r3, #4
 8000f2c:	d00c      	beq.n	8000f48 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f2e:	4b85      	ldr	r3, [pc, #532]	@ (8001144 <HAL_RCC_OscConfig+0x240>)
 8000f30:	689b      	ldr	r3, [r3, #8]
 8000f32:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8000f36:	2b08      	cmp	r3, #8
 8000f38:	d112      	bne.n	8000f60 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f3a:	4b82      	ldr	r3, [pc, #520]	@ (8001144 <HAL_RCC_OscConfig+0x240>)
 8000f3c:	685b      	ldr	r3, [r3, #4]
 8000f3e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000f42:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8000f46:	d10b      	bne.n	8000f60 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f48:	4b7e      	ldr	r3, [pc, #504]	@ (8001144 <HAL_RCC_OscConfig+0x240>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d05b      	beq.n	800100c <HAL_RCC_OscConfig+0x108>
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d157      	bne.n	800100c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	e242      	b.n	80013e6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000f68:	d106      	bne.n	8000f78 <HAL_RCC_OscConfig+0x74>
 8000f6a:	4b76      	ldr	r3, [pc, #472]	@ (8001144 <HAL_RCC_OscConfig+0x240>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	4a75      	ldr	r2, [pc, #468]	@ (8001144 <HAL_RCC_OscConfig+0x240>)
 8000f70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000f74:	6013      	str	r3, [r2, #0]
 8000f76:	e01d      	b.n	8000fb4 <HAL_RCC_OscConfig+0xb0>
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000f80:	d10c      	bne.n	8000f9c <HAL_RCC_OscConfig+0x98>
 8000f82:	4b70      	ldr	r3, [pc, #448]	@ (8001144 <HAL_RCC_OscConfig+0x240>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	4a6f      	ldr	r2, [pc, #444]	@ (8001144 <HAL_RCC_OscConfig+0x240>)
 8000f88:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000f8c:	6013      	str	r3, [r2, #0]
 8000f8e:	4b6d      	ldr	r3, [pc, #436]	@ (8001144 <HAL_RCC_OscConfig+0x240>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	4a6c      	ldr	r2, [pc, #432]	@ (8001144 <HAL_RCC_OscConfig+0x240>)
 8000f94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000f98:	6013      	str	r3, [r2, #0]
 8000f9a:	e00b      	b.n	8000fb4 <HAL_RCC_OscConfig+0xb0>
 8000f9c:	4b69      	ldr	r3, [pc, #420]	@ (8001144 <HAL_RCC_OscConfig+0x240>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a68      	ldr	r2, [pc, #416]	@ (8001144 <HAL_RCC_OscConfig+0x240>)
 8000fa2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000fa6:	6013      	str	r3, [r2, #0]
 8000fa8:	4b66      	ldr	r3, [pc, #408]	@ (8001144 <HAL_RCC_OscConfig+0x240>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a65      	ldr	r2, [pc, #404]	@ (8001144 <HAL_RCC_OscConfig+0x240>)
 8000fae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000fb2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d013      	beq.n	8000fe4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fbc:	f7ff fcd4 	bl	8000968 <HAL_GetTick>
 8000fc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fc2:	e008      	b.n	8000fd6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fc4:	f7ff fcd0 	bl	8000968 <HAL_GetTick>
 8000fc8:	4602      	mov	r2, r0
 8000fca:	693b      	ldr	r3, [r7, #16]
 8000fcc:	1ad3      	subs	r3, r2, r3
 8000fce:	2b64      	cmp	r3, #100	@ 0x64
 8000fd0:	d901      	bls.n	8000fd6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000fd2:	2303      	movs	r3, #3
 8000fd4:	e207      	b.n	80013e6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fd6:	4b5b      	ldr	r3, [pc, #364]	@ (8001144 <HAL_RCC_OscConfig+0x240>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d0f0      	beq.n	8000fc4 <HAL_RCC_OscConfig+0xc0>
 8000fe2:	e014      	b.n	800100e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fe4:	f7ff fcc0 	bl	8000968 <HAL_GetTick>
 8000fe8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fea:	e008      	b.n	8000ffe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fec:	f7ff fcbc 	bl	8000968 <HAL_GetTick>
 8000ff0:	4602      	mov	r2, r0
 8000ff2:	693b      	ldr	r3, [r7, #16]
 8000ff4:	1ad3      	subs	r3, r2, r3
 8000ff6:	2b64      	cmp	r3, #100	@ 0x64
 8000ff8:	d901      	bls.n	8000ffe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000ffa:	2303      	movs	r3, #3
 8000ffc:	e1f3      	b.n	80013e6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ffe:	4b51      	ldr	r3, [pc, #324]	@ (8001144 <HAL_RCC_OscConfig+0x240>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001006:	2b00      	cmp	r3, #0
 8001008:	d1f0      	bne.n	8000fec <HAL_RCC_OscConfig+0xe8>
 800100a:	e000      	b.n	800100e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800100c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f003 0302 	and.w	r3, r3, #2
 8001016:	2b00      	cmp	r3, #0
 8001018:	d063      	beq.n	80010e2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800101a:	4b4a      	ldr	r3, [pc, #296]	@ (8001144 <HAL_RCC_OscConfig+0x240>)
 800101c:	689b      	ldr	r3, [r3, #8]
 800101e:	f003 030c 	and.w	r3, r3, #12
 8001022:	2b00      	cmp	r3, #0
 8001024:	d00b      	beq.n	800103e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001026:	4b47      	ldr	r3, [pc, #284]	@ (8001144 <HAL_RCC_OscConfig+0x240>)
 8001028:	689b      	ldr	r3, [r3, #8]
 800102a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800102e:	2b08      	cmp	r3, #8
 8001030:	d11c      	bne.n	800106c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001032:	4b44      	ldr	r3, [pc, #272]	@ (8001144 <HAL_RCC_OscConfig+0x240>)
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800103a:	2b00      	cmp	r3, #0
 800103c:	d116      	bne.n	800106c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800103e:	4b41      	ldr	r3, [pc, #260]	@ (8001144 <HAL_RCC_OscConfig+0x240>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f003 0302 	and.w	r3, r3, #2
 8001046:	2b00      	cmp	r3, #0
 8001048:	d005      	beq.n	8001056 <HAL_RCC_OscConfig+0x152>
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	68db      	ldr	r3, [r3, #12]
 800104e:	2b01      	cmp	r3, #1
 8001050:	d001      	beq.n	8001056 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001052:	2301      	movs	r3, #1
 8001054:	e1c7      	b.n	80013e6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001056:	4b3b      	ldr	r3, [pc, #236]	@ (8001144 <HAL_RCC_OscConfig+0x240>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	691b      	ldr	r3, [r3, #16]
 8001062:	00db      	lsls	r3, r3, #3
 8001064:	4937      	ldr	r1, [pc, #220]	@ (8001144 <HAL_RCC_OscConfig+0x240>)
 8001066:	4313      	orrs	r3, r2
 8001068:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800106a:	e03a      	b.n	80010e2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	68db      	ldr	r3, [r3, #12]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d020      	beq.n	80010b6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001074:	4b34      	ldr	r3, [pc, #208]	@ (8001148 <HAL_RCC_OscConfig+0x244>)
 8001076:	2201      	movs	r2, #1
 8001078:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800107a:	f7ff fc75 	bl	8000968 <HAL_GetTick>
 800107e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001080:	e008      	b.n	8001094 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001082:	f7ff fc71 	bl	8000968 <HAL_GetTick>
 8001086:	4602      	mov	r2, r0
 8001088:	693b      	ldr	r3, [r7, #16]
 800108a:	1ad3      	subs	r3, r2, r3
 800108c:	2b02      	cmp	r3, #2
 800108e:	d901      	bls.n	8001094 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001090:	2303      	movs	r3, #3
 8001092:	e1a8      	b.n	80013e6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001094:	4b2b      	ldr	r3, [pc, #172]	@ (8001144 <HAL_RCC_OscConfig+0x240>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f003 0302 	and.w	r3, r3, #2
 800109c:	2b00      	cmp	r3, #0
 800109e:	d0f0      	beq.n	8001082 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010a0:	4b28      	ldr	r3, [pc, #160]	@ (8001144 <HAL_RCC_OscConfig+0x240>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	691b      	ldr	r3, [r3, #16]
 80010ac:	00db      	lsls	r3, r3, #3
 80010ae:	4925      	ldr	r1, [pc, #148]	@ (8001144 <HAL_RCC_OscConfig+0x240>)
 80010b0:	4313      	orrs	r3, r2
 80010b2:	600b      	str	r3, [r1, #0]
 80010b4:	e015      	b.n	80010e2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010b6:	4b24      	ldr	r3, [pc, #144]	@ (8001148 <HAL_RCC_OscConfig+0x244>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010bc:	f7ff fc54 	bl	8000968 <HAL_GetTick>
 80010c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010c2:	e008      	b.n	80010d6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010c4:	f7ff fc50 	bl	8000968 <HAL_GetTick>
 80010c8:	4602      	mov	r2, r0
 80010ca:	693b      	ldr	r3, [r7, #16]
 80010cc:	1ad3      	subs	r3, r2, r3
 80010ce:	2b02      	cmp	r3, #2
 80010d0:	d901      	bls.n	80010d6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80010d2:	2303      	movs	r3, #3
 80010d4:	e187      	b.n	80013e6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010d6:	4b1b      	ldr	r3, [pc, #108]	@ (8001144 <HAL_RCC_OscConfig+0x240>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f003 0302 	and.w	r3, r3, #2
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d1f0      	bne.n	80010c4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f003 0308 	and.w	r3, r3, #8
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d036      	beq.n	800115c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	695b      	ldr	r3, [r3, #20]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d016      	beq.n	8001124 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80010f6:	4b15      	ldr	r3, [pc, #84]	@ (800114c <HAL_RCC_OscConfig+0x248>)
 80010f8:	2201      	movs	r2, #1
 80010fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010fc:	f7ff fc34 	bl	8000968 <HAL_GetTick>
 8001100:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001102:	e008      	b.n	8001116 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001104:	f7ff fc30 	bl	8000968 <HAL_GetTick>
 8001108:	4602      	mov	r2, r0
 800110a:	693b      	ldr	r3, [r7, #16]
 800110c:	1ad3      	subs	r3, r2, r3
 800110e:	2b02      	cmp	r3, #2
 8001110:	d901      	bls.n	8001116 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001112:	2303      	movs	r3, #3
 8001114:	e167      	b.n	80013e6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001116:	4b0b      	ldr	r3, [pc, #44]	@ (8001144 <HAL_RCC_OscConfig+0x240>)
 8001118:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800111a:	f003 0302 	and.w	r3, r3, #2
 800111e:	2b00      	cmp	r3, #0
 8001120:	d0f0      	beq.n	8001104 <HAL_RCC_OscConfig+0x200>
 8001122:	e01b      	b.n	800115c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001124:	4b09      	ldr	r3, [pc, #36]	@ (800114c <HAL_RCC_OscConfig+0x248>)
 8001126:	2200      	movs	r2, #0
 8001128:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800112a:	f7ff fc1d 	bl	8000968 <HAL_GetTick>
 800112e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001130:	e00e      	b.n	8001150 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001132:	f7ff fc19 	bl	8000968 <HAL_GetTick>
 8001136:	4602      	mov	r2, r0
 8001138:	693b      	ldr	r3, [r7, #16]
 800113a:	1ad3      	subs	r3, r2, r3
 800113c:	2b02      	cmp	r3, #2
 800113e:	d907      	bls.n	8001150 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001140:	2303      	movs	r3, #3
 8001142:	e150      	b.n	80013e6 <HAL_RCC_OscConfig+0x4e2>
 8001144:	40023800 	.word	0x40023800
 8001148:	42470000 	.word	0x42470000
 800114c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001150:	4b88      	ldr	r3, [pc, #544]	@ (8001374 <HAL_RCC_OscConfig+0x470>)
 8001152:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001154:	f003 0302 	and.w	r3, r3, #2
 8001158:	2b00      	cmp	r3, #0
 800115a:	d1ea      	bne.n	8001132 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f003 0304 	and.w	r3, r3, #4
 8001164:	2b00      	cmp	r3, #0
 8001166:	f000 8097 	beq.w	8001298 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800116a:	2300      	movs	r3, #0
 800116c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800116e:	4b81      	ldr	r3, [pc, #516]	@ (8001374 <HAL_RCC_OscConfig+0x470>)
 8001170:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001172:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001176:	2b00      	cmp	r3, #0
 8001178:	d10f      	bne.n	800119a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800117a:	2300      	movs	r3, #0
 800117c:	60bb      	str	r3, [r7, #8]
 800117e:	4b7d      	ldr	r3, [pc, #500]	@ (8001374 <HAL_RCC_OscConfig+0x470>)
 8001180:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001182:	4a7c      	ldr	r2, [pc, #496]	@ (8001374 <HAL_RCC_OscConfig+0x470>)
 8001184:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001188:	6413      	str	r3, [r2, #64]	@ 0x40
 800118a:	4b7a      	ldr	r3, [pc, #488]	@ (8001374 <HAL_RCC_OscConfig+0x470>)
 800118c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800118e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001192:	60bb      	str	r3, [r7, #8]
 8001194:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001196:	2301      	movs	r3, #1
 8001198:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800119a:	4b77      	ldr	r3, [pc, #476]	@ (8001378 <HAL_RCC_OscConfig+0x474>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d118      	bne.n	80011d8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80011a6:	4b74      	ldr	r3, [pc, #464]	@ (8001378 <HAL_RCC_OscConfig+0x474>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4a73      	ldr	r2, [pc, #460]	@ (8001378 <HAL_RCC_OscConfig+0x474>)
 80011ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80011b2:	f7ff fbd9 	bl	8000968 <HAL_GetTick>
 80011b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011b8:	e008      	b.n	80011cc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011ba:	f7ff fbd5 	bl	8000968 <HAL_GetTick>
 80011be:	4602      	mov	r2, r0
 80011c0:	693b      	ldr	r3, [r7, #16]
 80011c2:	1ad3      	subs	r3, r2, r3
 80011c4:	2b02      	cmp	r3, #2
 80011c6:	d901      	bls.n	80011cc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80011c8:	2303      	movs	r3, #3
 80011ca:	e10c      	b.n	80013e6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011cc:	4b6a      	ldr	r3, [pc, #424]	@ (8001378 <HAL_RCC_OscConfig+0x474>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d0f0      	beq.n	80011ba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	689b      	ldr	r3, [r3, #8]
 80011dc:	2b01      	cmp	r3, #1
 80011de:	d106      	bne.n	80011ee <HAL_RCC_OscConfig+0x2ea>
 80011e0:	4b64      	ldr	r3, [pc, #400]	@ (8001374 <HAL_RCC_OscConfig+0x470>)
 80011e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80011e4:	4a63      	ldr	r2, [pc, #396]	@ (8001374 <HAL_RCC_OscConfig+0x470>)
 80011e6:	f043 0301 	orr.w	r3, r3, #1
 80011ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80011ec:	e01c      	b.n	8001228 <HAL_RCC_OscConfig+0x324>
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	689b      	ldr	r3, [r3, #8]
 80011f2:	2b05      	cmp	r3, #5
 80011f4:	d10c      	bne.n	8001210 <HAL_RCC_OscConfig+0x30c>
 80011f6:	4b5f      	ldr	r3, [pc, #380]	@ (8001374 <HAL_RCC_OscConfig+0x470>)
 80011f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80011fa:	4a5e      	ldr	r2, [pc, #376]	@ (8001374 <HAL_RCC_OscConfig+0x470>)
 80011fc:	f043 0304 	orr.w	r3, r3, #4
 8001200:	6713      	str	r3, [r2, #112]	@ 0x70
 8001202:	4b5c      	ldr	r3, [pc, #368]	@ (8001374 <HAL_RCC_OscConfig+0x470>)
 8001204:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001206:	4a5b      	ldr	r2, [pc, #364]	@ (8001374 <HAL_RCC_OscConfig+0x470>)
 8001208:	f043 0301 	orr.w	r3, r3, #1
 800120c:	6713      	str	r3, [r2, #112]	@ 0x70
 800120e:	e00b      	b.n	8001228 <HAL_RCC_OscConfig+0x324>
 8001210:	4b58      	ldr	r3, [pc, #352]	@ (8001374 <HAL_RCC_OscConfig+0x470>)
 8001212:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001214:	4a57      	ldr	r2, [pc, #348]	@ (8001374 <HAL_RCC_OscConfig+0x470>)
 8001216:	f023 0301 	bic.w	r3, r3, #1
 800121a:	6713      	str	r3, [r2, #112]	@ 0x70
 800121c:	4b55      	ldr	r3, [pc, #340]	@ (8001374 <HAL_RCC_OscConfig+0x470>)
 800121e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001220:	4a54      	ldr	r2, [pc, #336]	@ (8001374 <HAL_RCC_OscConfig+0x470>)
 8001222:	f023 0304 	bic.w	r3, r3, #4
 8001226:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	689b      	ldr	r3, [r3, #8]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d015      	beq.n	800125c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001230:	f7ff fb9a 	bl	8000968 <HAL_GetTick>
 8001234:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001236:	e00a      	b.n	800124e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001238:	f7ff fb96 	bl	8000968 <HAL_GetTick>
 800123c:	4602      	mov	r2, r0
 800123e:	693b      	ldr	r3, [r7, #16]
 8001240:	1ad3      	subs	r3, r2, r3
 8001242:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001246:	4293      	cmp	r3, r2
 8001248:	d901      	bls.n	800124e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800124a:	2303      	movs	r3, #3
 800124c:	e0cb      	b.n	80013e6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800124e:	4b49      	ldr	r3, [pc, #292]	@ (8001374 <HAL_RCC_OscConfig+0x470>)
 8001250:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001252:	f003 0302 	and.w	r3, r3, #2
 8001256:	2b00      	cmp	r3, #0
 8001258:	d0ee      	beq.n	8001238 <HAL_RCC_OscConfig+0x334>
 800125a:	e014      	b.n	8001286 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800125c:	f7ff fb84 	bl	8000968 <HAL_GetTick>
 8001260:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001262:	e00a      	b.n	800127a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001264:	f7ff fb80 	bl	8000968 <HAL_GetTick>
 8001268:	4602      	mov	r2, r0
 800126a:	693b      	ldr	r3, [r7, #16]
 800126c:	1ad3      	subs	r3, r2, r3
 800126e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001272:	4293      	cmp	r3, r2
 8001274:	d901      	bls.n	800127a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001276:	2303      	movs	r3, #3
 8001278:	e0b5      	b.n	80013e6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800127a:	4b3e      	ldr	r3, [pc, #248]	@ (8001374 <HAL_RCC_OscConfig+0x470>)
 800127c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800127e:	f003 0302 	and.w	r3, r3, #2
 8001282:	2b00      	cmp	r3, #0
 8001284:	d1ee      	bne.n	8001264 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001286:	7dfb      	ldrb	r3, [r7, #23]
 8001288:	2b01      	cmp	r3, #1
 800128a:	d105      	bne.n	8001298 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800128c:	4b39      	ldr	r3, [pc, #228]	@ (8001374 <HAL_RCC_OscConfig+0x470>)
 800128e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001290:	4a38      	ldr	r2, [pc, #224]	@ (8001374 <HAL_RCC_OscConfig+0x470>)
 8001292:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001296:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	699b      	ldr	r3, [r3, #24]
 800129c:	2b00      	cmp	r3, #0
 800129e:	f000 80a1 	beq.w	80013e4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80012a2:	4b34      	ldr	r3, [pc, #208]	@ (8001374 <HAL_RCC_OscConfig+0x470>)
 80012a4:	689b      	ldr	r3, [r3, #8]
 80012a6:	f003 030c 	and.w	r3, r3, #12
 80012aa:	2b08      	cmp	r3, #8
 80012ac:	d05c      	beq.n	8001368 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	699b      	ldr	r3, [r3, #24]
 80012b2:	2b02      	cmp	r3, #2
 80012b4:	d141      	bne.n	800133a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012b6:	4b31      	ldr	r3, [pc, #196]	@ (800137c <HAL_RCC_OscConfig+0x478>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012bc:	f7ff fb54 	bl	8000968 <HAL_GetTick>
 80012c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012c2:	e008      	b.n	80012d6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012c4:	f7ff fb50 	bl	8000968 <HAL_GetTick>
 80012c8:	4602      	mov	r2, r0
 80012ca:	693b      	ldr	r3, [r7, #16]
 80012cc:	1ad3      	subs	r3, r2, r3
 80012ce:	2b02      	cmp	r3, #2
 80012d0:	d901      	bls.n	80012d6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80012d2:	2303      	movs	r3, #3
 80012d4:	e087      	b.n	80013e6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012d6:	4b27      	ldr	r3, [pc, #156]	@ (8001374 <HAL_RCC_OscConfig+0x470>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d1f0      	bne.n	80012c4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	69da      	ldr	r2, [r3, #28]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6a1b      	ldr	r3, [r3, #32]
 80012ea:	431a      	orrs	r2, r3
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012f0:	019b      	lsls	r3, r3, #6
 80012f2:	431a      	orrs	r2, r3
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012f8:	085b      	lsrs	r3, r3, #1
 80012fa:	3b01      	subs	r3, #1
 80012fc:	041b      	lsls	r3, r3, #16
 80012fe:	431a      	orrs	r2, r3
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001304:	061b      	lsls	r3, r3, #24
 8001306:	491b      	ldr	r1, [pc, #108]	@ (8001374 <HAL_RCC_OscConfig+0x470>)
 8001308:	4313      	orrs	r3, r2
 800130a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800130c:	4b1b      	ldr	r3, [pc, #108]	@ (800137c <HAL_RCC_OscConfig+0x478>)
 800130e:	2201      	movs	r2, #1
 8001310:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001312:	f7ff fb29 	bl	8000968 <HAL_GetTick>
 8001316:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001318:	e008      	b.n	800132c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800131a:	f7ff fb25 	bl	8000968 <HAL_GetTick>
 800131e:	4602      	mov	r2, r0
 8001320:	693b      	ldr	r3, [r7, #16]
 8001322:	1ad3      	subs	r3, r2, r3
 8001324:	2b02      	cmp	r3, #2
 8001326:	d901      	bls.n	800132c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001328:	2303      	movs	r3, #3
 800132a:	e05c      	b.n	80013e6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800132c:	4b11      	ldr	r3, [pc, #68]	@ (8001374 <HAL_RCC_OscConfig+0x470>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001334:	2b00      	cmp	r3, #0
 8001336:	d0f0      	beq.n	800131a <HAL_RCC_OscConfig+0x416>
 8001338:	e054      	b.n	80013e4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800133a:	4b10      	ldr	r3, [pc, #64]	@ (800137c <HAL_RCC_OscConfig+0x478>)
 800133c:	2200      	movs	r2, #0
 800133e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001340:	f7ff fb12 	bl	8000968 <HAL_GetTick>
 8001344:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001346:	e008      	b.n	800135a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001348:	f7ff fb0e 	bl	8000968 <HAL_GetTick>
 800134c:	4602      	mov	r2, r0
 800134e:	693b      	ldr	r3, [r7, #16]
 8001350:	1ad3      	subs	r3, r2, r3
 8001352:	2b02      	cmp	r3, #2
 8001354:	d901      	bls.n	800135a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001356:	2303      	movs	r3, #3
 8001358:	e045      	b.n	80013e6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800135a:	4b06      	ldr	r3, [pc, #24]	@ (8001374 <HAL_RCC_OscConfig+0x470>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001362:	2b00      	cmp	r3, #0
 8001364:	d1f0      	bne.n	8001348 <HAL_RCC_OscConfig+0x444>
 8001366:	e03d      	b.n	80013e4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	699b      	ldr	r3, [r3, #24]
 800136c:	2b01      	cmp	r3, #1
 800136e:	d107      	bne.n	8001380 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001370:	2301      	movs	r3, #1
 8001372:	e038      	b.n	80013e6 <HAL_RCC_OscConfig+0x4e2>
 8001374:	40023800 	.word	0x40023800
 8001378:	40007000 	.word	0x40007000
 800137c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001380:	4b1b      	ldr	r3, [pc, #108]	@ (80013f0 <HAL_RCC_OscConfig+0x4ec>)
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	699b      	ldr	r3, [r3, #24]
 800138a:	2b01      	cmp	r3, #1
 800138c:	d028      	beq.n	80013e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001398:	429a      	cmp	r2, r3
 800139a:	d121      	bne.n	80013e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013a6:	429a      	cmp	r2, r3
 80013a8:	d11a      	bne.n	80013e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80013aa:	68fa      	ldr	r2, [r7, #12]
 80013ac:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80013b0:	4013      	ands	r3, r2
 80013b2:	687a      	ldr	r2, [r7, #4]
 80013b4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80013b6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80013b8:	4293      	cmp	r3, r2
 80013ba:	d111      	bne.n	80013e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013c6:	085b      	lsrs	r3, r3, #1
 80013c8:	3b01      	subs	r3, #1
 80013ca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80013cc:	429a      	cmp	r2, r3
 80013ce:	d107      	bne.n	80013e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013da:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80013dc:	429a      	cmp	r2, r3
 80013de:	d001      	beq.n	80013e4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80013e0:	2301      	movs	r3, #1
 80013e2:	e000      	b.n	80013e6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80013e4:	2300      	movs	r3, #0
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	3718      	adds	r7, #24
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	40023800 	.word	0x40023800

080013f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b084      	sub	sp, #16
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
 80013fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d101      	bne.n	8001408 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001404:	2301      	movs	r3, #1
 8001406:	e0cc      	b.n	80015a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001408:	4b68      	ldr	r3, [pc, #416]	@ (80015ac <HAL_RCC_ClockConfig+0x1b8>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f003 0307 	and.w	r3, r3, #7
 8001410:	683a      	ldr	r2, [r7, #0]
 8001412:	429a      	cmp	r2, r3
 8001414:	d90c      	bls.n	8001430 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001416:	4b65      	ldr	r3, [pc, #404]	@ (80015ac <HAL_RCC_ClockConfig+0x1b8>)
 8001418:	683a      	ldr	r2, [r7, #0]
 800141a:	b2d2      	uxtb	r2, r2
 800141c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800141e:	4b63      	ldr	r3, [pc, #396]	@ (80015ac <HAL_RCC_ClockConfig+0x1b8>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f003 0307 	and.w	r3, r3, #7
 8001426:	683a      	ldr	r2, [r7, #0]
 8001428:	429a      	cmp	r2, r3
 800142a:	d001      	beq.n	8001430 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800142c:	2301      	movs	r3, #1
 800142e:	e0b8      	b.n	80015a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f003 0302 	and.w	r3, r3, #2
 8001438:	2b00      	cmp	r3, #0
 800143a:	d020      	beq.n	800147e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f003 0304 	and.w	r3, r3, #4
 8001444:	2b00      	cmp	r3, #0
 8001446:	d005      	beq.n	8001454 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001448:	4b59      	ldr	r3, [pc, #356]	@ (80015b0 <HAL_RCC_ClockConfig+0x1bc>)
 800144a:	689b      	ldr	r3, [r3, #8]
 800144c:	4a58      	ldr	r2, [pc, #352]	@ (80015b0 <HAL_RCC_ClockConfig+0x1bc>)
 800144e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001452:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f003 0308 	and.w	r3, r3, #8
 800145c:	2b00      	cmp	r3, #0
 800145e:	d005      	beq.n	800146c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001460:	4b53      	ldr	r3, [pc, #332]	@ (80015b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001462:	689b      	ldr	r3, [r3, #8]
 8001464:	4a52      	ldr	r2, [pc, #328]	@ (80015b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001466:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800146a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800146c:	4b50      	ldr	r3, [pc, #320]	@ (80015b0 <HAL_RCC_ClockConfig+0x1bc>)
 800146e:	689b      	ldr	r3, [r3, #8]
 8001470:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	689b      	ldr	r3, [r3, #8]
 8001478:	494d      	ldr	r1, [pc, #308]	@ (80015b0 <HAL_RCC_ClockConfig+0x1bc>)
 800147a:	4313      	orrs	r3, r2
 800147c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f003 0301 	and.w	r3, r3, #1
 8001486:	2b00      	cmp	r3, #0
 8001488:	d044      	beq.n	8001514 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	2b01      	cmp	r3, #1
 8001490:	d107      	bne.n	80014a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001492:	4b47      	ldr	r3, [pc, #284]	@ (80015b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800149a:	2b00      	cmp	r3, #0
 800149c:	d119      	bne.n	80014d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800149e:	2301      	movs	r3, #1
 80014a0:	e07f      	b.n	80015a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	2b02      	cmp	r3, #2
 80014a8:	d003      	beq.n	80014b2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80014ae:	2b03      	cmp	r3, #3
 80014b0:	d107      	bne.n	80014c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014b2:	4b3f      	ldr	r3, [pc, #252]	@ (80015b0 <HAL_RCC_ClockConfig+0x1bc>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d109      	bne.n	80014d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014be:	2301      	movs	r3, #1
 80014c0:	e06f      	b.n	80015a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014c2:	4b3b      	ldr	r3, [pc, #236]	@ (80015b0 <HAL_RCC_ClockConfig+0x1bc>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f003 0302 	and.w	r3, r3, #2
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d101      	bne.n	80014d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014ce:	2301      	movs	r3, #1
 80014d0:	e067      	b.n	80015a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014d2:	4b37      	ldr	r3, [pc, #220]	@ (80015b0 <HAL_RCC_ClockConfig+0x1bc>)
 80014d4:	689b      	ldr	r3, [r3, #8]
 80014d6:	f023 0203 	bic.w	r2, r3, #3
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	4934      	ldr	r1, [pc, #208]	@ (80015b0 <HAL_RCC_ClockConfig+0x1bc>)
 80014e0:	4313      	orrs	r3, r2
 80014e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80014e4:	f7ff fa40 	bl	8000968 <HAL_GetTick>
 80014e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014ea:	e00a      	b.n	8001502 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014ec:	f7ff fa3c 	bl	8000968 <HAL_GetTick>
 80014f0:	4602      	mov	r2, r0
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	1ad3      	subs	r3, r2, r3
 80014f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d901      	bls.n	8001502 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80014fe:	2303      	movs	r3, #3
 8001500:	e04f      	b.n	80015a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001502:	4b2b      	ldr	r3, [pc, #172]	@ (80015b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001504:	689b      	ldr	r3, [r3, #8]
 8001506:	f003 020c 	and.w	r2, r3, #12
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	009b      	lsls	r3, r3, #2
 8001510:	429a      	cmp	r2, r3
 8001512:	d1eb      	bne.n	80014ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001514:	4b25      	ldr	r3, [pc, #148]	@ (80015ac <HAL_RCC_ClockConfig+0x1b8>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f003 0307 	and.w	r3, r3, #7
 800151c:	683a      	ldr	r2, [r7, #0]
 800151e:	429a      	cmp	r2, r3
 8001520:	d20c      	bcs.n	800153c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001522:	4b22      	ldr	r3, [pc, #136]	@ (80015ac <HAL_RCC_ClockConfig+0x1b8>)
 8001524:	683a      	ldr	r2, [r7, #0]
 8001526:	b2d2      	uxtb	r2, r2
 8001528:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800152a:	4b20      	ldr	r3, [pc, #128]	@ (80015ac <HAL_RCC_ClockConfig+0x1b8>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f003 0307 	and.w	r3, r3, #7
 8001532:	683a      	ldr	r2, [r7, #0]
 8001534:	429a      	cmp	r2, r3
 8001536:	d001      	beq.n	800153c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001538:	2301      	movs	r3, #1
 800153a:	e032      	b.n	80015a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f003 0304 	and.w	r3, r3, #4
 8001544:	2b00      	cmp	r3, #0
 8001546:	d008      	beq.n	800155a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001548:	4b19      	ldr	r3, [pc, #100]	@ (80015b0 <HAL_RCC_ClockConfig+0x1bc>)
 800154a:	689b      	ldr	r3, [r3, #8]
 800154c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	68db      	ldr	r3, [r3, #12]
 8001554:	4916      	ldr	r1, [pc, #88]	@ (80015b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001556:	4313      	orrs	r3, r2
 8001558:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f003 0308 	and.w	r3, r3, #8
 8001562:	2b00      	cmp	r3, #0
 8001564:	d009      	beq.n	800157a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001566:	4b12      	ldr	r3, [pc, #72]	@ (80015b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001568:	689b      	ldr	r3, [r3, #8]
 800156a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	691b      	ldr	r3, [r3, #16]
 8001572:	00db      	lsls	r3, r3, #3
 8001574:	490e      	ldr	r1, [pc, #56]	@ (80015b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001576:	4313      	orrs	r3, r2
 8001578:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800157a:	f000 f821 	bl	80015c0 <HAL_RCC_GetSysClockFreq>
 800157e:	4602      	mov	r2, r0
 8001580:	4b0b      	ldr	r3, [pc, #44]	@ (80015b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001582:	689b      	ldr	r3, [r3, #8]
 8001584:	091b      	lsrs	r3, r3, #4
 8001586:	f003 030f 	and.w	r3, r3, #15
 800158a:	490a      	ldr	r1, [pc, #40]	@ (80015b4 <HAL_RCC_ClockConfig+0x1c0>)
 800158c:	5ccb      	ldrb	r3, [r1, r3]
 800158e:	fa22 f303 	lsr.w	r3, r2, r3
 8001592:	4a09      	ldr	r2, [pc, #36]	@ (80015b8 <HAL_RCC_ClockConfig+0x1c4>)
 8001594:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001596:	4b09      	ldr	r3, [pc, #36]	@ (80015bc <HAL_RCC_ClockConfig+0x1c8>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4618      	mov	r0, r3
 800159c:	f7ff f9a0 	bl	80008e0 <HAL_InitTick>

  return HAL_OK;
 80015a0:	2300      	movs	r3, #0
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	3710      	adds	r7, #16
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	40023c00 	.word	0x40023c00
 80015b0:	40023800 	.word	0x40023800
 80015b4:	080045b0 	.word	0x080045b0
 80015b8:	20000000 	.word	0x20000000
 80015bc:	20000004 	.word	0x20000004

080015c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80015c4:	b090      	sub	sp, #64	@ 0x40
 80015c6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80015c8:	2300      	movs	r3, #0
 80015ca:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80015cc:	2300      	movs	r3, #0
 80015ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80015d0:	2300      	movs	r3, #0
 80015d2:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80015d4:	2300      	movs	r3, #0
 80015d6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80015d8:	4b59      	ldr	r3, [pc, #356]	@ (8001740 <HAL_RCC_GetSysClockFreq+0x180>)
 80015da:	689b      	ldr	r3, [r3, #8]
 80015dc:	f003 030c 	and.w	r3, r3, #12
 80015e0:	2b08      	cmp	r3, #8
 80015e2:	d00d      	beq.n	8001600 <HAL_RCC_GetSysClockFreq+0x40>
 80015e4:	2b08      	cmp	r3, #8
 80015e6:	f200 80a1 	bhi.w	800172c <HAL_RCC_GetSysClockFreq+0x16c>
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d002      	beq.n	80015f4 <HAL_RCC_GetSysClockFreq+0x34>
 80015ee:	2b04      	cmp	r3, #4
 80015f0:	d003      	beq.n	80015fa <HAL_RCC_GetSysClockFreq+0x3a>
 80015f2:	e09b      	b.n	800172c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80015f4:	4b53      	ldr	r3, [pc, #332]	@ (8001744 <HAL_RCC_GetSysClockFreq+0x184>)
 80015f6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80015f8:	e09b      	b.n	8001732 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80015fa:	4b53      	ldr	r3, [pc, #332]	@ (8001748 <HAL_RCC_GetSysClockFreq+0x188>)
 80015fc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80015fe:	e098      	b.n	8001732 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001600:	4b4f      	ldr	r3, [pc, #316]	@ (8001740 <HAL_RCC_GetSysClockFreq+0x180>)
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001608:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800160a:	4b4d      	ldr	r3, [pc, #308]	@ (8001740 <HAL_RCC_GetSysClockFreq+0x180>)
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001612:	2b00      	cmp	r3, #0
 8001614:	d028      	beq.n	8001668 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001616:	4b4a      	ldr	r3, [pc, #296]	@ (8001740 <HAL_RCC_GetSysClockFreq+0x180>)
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	099b      	lsrs	r3, r3, #6
 800161c:	2200      	movs	r2, #0
 800161e:	623b      	str	r3, [r7, #32]
 8001620:	627a      	str	r2, [r7, #36]	@ 0x24
 8001622:	6a3b      	ldr	r3, [r7, #32]
 8001624:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001628:	2100      	movs	r1, #0
 800162a:	4b47      	ldr	r3, [pc, #284]	@ (8001748 <HAL_RCC_GetSysClockFreq+0x188>)
 800162c:	fb03 f201 	mul.w	r2, r3, r1
 8001630:	2300      	movs	r3, #0
 8001632:	fb00 f303 	mul.w	r3, r0, r3
 8001636:	4413      	add	r3, r2
 8001638:	4a43      	ldr	r2, [pc, #268]	@ (8001748 <HAL_RCC_GetSysClockFreq+0x188>)
 800163a:	fba0 1202 	umull	r1, r2, r0, r2
 800163e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001640:	460a      	mov	r2, r1
 8001642:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001644:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001646:	4413      	add	r3, r2
 8001648:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800164a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800164c:	2200      	movs	r2, #0
 800164e:	61bb      	str	r3, [r7, #24]
 8001650:	61fa      	str	r2, [r7, #28]
 8001652:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001656:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800165a:	f7fe fdc1 	bl	80001e0 <__aeabi_uldivmod>
 800165e:	4602      	mov	r2, r0
 8001660:	460b      	mov	r3, r1
 8001662:	4613      	mov	r3, r2
 8001664:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001666:	e053      	b.n	8001710 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001668:	4b35      	ldr	r3, [pc, #212]	@ (8001740 <HAL_RCC_GetSysClockFreq+0x180>)
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	099b      	lsrs	r3, r3, #6
 800166e:	2200      	movs	r2, #0
 8001670:	613b      	str	r3, [r7, #16]
 8001672:	617a      	str	r2, [r7, #20]
 8001674:	693b      	ldr	r3, [r7, #16]
 8001676:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800167a:	f04f 0b00 	mov.w	fp, #0
 800167e:	4652      	mov	r2, sl
 8001680:	465b      	mov	r3, fp
 8001682:	f04f 0000 	mov.w	r0, #0
 8001686:	f04f 0100 	mov.w	r1, #0
 800168a:	0159      	lsls	r1, r3, #5
 800168c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001690:	0150      	lsls	r0, r2, #5
 8001692:	4602      	mov	r2, r0
 8001694:	460b      	mov	r3, r1
 8001696:	ebb2 080a 	subs.w	r8, r2, sl
 800169a:	eb63 090b 	sbc.w	r9, r3, fp
 800169e:	f04f 0200 	mov.w	r2, #0
 80016a2:	f04f 0300 	mov.w	r3, #0
 80016a6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80016aa:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80016ae:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80016b2:	ebb2 0408 	subs.w	r4, r2, r8
 80016b6:	eb63 0509 	sbc.w	r5, r3, r9
 80016ba:	f04f 0200 	mov.w	r2, #0
 80016be:	f04f 0300 	mov.w	r3, #0
 80016c2:	00eb      	lsls	r3, r5, #3
 80016c4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80016c8:	00e2      	lsls	r2, r4, #3
 80016ca:	4614      	mov	r4, r2
 80016cc:	461d      	mov	r5, r3
 80016ce:	eb14 030a 	adds.w	r3, r4, sl
 80016d2:	603b      	str	r3, [r7, #0]
 80016d4:	eb45 030b 	adc.w	r3, r5, fp
 80016d8:	607b      	str	r3, [r7, #4]
 80016da:	f04f 0200 	mov.w	r2, #0
 80016de:	f04f 0300 	mov.w	r3, #0
 80016e2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80016e6:	4629      	mov	r1, r5
 80016e8:	028b      	lsls	r3, r1, #10
 80016ea:	4621      	mov	r1, r4
 80016ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80016f0:	4621      	mov	r1, r4
 80016f2:	028a      	lsls	r2, r1, #10
 80016f4:	4610      	mov	r0, r2
 80016f6:	4619      	mov	r1, r3
 80016f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80016fa:	2200      	movs	r2, #0
 80016fc:	60bb      	str	r3, [r7, #8]
 80016fe:	60fa      	str	r2, [r7, #12]
 8001700:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001704:	f7fe fd6c 	bl	80001e0 <__aeabi_uldivmod>
 8001708:	4602      	mov	r2, r0
 800170a:	460b      	mov	r3, r1
 800170c:	4613      	mov	r3, r2
 800170e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001710:	4b0b      	ldr	r3, [pc, #44]	@ (8001740 <HAL_RCC_GetSysClockFreq+0x180>)
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	0c1b      	lsrs	r3, r3, #16
 8001716:	f003 0303 	and.w	r3, r3, #3
 800171a:	3301      	adds	r3, #1
 800171c:	005b      	lsls	r3, r3, #1
 800171e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8001720:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001722:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001724:	fbb2 f3f3 	udiv	r3, r2, r3
 8001728:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800172a:	e002      	b.n	8001732 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800172c:	4b05      	ldr	r3, [pc, #20]	@ (8001744 <HAL_RCC_GetSysClockFreq+0x184>)
 800172e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001730:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001732:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001734:	4618      	mov	r0, r3
 8001736:	3740      	adds	r7, #64	@ 0x40
 8001738:	46bd      	mov	sp, r7
 800173a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800173e:	bf00      	nop
 8001740:	40023800 	.word	0x40023800
 8001744:	00f42400 	.word	0x00f42400
 8001748:	017d7840 	.word	0x017d7840

0800174c <__NVIC_SetPriority>:
{
 800174c:	b480      	push	{r7}
 800174e:	b083      	sub	sp, #12
 8001750:	af00      	add	r7, sp, #0
 8001752:	4603      	mov	r3, r0
 8001754:	6039      	str	r1, [r7, #0]
 8001756:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001758:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800175c:	2b00      	cmp	r3, #0
 800175e:	db0a      	blt.n	8001776 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	b2da      	uxtb	r2, r3
 8001764:	490c      	ldr	r1, [pc, #48]	@ (8001798 <__NVIC_SetPriority+0x4c>)
 8001766:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800176a:	0112      	lsls	r2, r2, #4
 800176c:	b2d2      	uxtb	r2, r2
 800176e:	440b      	add	r3, r1
 8001770:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001774:	e00a      	b.n	800178c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	b2da      	uxtb	r2, r3
 800177a:	4908      	ldr	r1, [pc, #32]	@ (800179c <__NVIC_SetPriority+0x50>)
 800177c:	79fb      	ldrb	r3, [r7, #7]
 800177e:	f003 030f 	and.w	r3, r3, #15
 8001782:	3b04      	subs	r3, #4
 8001784:	0112      	lsls	r2, r2, #4
 8001786:	b2d2      	uxtb	r2, r2
 8001788:	440b      	add	r3, r1
 800178a:	761a      	strb	r2, [r3, #24]
}
 800178c:	bf00      	nop
 800178e:	370c      	adds	r7, #12
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr
 8001798:	e000e100 	.word	0xe000e100
 800179c:	e000ed00 	.word	0xe000ed00

080017a0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80017a4:	2100      	movs	r1, #0
 80017a6:	f06f 0004 	mvn.w	r0, #4
 80017aa:	f7ff ffcf 	bl	800174c <__NVIC_SetPriority>
#endif
}
 80017ae:	bf00      	nop
 80017b0:	bd80      	pop	{r7, pc}
	...

080017b4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80017b4:	b480      	push	{r7}
 80017b6:	b083      	sub	sp, #12
 80017b8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80017ba:	f3ef 8305 	mrs	r3, IPSR
 80017be:	603b      	str	r3, [r7, #0]
  return(result);
 80017c0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d003      	beq.n	80017ce <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80017c6:	f06f 0305 	mvn.w	r3, #5
 80017ca:	607b      	str	r3, [r7, #4]
 80017cc:	e00c      	b.n	80017e8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80017ce:	4b0a      	ldr	r3, [pc, #40]	@ (80017f8 <osKernelInitialize+0x44>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d105      	bne.n	80017e2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80017d6:	4b08      	ldr	r3, [pc, #32]	@ (80017f8 <osKernelInitialize+0x44>)
 80017d8:	2201      	movs	r2, #1
 80017da:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80017dc:	2300      	movs	r3, #0
 80017de:	607b      	str	r3, [r7, #4]
 80017e0:	e002      	b.n	80017e8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80017e2:	f04f 33ff 	mov.w	r3, #4294967295
 80017e6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80017e8:	687b      	ldr	r3, [r7, #4]
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	370c      	adds	r7, #12
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop
 80017f8:	2000008c 	.word	0x2000008c

080017fc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b082      	sub	sp, #8
 8001800:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001802:	f3ef 8305 	mrs	r3, IPSR
 8001806:	603b      	str	r3, [r7, #0]
  return(result);
 8001808:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800180a:	2b00      	cmp	r3, #0
 800180c:	d003      	beq.n	8001816 <osKernelStart+0x1a>
    stat = osErrorISR;
 800180e:	f06f 0305 	mvn.w	r3, #5
 8001812:	607b      	str	r3, [r7, #4]
 8001814:	e010      	b.n	8001838 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8001816:	4b0b      	ldr	r3, [pc, #44]	@ (8001844 <osKernelStart+0x48>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	2b01      	cmp	r3, #1
 800181c:	d109      	bne.n	8001832 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800181e:	f7ff ffbf 	bl	80017a0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8001822:	4b08      	ldr	r3, [pc, #32]	@ (8001844 <osKernelStart+0x48>)
 8001824:	2202      	movs	r2, #2
 8001826:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8001828:	f001 f892 	bl	8002950 <vTaskStartScheduler>
      stat = osOK;
 800182c:	2300      	movs	r3, #0
 800182e:	607b      	str	r3, [r7, #4]
 8001830:	e002      	b.n	8001838 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8001832:	f04f 33ff 	mov.w	r3, #4294967295
 8001836:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8001838:	687b      	ldr	r3, [r7, #4]
}
 800183a:	4618      	mov	r0, r3
 800183c:	3708      	adds	r7, #8
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	2000008c 	.word	0x2000008c

08001848 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8001848:	b580      	push	{r7, lr}
 800184a:	b08e      	sub	sp, #56	@ 0x38
 800184c:	af04      	add	r7, sp, #16
 800184e:	60f8      	str	r0, [r7, #12]
 8001850:	60b9      	str	r1, [r7, #8]
 8001852:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8001854:	2300      	movs	r3, #0
 8001856:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001858:	f3ef 8305 	mrs	r3, IPSR
 800185c:	617b      	str	r3, [r7, #20]
  return(result);
 800185e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8001860:	2b00      	cmp	r3, #0
 8001862:	d17e      	bne.n	8001962 <osThreadNew+0x11a>
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d07b      	beq.n	8001962 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800186a:	2380      	movs	r3, #128	@ 0x80
 800186c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800186e:	2318      	movs	r3, #24
 8001870:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8001872:	2300      	movs	r3, #0
 8001874:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8001876:	f04f 33ff 	mov.w	r3, #4294967295
 800187a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d045      	beq.n	800190e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d002      	beq.n	8001890 <osThreadNew+0x48>
        name = attr->name;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	699b      	ldr	r3, [r3, #24]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d002      	beq.n	800189e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	699b      	ldr	r3, [r3, #24]
 800189c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d008      	beq.n	80018b6 <osThreadNew+0x6e>
 80018a4:	69fb      	ldr	r3, [r7, #28]
 80018a6:	2b38      	cmp	r3, #56	@ 0x38
 80018a8:	d805      	bhi.n	80018b6 <osThreadNew+0x6e>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	f003 0301 	and.w	r3, r3, #1
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d001      	beq.n	80018ba <osThreadNew+0x72>
        return (NULL);
 80018b6:	2300      	movs	r3, #0
 80018b8:	e054      	b.n	8001964 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	695b      	ldr	r3, [r3, #20]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d003      	beq.n	80018ca <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	695b      	ldr	r3, [r3, #20]
 80018c6:	089b      	lsrs	r3, r3, #2
 80018c8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	689b      	ldr	r3, [r3, #8]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d00e      	beq.n	80018f0 <osThreadNew+0xa8>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	68db      	ldr	r3, [r3, #12]
 80018d6:	2ba7      	cmp	r3, #167	@ 0xa7
 80018d8:	d90a      	bls.n	80018f0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d006      	beq.n	80018f0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	695b      	ldr	r3, [r3, #20]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d002      	beq.n	80018f0 <osThreadNew+0xa8>
        mem = 1;
 80018ea:	2301      	movs	r3, #1
 80018ec:	61bb      	str	r3, [r7, #24]
 80018ee:	e010      	b.n	8001912 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	689b      	ldr	r3, [r3, #8]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d10c      	bne.n	8001912 <osThreadNew+0xca>
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	68db      	ldr	r3, [r3, #12]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d108      	bne.n	8001912 <osThreadNew+0xca>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	691b      	ldr	r3, [r3, #16]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d104      	bne.n	8001912 <osThreadNew+0xca>
          mem = 0;
 8001908:	2300      	movs	r3, #0
 800190a:	61bb      	str	r3, [r7, #24]
 800190c:	e001      	b.n	8001912 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800190e:	2300      	movs	r3, #0
 8001910:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8001912:	69bb      	ldr	r3, [r7, #24]
 8001914:	2b01      	cmp	r3, #1
 8001916:	d110      	bne.n	800193a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800191c:	687a      	ldr	r2, [r7, #4]
 800191e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001920:	9202      	str	r2, [sp, #8]
 8001922:	9301      	str	r3, [sp, #4]
 8001924:	69fb      	ldr	r3, [r7, #28]
 8001926:	9300      	str	r3, [sp, #0]
 8001928:	68bb      	ldr	r3, [r7, #8]
 800192a:	6a3a      	ldr	r2, [r7, #32]
 800192c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800192e:	68f8      	ldr	r0, [r7, #12]
 8001930:	f000 fe1a 	bl	8002568 <xTaskCreateStatic>
 8001934:	4603      	mov	r3, r0
 8001936:	613b      	str	r3, [r7, #16]
 8001938:	e013      	b.n	8001962 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800193a:	69bb      	ldr	r3, [r7, #24]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d110      	bne.n	8001962 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8001940:	6a3b      	ldr	r3, [r7, #32]
 8001942:	b29a      	uxth	r2, r3
 8001944:	f107 0310 	add.w	r3, r7, #16
 8001948:	9301      	str	r3, [sp, #4]
 800194a:	69fb      	ldr	r3, [r7, #28]
 800194c:	9300      	str	r3, [sp, #0]
 800194e:	68bb      	ldr	r3, [r7, #8]
 8001950:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001952:	68f8      	ldr	r0, [r7, #12]
 8001954:	f000 fe68 	bl	8002628 <xTaskCreate>
 8001958:	4603      	mov	r3, r0
 800195a:	2b01      	cmp	r3, #1
 800195c:	d001      	beq.n	8001962 <osThreadNew+0x11a>
            hTask = NULL;
 800195e:	2300      	movs	r3, #0
 8001960:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8001962:	693b      	ldr	r3, [r7, #16]
}
 8001964:	4618      	mov	r0, r3
 8001966:	3728      	adds	r7, #40	@ 0x28
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}

0800196c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800196c:	b580      	push	{r7, lr}
 800196e:	b084      	sub	sp, #16
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001974:	f3ef 8305 	mrs	r3, IPSR
 8001978:	60bb      	str	r3, [r7, #8]
  return(result);
 800197a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800197c:	2b00      	cmp	r3, #0
 800197e:	d003      	beq.n	8001988 <osDelay+0x1c>
    stat = osErrorISR;
 8001980:	f06f 0305 	mvn.w	r3, #5
 8001984:	60fb      	str	r3, [r7, #12]
 8001986:	e007      	b.n	8001998 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8001988:	2300      	movs	r3, #0
 800198a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d002      	beq.n	8001998 <osDelay+0x2c>
      vTaskDelay(ticks);
 8001992:	6878      	ldr	r0, [r7, #4]
 8001994:	f000 ffa6 	bl	80028e4 <vTaskDelay>
    }
  }

  return (stat);
 8001998:	68fb      	ldr	r3, [r7, #12]
}
 800199a:	4618      	mov	r0, r3
 800199c:	3710      	adds	r7, #16
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
	...

080019a4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80019a4:	b480      	push	{r7}
 80019a6:	b085      	sub	sp, #20
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	60f8      	str	r0, [r7, #12]
 80019ac:	60b9      	str	r1, [r7, #8]
 80019ae:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	4a07      	ldr	r2, [pc, #28]	@ (80019d0 <vApplicationGetIdleTaskMemory+0x2c>)
 80019b4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80019b6:	68bb      	ldr	r3, [r7, #8]
 80019b8:	4a06      	ldr	r2, [pc, #24]	@ (80019d4 <vApplicationGetIdleTaskMemory+0x30>)
 80019ba:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2280      	movs	r2, #128	@ 0x80
 80019c0:	601a      	str	r2, [r3, #0]
}
 80019c2:	bf00      	nop
 80019c4:	3714      	adds	r7, #20
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr
 80019ce:	bf00      	nop
 80019d0:	20000090 	.word	0x20000090
 80019d4:	20000138 	.word	0x20000138

080019d8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80019d8:	b480      	push	{r7}
 80019da:	b085      	sub	sp, #20
 80019dc:	af00      	add	r7, sp, #0
 80019de:	60f8      	str	r0, [r7, #12]
 80019e0:	60b9      	str	r1, [r7, #8]
 80019e2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	4a07      	ldr	r2, [pc, #28]	@ (8001a04 <vApplicationGetTimerTaskMemory+0x2c>)
 80019e8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80019ea:	68bb      	ldr	r3, [r7, #8]
 80019ec:	4a06      	ldr	r2, [pc, #24]	@ (8001a08 <vApplicationGetTimerTaskMemory+0x30>)
 80019ee:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80019f6:	601a      	str	r2, [r3, #0]
}
 80019f8:	bf00      	nop
 80019fa:	3714      	adds	r7, #20
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr
 8001a04:	20000338 	.word	0x20000338
 8001a08:	200003e0 	.word	0x200003e0

08001a0c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b083      	sub	sp, #12
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	f103 0208 	add.w	r2, r3, #8
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	f04f 32ff 	mov.w	r2, #4294967295
 8001a24:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	f103 0208 	add.w	r2, r3, #8
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	f103 0208 	add.w	r2, r3, #8
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001a40:	bf00      	nop
 8001a42:	370c      	adds	r7, #12
 8001a44:	46bd      	mov	sp, r7
 8001a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4a:	4770      	bx	lr

08001a4c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b083      	sub	sp, #12
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2200      	movs	r2, #0
 8001a58:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001a5a:	bf00      	nop
 8001a5c:	370c      	adds	r7, #12
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr

08001a66 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001a66:	b480      	push	{r7}
 8001a68:	b085      	sub	sp, #20
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	6078      	str	r0, [r7, #4]
 8001a6e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	68fa      	ldr	r2, [r7, #12]
 8001a7a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	689a      	ldr	r2, [r3, #8]
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	683a      	ldr	r2, [r7, #0]
 8001a8a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	683a      	ldr	r2, [r7, #0]
 8001a90:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	687a      	ldr	r2, [r7, #4]
 8001a96:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	1c5a      	adds	r2, r3, #1
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	601a      	str	r2, [r3, #0]
}
 8001aa2:	bf00      	nop
 8001aa4:	3714      	adds	r7, #20
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr

08001aae <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001aae:	b480      	push	{r7}
 8001ab0:	b085      	sub	sp, #20
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	6078      	str	r0, [r7, #4]
 8001ab6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001abe:	68bb      	ldr	r3, [r7, #8]
 8001ac0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ac4:	d103      	bne.n	8001ace <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	691b      	ldr	r3, [r3, #16]
 8001aca:	60fb      	str	r3, [r7, #12]
 8001acc:	e00c      	b.n	8001ae8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	3308      	adds	r3, #8
 8001ad2:	60fb      	str	r3, [r7, #12]
 8001ad4:	e002      	b.n	8001adc <vListInsert+0x2e>
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	60fb      	str	r3, [r7, #12]
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	68ba      	ldr	r2, [r7, #8]
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	d2f6      	bcs.n	8001ad6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	685a      	ldr	r2, [r3, #4]
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	683a      	ldr	r2, [r7, #0]
 8001af6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	68fa      	ldr	r2, [r7, #12]
 8001afc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	683a      	ldr	r2, [r7, #0]
 8001b02:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	687a      	ldr	r2, [r7, #4]
 8001b08:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	1c5a      	adds	r2, r3, #1
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	601a      	str	r2, [r3, #0]
}
 8001b14:	bf00      	nop
 8001b16:	3714      	adds	r7, #20
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr

08001b20 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001b20:	b480      	push	{r7}
 8001b22:	b085      	sub	sp, #20
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	691b      	ldr	r3, [r3, #16]
 8001b2c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	687a      	ldr	r2, [r7, #4]
 8001b34:	6892      	ldr	r2, [r2, #8]
 8001b36:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	687a      	ldr	r2, [r7, #4]
 8001b3e:	6852      	ldr	r2, [r2, #4]
 8001b40:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	687a      	ldr	r2, [r7, #4]
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	d103      	bne.n	8001b54 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	689a      	ldr	r2, [r3, #8]
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2200      	movs	r2, #0
 8001b58:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	1e5a      	subs	r2, r3, #1
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	681b      	ldr	r3, [r3, #0]
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	3714      	adds	r7, #20
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr

08001b74 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b084      	sub	sp, #16
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
 8001b7c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d10b      	bne.n	8001ba0 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001b88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001b8c:	f383 8811 	msr	BASEPRI, r3
 8001b90:	f3bf 8f6f 	isb	sy
 8001b94:	f3bf 8f4f 	dsb	sy
 8001b98:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001b9a:	bf00      	nop
 8001b9c:	bf00      	nop
 8001b9e:	e7fd      	b.n	8001b9c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8001ba0:	f002 f8aa 	bl	8003cf8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	681a      	ldr	r2, [r3, #0]
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001bac:	68f9      	ldr	r1, [r7, #12]
 8001bae:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8001bb0:	fb01 f303 	mul.w	r3, r1, r3
 8001bb4:	441a      	add	r2, r3
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001bd0:	3b01      	subs	r3, #1
 8001bd2:	68f9      	ldr	r1, [r7, #12]
 8001bd4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8001bd6:	fb01 f303 	mul.w	r3, r1, r3
 8001bda:	441a      	add	r2, r3
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	22ff      	movs	r2, #255	@ 0xff
 8001be4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	22ff      	movs	r2, #255	@ 0xff
 8001bec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d114      	bne.n	8001c20 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	691b      	ldr	r3, [r3, #16]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d01a      	beq.n	8001c34 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	3310      	adds	r3, #16
 8001c02:	4618      	mov	r0, r3
 8001c04:	f001 f942 	bl	8002e8c <xTaskRemoveFromEventList>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d012      	beq.n	8001c34 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8001c0e:	4b0d      	ldr	r3, [pc, #52]	@ (8001c44 <xQueueGenericReset+0xd0>)
 8001c10:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001c14:	601a      	str	r2, [r3, #0]
 8001c16:	f3bf 8f4f 	dsb	sy
 8001c1a:	f3bf 8f6f 	isb	sy
 8001c1e:	e009      	b.n	8001c34 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	3310      	adds	r3, #16
 8001c24:	4618      	mov	r0, r3
 8001c26:	f7ff fef1 	bl	8001a0c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	3324      	adds	r3, #36	@ 0x24
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f7ff feec 	bl	8001a0c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8001c34:	f002 f892 	bl	8003d5c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8001c38:	2301      	movs	r3, #1
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	3710      	adds	r7, #16
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	e000ed04 	.word	0xe000ed04

08001c48 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b08e      	sub	sp, #56	@ 0x38
 8001c4c:	af02      	add	r7, sp, #8
 8001c4e:	60f8      	str	r0, [r7, #12]
 8001c50:	60b9      	str	r1, [r7, #8]
 8001c52:	607a      	str	r2, [r7, #4]
 8001c54:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d10b      	bne.n	8001c74 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8001c5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001c60:	f383 8811 	msr	BASEPRI, r3
 8001c64:	f3bf 8f6f 	isb	sy
 8001c68:	f3bf 8f4f 	dsb	sy
 8001c6c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8001c6e:	bf00      	nop
 8001c70:	bf00      	nop
 8001c72:	e7fd      	b.n	8001c70 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d10b      	bne.n	8001c92 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8001c7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001c7e:	f383 8811 	msr	BASEPRI, r3
 8001c82:	f3bf 8f6f 	isb	sy
 8001c86:	f3bf 8f4f 	dsb	sy
 8001c8a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8001c8c:	bf00      	nop
 8001c8e:	bf00      	nop
 8001c90:	e7fd      	b.n	8001c8e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d002      	beq.n	8001c9e <xQueueGenericCreateStatic+0x56>
 8001c98:	68bb      	ldr	r3, [r7, #8]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d001      	beq.n	8001ca2 <xQueueGenericCreateStatic+0x5a>
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e000      	b.n	8001ca4 <xQueueGenericCreateStatic+0x5c>
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d10b      	bne.n	8001cc0 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8001ca8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001cac:	f383 8811 	msr	BASEPRI, r3
 8001cb0:	f3bf 8f6f 	isb	sy
 8001cb4:	f3bf 8f4f 	dsb	sy
 8001cb8:	623b      	str	r3, [r7, #32]
}
 8001cba:	bf00      	nop
 8001cbc:	bf00      	nop
 8001cbe:	e7fd      	b.n	8001cbc <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d102      	bne.n	8001ccc <xQueueGenericCreateStatic+0x84>
 8001cc6:	68bb      	ldr	r3, [r7, #8]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d101      	bne.n	8001cd0 <xQueueGenericCreateStatic+0x88>
 8001ccc:	2301      	movs	r3, #1
 8001cce:	e000      	b.n	8001cd2 <xQueueGenericCreateStatic+0x8a>
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d10b      	bne.n	8001cee <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8001cd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001cda:	f383 8811 	msr	BASEPRI, r3
 8001cde:	f3bf 8f6f 	isb	sy
 8001ce2:	f3bf 8f4f 	dsb	sy
 8001ce6:	61fb      	str	r3, [r7, #28]
}
 8001ce8:	bf00      	nop
 8001cea:	bf00      	nop
 8001cec:	e7fd      	b.n	8001cea <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8001cee:	2350      	movs	r3, #80	@ 0x50
 8001cf0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	2b50      	cmp	r3, #80	@ 0x50
 8001cf6:	d00b      	beq.n	8001d10 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8001cf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001cfc:	f383 8811 	msr	BASEPRI, r3
 8001d00:	f3bf 8f6f 	isb	sy
 8001d04:	f3bf 8f4f 	dsb	sy
 8001d08:	61bb      	str	r3, [r7, #24]
}
 8001d0a:	bf00      	nop
 8001d0c:	bf00      	nop
 8001d0e:	e7fd      	b.n	8001d0c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8001d10:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8001d16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d00d      	beq.n	8001d38 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8001d1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d1e:	2201      	movs	r2, #1
 8001d20:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001d24:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8001d28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d2a:	9300      	str	r3, [sp, #0]
 8001d2c:	4613      	mov	r3, r2
 8001d2e:	687a      	ldr	r2, [r7, #4]
 8001d30:	68b9      	ldr	r1, [r7, #8]
 8001d32:	68f8      	ldr	r0, [r7, #12]
 8001d34:	f000 f805 	bl	8001d42 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8001d38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3730      	adds	r7, #48	@ 0x30
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}

08001d42 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8001d42:	b580      	push	{r7, lr}
 8001d44:	b084      	sub	sp, #16
 8001d46:	af00      	add	r7, sp, #0
 8001d48:	60f8      	str	r0, [r7, #12]
 8001d4a:	60b9      	str	r1, [r7, #8]
 8001d4c:	607a      	str	r2, [r7, #4]
 8001d4e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d103      	bne.n	8001d5e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001d56:	69bb      	ldr	r3, [r7, #24]
 8001d58:	69ba      	ldr	r2, [r7, #24]
 8001d5a:	601a      	str	r2, [r3, #0]
 8001d5c:	e002      	b.n	8001d64 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001d5e:	69bb      	ldr	r3, [r7, #24]
 8001d60:	687a      	ldr	r2, [r7, #4]
 8001d62:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8001d64:	69bb      	ldr	r3, [r7, #24]
 8001d66:	68fa      	ldr	r2, [r7, #12]
 8001d68:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8001d6a:	69bb      	ldr	r3, [r7, #24]
 8001d6c:	68ba      	ldr	r2, [r7, #8]
 8001d6e:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001d70:	2101      	movs	r1, #1
 8001d72:	69b8      	ldr	r0, [r7, #24]
 8001d74:	f7ff fefe 	bl	8001b74 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8001d78:	69bb      	ldr	r3, [r7, #24]
 8001d7a:	78fa      	ldrb	r2, [r7, #3]
 8001d7c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8001d80:	bf00      	nop
 8001d82:	3710      	adds	r7, #16
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}

08001d88 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b08e      	sub	sp, #56	@ 0x38
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	60f8      	str	r0, [r7, #12]
 8001d90:	60b9      	str	r1, [r7, #8]
 8001d92:	607a      	str	r2, [r7, #4]
 8001d94:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8001d96:	2300      	movs	r3, #0
 8001d98:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8001d9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d10b      	bne.n	8001dbc <xQueueGenericSend+0x34>
	__asm volatile
 8001da4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001da8:	f383 8811 	msr	BASEPRI, r3
 8001dac:	f3bf 8f6f 	isb	sy
 8001db0:	f3bf 8f4f 	dsb	sy
 8001db4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8001db6:	bf00      	nop
 8001db8:	bf00      	nop
 8001dba:	e7fd      	b.n	8001db8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d103      	bne.n	8001dca <xQueueGenericSend+0x42>
 8001dc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001dc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d101      	bne.n	8001dce <xQueueGenericSend+0x46>
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e000      	b.n	8001dd0 <xQueueGenericSend+0x48>
 8001dce:	2300      	movs	r3, #0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d10b      	bne.n	8001dec <xQueueGenericSend+0x64>
	__asm volatile
 8001dd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001dd8:	f383 8811 	msr	BASEPRI, r3
 8001ddc:	f3bf 8f6f 	isb	sy
 8001de0:	f3bf 8f4f 	dsb	sy
 8001de4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8001de6:	bf00      	nop
 8001de8:	bf00      	nop
 8001dea:	e7fd      	b.n	8001de8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	2b02      	cmp	r3, #2
 8001df0:	d103      	bne.n	8001dfa <xQueueGenericSend+0x72>
 8001df2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001df4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001df6:	2b01      	cmp	r3, #1
 8001df8:	d101      	bne.n	8001dfe <xQueueGenericSend+0x76>
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e000      	b.n	8001e00 <xQueueGenericSend+0x78>
 8001dfe:	2300      	movs	r3, #0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d10b      	bne.n	8001e1c <xQueueGenericSend+0x94>
	__asm volatile
 8001e04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001e08:	f383 8811 	msr	BASEPRI, r3
 8001e0c:	f3bf 8f6f 	isb	sy
 8001e10:	f3bf 8f4f 	dsb	sy
 8001e14:	623b      	str	r3, [r7, #32]
}
 8001e16:	bf00      	nop
 8001e18:	bf00      	nop
 8001e1a:	e7fd      	b.n	8001e18 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001e1c:	f001 f9fc 	bl	8003218 <xTaskGetSchedulerState>
 8001e20:	4603      	mov	r3, r0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d102      	bne.n	8001e2c <xQueueGenericSend+0xa4>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d101      	bne.n	8001e30 <xQueueGenericSend+0xa8>
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	e000      	b.n	8001e32 <xQueueGenericSend+0xaa>
 8001e30:	2300      	movs	r3, #0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d10b      	bne.n	8001e4e <xQueueGenericSend+0xc6>
	__asm volatile
 8001e36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001e3a:	f383 8811 	msr	BASEPRI, r3
 8001e3e:	f3bf 8f6f 	isb	sy
 8001e42:	f3bf 8f4f 	dsb	sy
 8001e46:	61fb      	str	r3, [r7, #28]
}
 8001e48:	bf00      	nop
 8001e4a:	bf00      	nop
 8001e4c:	e7fd      	b.n	8001e4a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8001e4e:	f001 ff53 	bl	8003cf8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001e52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e54:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001e56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e5a:	429a      	cmp	r2, r3
 8001e5c:	d302      	bcc.n	8001e64 <xQueueGenericSend+0xdc>
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	2b02      	cmp	r3, #2
 8001e62:	d129      	bne.n	8001eb8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001e64:	683a      	ldr	r2, [r7, #0]
 8001e66:	68b9      	ldr	r1, [r7, #8]
 8001e68:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001e6a:	f000 fa0f 	bl	800228c <prvCopyDataToQueue>
 8001e6e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001e70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d010      	beq.n	8001e9a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001e78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e7a:	3324      	adds	r3, #36	@ 0x24
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f001 f805 	bl	8002e8c <xTaskRemoveFromEventList>
 8001e82:	4603      	mov	r3, r0
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d013      	beq.n	8001eb0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8001e88:	4b3f      	ldr	r3, [pc, #252]	@ (8001f88 <xQueueGenericSend+0x200>)
 8001e8a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001e8e:	601a      	str	r2, [r3, #0]
 8001e90:	f3bf 8f4f 	dsb	sy
 8001e94:	f3bf 8f6f 	isb	sy
 8001e98:	e00a      	b.n	8001eb0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8001e9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d007      	beq.n	8001eb0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8001ea0:	4b39      	ldr	r3, [pc, #228]	@ (8001f88 <xQueueGenericSend+0x200>)
 8001ea2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001ea6:	601a      	str	r2, [r3, #0]
 8001ea8:	f3bf 8f4f 	dsb	sy
 8001eac:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8001eb0:	f001 ff54 	bl	8003d5c <vPortExitCritical>
				return pdPASS;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	e063      	b.n	8001f80 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d103      	bne.n	8001ec6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001ebe:	f001 ff4d 	bl	8003d5c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	e05c      	b.n	8001f80 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001ec6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d106      	bne.n	8001eda <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001ecc:	f107 0314 	add.w	r3, r7, #20
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f001 f83f 	bl	8002f54 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001eda:	f001 ff3f 	bl	8003d5c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001ede:	f000 fda7 	bl	8002a30 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001ee2:	f001 ff09 	bl	8003cf8 <vPortEnterCritical>
 8001ee6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ee8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001eec:	b25b      	sxtb	r3, r3
 8001eee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ef2:	d103      	bne.n	8001efc <xQueueGenericSend+0x174>
 8001ef4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001efc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001efe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001f02:	b25b      	sxtb	r3, r3
 8001f04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f08:	d103      	bne.n	8001f12 <xQueueGenericSend+0x18a>
 8001f0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8001f12:	f001 ff23 	bl	8003d5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001f16:	1d3a      	adds	r2, r7, #4
 8001f18:	f107 0314 	add.w	r3, r7, #20
 8001f1c:	4611      	mov	r1, r2
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f001 f82e 	bl	8002f80 <xTaskCheckForTimeOut>
 8001f24:	4603      	mov	r3, r0
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d124      	bne.n	8001f74 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8001f2a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001f2c:	f000 faa6 	bl	800247c <prvIsQueueFull>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d018      	beq.n	8001f68 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8001f36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f38:	3310      	adds	r3, #16
 8001f3a:	687a      	ldr	r2, [r7, #4]
 8001f3c:	4611      	mov	r1, r2
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f000 ff52 	bl	8002de8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8001f44:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001f46:	f000 fa31 	bl	80023ac <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8001f4a:	f000 fd7f 	bl	8002a4c <xTaskResumeAll>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	f47f af7c 	bne.w	8001e4e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8001f56:	4b0c      	ldr	r3, [pc, #48]	@ (8001f88 <xQueueGenericSend+0x200>)
 8001f58:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001f5c:	601a      	str	r2, [r3, #0]
 8001f5e:	f3bf 8f4f 	dsb	sy
 8001f62:	f3bf 8f6f 	isb	sy
 8001f66:	e772      	b.n	8001e4e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8001f68:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001f6a:	f000 fa1f 	bl	80023ac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001f6e:	f000 fd6d 	bl	8002a4c <xTaskResumeAll>
 8001f72:	e76c      	b.n	8001e4e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8001f74:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001f76:	f000 fa19 	bl	80023ac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001f7a:	f000 fd67 	bl	8002a4c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8001f7e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	3738      	adds	r7, #56	@ 0x38
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	e000ed04 	.word	0xe000ed04

08001f8c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b090      	sub	sp, #64	@ 0x40
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	60f8      	str	r0, [r7, #12]
 8001f94:	60b9      	str	r1, [r7, #8]
 8001f96:	607a      	str	r2, [r7, #4]
 8001f98:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8001f9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d10b      	bne.n	8001fbc <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8001fa4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001fa8:	f383 8811 	msr	BASEPRI, r3
 8001fac:	f3bf 8f6f 	isb	sy
 8001fb0:	f3bf 8f4f 	dsb	sy
 8001fb4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8001fb6:	bf00      	nop
 8001fb8:	bf00      	nop
 8001fba:	e7fd      	b.n	8001fb8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d103      	bne.n	8001fca <xQueueGenericSendFromISR+0x3e>
 8001fc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001fc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d101      	bne.n	8001fce <xQueueGenericSendFromISR+0x42>
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e000      	b.n	8001fd0 <xQueueGenericSendFromISR+0x44>
 8001fce:	2300      	movs	r3, #0
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d10b      	bne.n	8001fec <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8001fd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001fd8:	f383 8811 	msr	BASEPRI, r3
 8001fdc:	f3bf 8f6f 	isb	sy
 8001fe0:	f3bf 8f4f 	dsb	sy
 8001fe4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8001fe6:	bf00      	nop
 8001fe8:	bf00      	nop
 8001fea:	e7fd      	b.n	8001fe8 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	2b02      	cmp	r3, #2
 8001ff0:	d103      	bne.n	8001ffa <xQueueGenericSendFromISR+0x6e>
 8001ff2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001ff4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d101      	bne.n	8001ffe <xQueueGenericSendFromISR+0x72>
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e000      	b.n	8002000 <xQueueGenericSendFromISR+0x74>
 8001ffe:	2300      	movs	r3, #0
 8002000:	2b00      	cmp	r3, #0
 8002002:	d10b      	bne.n	800201c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8002004:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002008:	f383 8811 	msr	BASEPRI, r3
 800200c:	f3bf 8f6f 	isb	sy
 8002010:	f3bf 8f4f 	dsb	sy
 8002014:	623b      	str	r3, [r7, #32]
}
 8002016:	bf00      	nop
 8002018:	bf00      	nop
 800201a:	e7fd      	b.n	8002018 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800201c:	f001 ff4c 	bl	8003eb8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002020:	f3ef 8211 	mrs	r2, BASEPRI
 8002024:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002028:	f383 8811 	msr	BASEPRI, r3
 800202c:	f3bf 8f6f 	isb	sy
 8002030:	f3bf 8f4f 	dsb	sy
 8002034:	61fa      	str	r2, [r7, #28]
 8002036:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002038:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800203a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800203c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800203e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002040:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002042:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002044:	429a      	cmp	r2, r3
 8002046:	d302      	bcc.n	800204e <xQueueGenericSendFromISR+0xc2>
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	2b02      	cmp	r3, #2
 800204c:	d12f      	bne.n	80020ae <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800204e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002050:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002054:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002058:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800205a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800205c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800205e:	683a      	ldr	r2, [r7, #0]
 8002060:	68b9      	ldr	r1, [r7, #8]
 8002062:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8002064:	f000 f912 	bl	800228c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002068:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800206c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002070:	d112      	bne.n	8002098 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002072:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002074:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002076:	2b00      	cmp	r3, #0
 8002078:	d016      	beq.n	80020a8 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800207a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800207c:	3324      	adds	r3, #36	@ 0x24
 800207e:	4618      	mov	r0, r3
 8002080:	f000 ff04 	bl	8002e8c <xTaskRemoveFromEventList>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d00e      	beq.n	80020a8 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d00b      	beq.n	80020a8 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2201      	movs	r2, #1
 8002094:	601a      	str	r2, [r3, #0]
 8002096:	e007      	b.n	80020a8 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002098:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800209c:	3301      	adds	r3, #1
 800209e:	b2db      	uxtb	r3, r3
 80020a0:	b25a      	sxtb	r2, r3
 80020a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80020a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80020a8:	2301      	movs	r3, #1
 80020aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80020ac:	e001      	b.n	80020b2 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80020ae:	2300      	movs	r3, #0
 80020b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80020b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80020b4:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80020bc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80020be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	3740      	adds	r7, #64	@ 0x40
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}

080020c8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b08c      	sub	sp, #48	@ 0x30
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	60f8      	str	r0, [r7, #12]
 80020d0:	60b9      	str	r1, [r7, #8]
 80020d2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80020d4:	2300      	movs	r3, #0
 80020d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80020dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d10b      	bne.n	80020fa <xQueueReceive+0x32>
	__asm volatile
 80020e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80020e6:	f383 8811 	msr	BASEPRI, r3
 80020ea:	f3bf 8f6f 	isb	sy
 80020ee:	f3bf 8f4f 	dsb	sy
 80020f2:	623b      	str	r3, [r7, #32]
}
 80020f4:	bf00      	nop
 80020f6:	bf00      	nop
 80020f8:	e7fd      	b.n	80020f6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80020fa:	68bb      	ldr	r3, [r7, #8]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d103      	bne.n	8002108 <xQueueReceive+0x40>
 8002100:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002102:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002104:	2b00      	cmp	r3, #0
 8002106:	d101      	bne.n	800210c <xQueueReceive+0x44>
 8002108:	2301      	movs	r3, #1
 800210a:	e000      	b.n	800210e <xQueueReceive+0x46>
 800210c:	2300      	movs	r3, #0
 800210e:	2b00      	cmp	r3, #0
 8002110:	d10b      	bne.n	800212a <xQueueReceive+0x62>
	__asm volatile
 8002112:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002116:	f383 8811 	msr	BASEPRI, r3
 800211a:	f3bf 8f6f 	isb	sy
 800211e:	f3bf 8f4f 	dsb	sy
 8002122:	61fb      	str	r3, [r7, #28]
}
 8002124:	bf00      	nop
 8002126:	bf00      	nop
 8002128:	e7fd      	b.n	8002126 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800212a:	f001 f875 	bl	8003218 <xTaskGetSchedulerState>
 800212e:	4603      	mov	r3, r0
 8002130:	2b00      	cmp	r3, #0
 8002132:	d102      	bne.n	800213a <xQueueReceive+0x72>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d101      	bne.n	800213e <xQueueReceive+0x76>
 800213a:	2301      	movs	r3, #1
 800213c:	e000      	b.n	8002140 <xQueueReceive+0x78>
 800213e:	2300      	movs	r3, #0
 8002140:	2b00      	cmp	r3, #0
 8002142:	d10b      	bne.n	800215c <xQueueReceive+0x94>
	__asm volatile
 8002144:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002148:	f383 8811 	msr	BASEPRI, r3
 800214c:	f3bf 8f6f 	isb	sy
 8002150:	f3bf 8f4f 	dsb	sy
 8002154:	61bb      	str	r3, [r7, #24]
}
 8002156:	bf00      	nop
 8002158:	bf00      	nop
 800215a:	e7fd      	b.n	8002158 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800215c:	f001 fdcc 	bl	8003cf8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002160:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002162:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002164:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002168:	2b00      	cmp	r3, #0
 800216a:	d01f      	beq.n	80021ac <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800216c:	68b9      	ldr	r1, [r7, #8]
 800216e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002170:	f000 f8f6 	bl	8002360 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002174:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002176:	1e5a      	subs	r2, r3, #1
 8002178:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800217a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800217c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800217e:	691b      	ldr	r3, [r3, #16]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d00f      	beq.n	80021a4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002184:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002186:	3310      	adds	r3, #16
 8002188:	4618      	mov	r0, r3
 800218a:	f000 fe7f 	bl	8002e8c <xTaskRemoveFromEventList>
 800218e:	4603      	mov	r3, r0
 8002190:	2b00      	cmp	r3, #0
 8002192:	d007      	beq.n	80021a4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002194:	4b3c      	ldr	r3, [pc, #240]	@ (8002288 <xQueueReceive+0x1c0>)
 8002196:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800219a:	601a      	str	r2, [r3, #0]
 800219c:	f3bf 8f4f 	dsb	sy
 80021a0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80021a4:	f001 fdda 	bl	8003d5c <vPortExitCritical>
				return pdPASS;
 80021a8:	2301      	movs	r3, #1
 80021aa:	e069      	b.n	8002280 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d103      	bne.n	80021ba <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80021b2:	f001 fdd3 	bl	8003d5c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80021b6:	2300      	movs	r3, #0
 80021b8:	e062      	b.n	8002280 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80021ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d106      	bne.n	80021ce <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80021c0:	f107 0310 	add.w	r3, r7, #16
 80021c4:	4618      	mov	r0, r3
 80021c6:	f000 fec5 	bl	8002f54 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80021ca:	2301      	movs	r3, #1
 80021cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80021ce:	f001 fdc5 	bl	8003d5c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80021d2:	f000 fc2d 	bl	8002a30 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80021d6:	f001 fd8f 	bl	8003cf8 <vPortEnterCritical>
 80021da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021dc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80021e0:	b25b      	sxtb	r3, r3
 80021e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021e6:	d103      	bne.n	80021f0 <xQueueReceive+0x128>
 80021e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021ea:	2200      	movs	r2, #0
 80021ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80021f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021f2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80021f6:	b25b      	sxtb	r3, r3
 80021f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021fc:	d103      	bne.n	8002206 <xQueueReceive+0x13e>
 80021fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002200:	2200      	movs	r2, #0
 8002202:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002206:	f001 fda9 	bl	8003d5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800220a:	1d3a      	adds	r2, r7, #4
 800220c:	f107 0310 	add.w	r3, r7, #16
 8002210:	4611      	mov	r1, r2
 8002212:	4618      	mov	r0, r3
 8002214:	f000 feb4 	bl	8002f80 <xTaskCheckForTimeOut>
 8002218:	4603      	mov	r3, r0
 800221a:	2b00      	cmp	r3, #0
 800221c:	d123      	bne.n	8002266 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800221e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002220:	f000 f916 	bl	8002450 <prvIsQueueEmpty>
 8002224:	4603      	mov	r3, r0
 8002226:	2b00      	cmp	r3, #0
 8002228:	d017      	beq.n	800225a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800222a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800222c:	3324      	adds	r3, #36	@ 0x24
 800222e:	687a      	ldr	r2, [r7, #4]
 8002230:	4611      	mov	r1, r2
 8002232:	4618      	mov	r0, r3
 8002234:	f000 fdd8 	bl	8002de8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002238:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800223a:	f000 f8b7 	bl	80023ac <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800223e:	f000 fc05 	bl	8002a4c <xTaskResumeAll>
 8002242:	4603      	mov	r3, r0
 8002244:	2b00      	cmp	r3, #0
 8002246:	d189      	bne.n	800215c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8002248:	4b0f      	ldr	r3, [pc, #60]	@ (8002288 <xQueueReceive+0x1c0>)
 800224a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800224e:	601a      	str	r2, [r3, #0]
 8002250:	f3bf 8f4f 	dsb	sy
 8002254:	f3bf 8f6f 	isb	sy
 8002258:	e780      	b.n	800215c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800225a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800225c:	f000 f8a6 	bl	80023ac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002260:	f000 fbf4 	bl	8002a4c <xTaskResumeAll>
 8002264:	e77a      	b.n	800215c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002266:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002268:	f000 f8a0 	bl	80023ac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800226c:	f000 fbee 	bl	8002a4c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002270:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002272:	f000 f8ed 	bl	8002450 <prvIsQueueEmpty>
 8002276:	4603      	mov	r3, r0
 8002278:	2b00      	cmp	r3, #0
 800227a:	f43f af6f 	beq.w	800215c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800227e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002280:	4618      	mov	r0, r3
 8002282:	3730      	adds	r7, #48	@ 0x30
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}
 8002288:	e000ed04 	.word	0xe000ed04

0800228c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b086      	sub	sp, #24
 8002290:	af00      	add	r7, sp, #0
 8002292:	60f8      	str	r0, [r7, #12]
 8002294:	60b9      	str	r1, [r7, #8]
 8002296:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002298:	2300      	movs	r3, #0
 800229a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022a0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d10d      	bne.n	80022c6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d14d      	bne.n	800234e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	4618      	mov	r0, r3
 80022b8:	f000 ffcc 	bl	8003254 <xTaskPriorityDisinherit>
 80022bc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	2200      	movs	r2, #0
 80022c2:	609a      	str	r2, [r3, #8]
 80022c4:	e043      	b.n	800234e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d119      	bne.n	8002300 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	6858      	ldr	r0, [r3, #4]
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022d4:	461a      	mov	r2, r3
 80022d6:	68b9      	ldr	r1, [r7, #8]
 80022d8:	f002 f8a2 	bl	8004420 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	685a      	ldr	r2, [r3, #4]
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022e4:	441a      	add	r2, r3
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	685a      	ldr	r2, [r3, #4]
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	429a      	cmp	r2, r3
 80022f4:	d32b      	bcc.n	800234e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	605a      	str	r2, [r3, #4]
 80022fe:	e026      	b.n	800234e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	68d8      	ldr	r0, [r3, #12]
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002308:	461a      	mov	r2, r3
 800230a:	68b9      	ldr	r1, [r7, #8]
 800230c:	f002 f888 	bl	8004420 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	68da      	ldr	r2, [r3, #12]
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002318:	425b      	negs	r3, r3
 800231a:	441a      	add	r2, r3
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	68da      	ldr	r2, [r3, #12]
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	429a      	cmp	r2, r3
 800232a:	d207      	bcs.n	800233c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	689a      	ldr	r2, [r3, #8]
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002334:	425b      	negs	r3, r3
 8002336:	441a      	add	r2, r3
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2b02      	cmp	r3, #2
 8002340:	d105      	bne.n	800234e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d002      	beq.n	800234e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	3b01      	subs	r3, #1
 800234c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	1c5a      	adds	r2, r3, #1
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8002356:	697b      	ldr	r3, [r7, #20]
}
 8002358:	4618      	mov	r0, r3
 800235a:	3718      	adds	r7, #24
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}

08002360 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b082      	sub	sp, #8
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
 8002368:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800236e:	2b00      	cmp	r3, #0
 8002370:	d018      	beq.n	80023a4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	68da      	ldr	r2, [r3, #12]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800237a:	441a      	add	r2, r3
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	68da      	ldr	r2, [r3, #12]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	429a      	cmp	r2, r3
 800238a:	d303      	bcc.n	8002394 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681a      	ldr	r2, [r3, #0]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	68d9      	ldr	r1, [r3, #12]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800239c:	461a      	mov	r2, r3
 800239e:	6838      	ldr	r0, [r7, #0]
 80023a0:	f002 f83e 	bl	8004420 <memcpy>
	}
}
 80023a4:	bf00      	nop
 80023a6:	3708      	adds	r7, #8
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}

080023ac <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b084      	sub	sp, #16
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80023b4:	f001 fca0 	bl	8003cf8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80023be:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80023c0:	e011      	b.n	80023e6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d012      	beq.n	80023f0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	3324      	adds	r3, #36	@ 0x24
 80023ce:	4618      	mov	r0, r3
 80023d0:	f000 fd5c 	bl	8002e8c <xTaskRemoveFromEventList>
 80023d4:	4603      	mov	r3, r0
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d001      	beq.n	80023de <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80023da:	f000 fe35 	bl	8003048 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80023de:	7bfb      	ldrb	r3, [r7, #15]
 80023e0:	3b01      	subs	r3, #1
 80023e2:	b2db      	uxtb	r3, r3
 80023e4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80023e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	dce9      	bgt.n	80023c2 <prvUnlockQueue+0x16>
 80023ee:	e000      	b.n	80023f2 <prvUnlockQueue+0x46>
					break;
 80023f0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	22ff      	movs	r2, #255	@ 0xff
 80023f6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80023fa:	f001 fcaf 	bl	8003d5c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80023fe:	f001 fc7b 	bl	8003cf8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002408:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800240a:	e011      	b.n	8002430 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	691b      	ldr	r3, [r3, #16]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d012      	beq.n	800243a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	3310      	adds	r3, #16
 8002418:	4618      	mov	r0, r3
 800241a:	f000 fd37 	bl	8002e8c <xTaskRemoveFromEventList>
 800241e:	4603      	mov	r3, r0
 8002420:	2b00      	cmp	r3, #0
 8002422:	d001      	beq.n	8002428 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002424:	f000 fe10 	bl	8003048 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002428:	7bbb      	ldrb	r3, [r7, #14]
 800242a:	3b01      	subs	r3, #1
 800242c:	b2db      	uxtb	r3, r3
 800242e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002430:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002434:	2b00      	cmp	r3, #0
 8002436:	dce9      	bgt.n	800240c <prvUnlockQueue+0x60>
 8002438:	e000      	b.n	800243c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800243a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	22ff      	movs	r2, #255	@ 0xff
 8002440:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8002444:	f001 fc8a 	bl	8003d5c <vPortExitCritical>
}
 8002448:	bf00      	nop
 800244a:	3710      	adds	r7, #16
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}

08002450 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b084      	sub	sp, #16
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002458:	f001 fc4e 	bl	8003cf8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002460:	2b00      	cmp	r3, #0
 8002462:	d102      	bne.n	800246a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002464:	2301      	movs	r3, #1
 8002466:	60fb      	str	r3, [r7, #12]
 8002468:	e001      	b.n	800246e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800246a:	2300      	movs	r3, #0
 800246c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800246e:	f001 fc75 	bl	8003d5c <vPortExitCritical>

	return xReturn;
 8002472:	68fb      	ldr	r3, [r7, #12]
}
 8002474:	4618      	mov	r0, r3
 8002476:	3710      	adds	r7, #16
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}

0800247c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b084      	sub	sp, #16
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002484:	f001 fc38 	bl	8003cf8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002490:	429a      	cmp	r2, r3
 8002492:	d102      	bne.n	800249a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002494:	2301      	movs	r3, #1
 8002496:	60fb      	str	r3, [r7, #12]
 8002498:	e001      	b.n	800249e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800249a:	2300      	movs	r3, #0
 800249c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800249e:	f001 fc5d 	bl	8003d5c <vPortExitCritical>

	return xReturn;
 80024a2:	68fb      	ldr	r3, [r7, #12]
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	3710      	adds	r7, #16
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}

080024ac <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80024ac:	b480      	push	{r7}
 80024ae:	b085      	sub	sp, #20
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
 80024b4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80024b6:	2300      	movs	r3, #0
 80024b8:	60fb      	str	r3, [r7, #12]
 80024ba:	e014      	b.n	80024e6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80024bc:	4a0f      	ldr	r2, [pc, #60]	@ (80024fc <vQueueAddToRegistry+0x50>)
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d10b      	bne.n	80024e0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80024c8:	490c      	ldr	r1, [pc, #48]	@ (80024fc <vQueueAddToRegistry+0x50>)
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	683a      	ldr	r2, [r7, #0]
 80024ce:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80024d2:	4a0a      	ldr	r2, [pc, #40]	@ (80024fc <vQueueAddToRegistry+0x50>)
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	00db      	lsls	r3, r3, #3
 80024d8:	4413      	add	r3, r2
 80024da:	687a      	ldr	r2, [r7, #4]
 80024dc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80024de:	e006      	b.n	80024ee <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	3301      	adds	r3, #1
 80024e4:	60fb      	str	r3, [r7, #12]
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	2b07      	cmp	r3, #7
 80024ea:	d9e7      	bls.n	80024bc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80024ec:	bf00      	nop
 80024ee:	bf00      	nop
 80024f0:	3714      	adds	r7, #20
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr
 80024fa:	bf00      	nop
 80024fc:	200007e0 	.word	0x200007e0

08002500 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002500:	b580      	push	{r7, lr}
 8002502:	b086      	sub	sp, #24
 8002504:	af00      	add	r7, sp, #0
 8002506:	60f8      	str	r0, [r7, #12]
 8002508:	60b9      	str	r1, [r7, #8]
 800250a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002510:	f001 fbf2 	bl	8003cf8 <vPortEnterCritical>
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800251a:	b25b      	sxtb	r3, r3
 800251c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002520:	d103      	bne.n	800252a <vQueueWaitForMessageRestricted+0x2a>
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	2200      	movs	r2, #0
 8002526:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002530:	b25b      	sxtb	r3, r3
 8002532:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002536:	d103      	bne.n	8002540 <vQueueWaitForMessageRestricted+0x40>
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	2200      	movs	r2, #0
 800253c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002540:	f001 fc0c 	bl	8003d5c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002548:	2b00      	cmp	r3, #0
 800254a:	d106      	bne.n	800255a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	3324      	adds	r3, #36	@ 0x24
 8002550:	687a      	ldr	r2, [r7, #4]
 8002552:	68b9      	ldr	r1, [r7, #8]
 8002554:	4618      	mov	r0, r3
 8002556:	f000 fc6d 	bl	8002e34 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800255a:	6978      	ldr	r0, [r7, #20]
 800255c:	f7ff ff26 	bl	80023ac <prvUnlockQueue>
	}
 8002560:	bf00      	nop
 8002562:	3718      	adds	r7, #24
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}

08002568 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002568:	b580      	push	{r7, lr}
 800256a:	b08e      	sub	sp, #56	@ 0x38
 800256c:	af04      	add	r7, sp, #16
 800256e:	60f8      	str	r0, [r7, #12]
 8002570:	60b9      	str	r1, [r7, #8]
 8002572:	607a      	str	r2, [r7, #4]
 8002574:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002576:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002578:	2b00      	cmp	r3, #0
 800257a:	d10b      	bne.n	8002594 <xTaskCreateStatic+0x2c>
	__asm volatile
 800257c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002580:	f383 8811 	msr	BASEPRI, r3
 8002584:	f3bf 8f6f 	isb	sy
 8002588:	f3bf 8f4f 	dsb	sy
 800258c:	623b      	str	r3, [r7, #32]
}
 800258e:	bf00      	nop
 8002590:	bf00      	nop
 8002592:	e7fd      	b.n	8002590 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002594:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002596:	2b00      	cmp	r3, #0
 8002598:	d10b      	bne.n	80025b2 <xTaskCreateStatic+0x4a>
	__asm volatile
 800259a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800259e:	f383 8811 	msr	BASEPRI, r3
 80025a2:	f3bf 8f6f 	isb	sy
 80025a6:	f3bf 8f4f 	dsb	sy
 80025aa:	61fb      	str	r3, [r7, #28]
}
 80025ac:	bf00      	nop
 80025ae:	bf00      	nop
 80025b0:	e7fd      	b.n	80025ae <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80025b2:	23a8      	movs	r3, #168	@ 0xa8
 80025b4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	2ba8      	cmp	r3, #168	@ 0xa8
 80025ba:	d00b      	beq.n	80025d4 <xTaskCreateStatic+0x6c>
	__asm volatile
 80025bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80025c0:	f383 8811 	msr	BASEPRI, r3
 80025c4:	f3bf 8f6f 	isb	sy
 80025c8:	f3bf 8f4f 	dsb	sy
 80025cc:	61bb      	str	r3, [r7, #24]
}
 80025ce:	bf00      	nop
 80025d0:	bf00      	nop
 80025d2:	e7fd      	b.n	80025d0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80025d4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80025d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d01e      	beq.n	800261a <xTaskCreateStatic+0xb2>
 80025dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d01b      	beq.n	800261a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80025e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025e4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80025e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025e8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80025ea:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80025ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025ee:	2202      	movs	r2, #2
 80025f0:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80025f4:	2300      	movs	r3, #0
 80025f6:	9303      	str	r3, [sp, #12]
 80025f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025fa:	9302      	str	r3, [sp, #8]
 80025fc:	f107 0314 	add.w	r3, r7, #20
 8002600:	9301      	str	r3, [sp, #4]
 8002602:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002604:	9300      	str	r3, [sp, #0]
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	687a      	ldr	r2, [r7, #4]
 800260a:	68b9      	ldr	r1, [r7, #8]
 800260c:	68f8      	ldr	r0, [r7, #12]
 800260e:	f000 f851 	bl	80026b4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002612:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002614:	f000 f8f6 	bl	8002804 <prvAddNewTaskToReadyList>
 8002618:	e001      	b.n	800261e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800261a:	2300      	movs	r3, #0
 800261c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800261e:	697b      	ldr	r3, [r7, #20]
	}
 8002620:	4618      	mov	r0, r3
 8002622:	3728      	adds	r7, #40	@ 0x28
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}

08002628 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002628:	b580      	push	{r7, lr}
 800262a:	b08c      	sub	sp, #48	@ 0x30
 800262c:	af04      	add	r7, sp, #16
 800262e:	60f8      	str	r0, [r7, #12]
 8002630:	60b9      	str	r1, [r7, #8]
 8002632:	603b      	str	r3, [r7, #0]
 8002634:	4613      	mov	r3, r2
 8002636:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002638:	88fb      	ldrh	r3, [r7, #6]
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	4618      	mov	r0, r3
 800263e:	f001 fc7d 	bl	8003f3c <pvPortMalloc>
 8002642:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d00e      	beq.n	8002668 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800264a:	20a8      	movs	r0, #168	@ 0xa8
 800264c:	f001 fc76 	bl	8003f3c <pvPortMalloc>
 8002650:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002652:	69fb      	ldr	r3, [r7, #28]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d003      	beq.n	8002660 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002658:	69fb      	ldr	r3, [r7, #28]
 800265a:	697a      	ldr	r2, [r7, #20]
 800265c:	631a      	str	r2, [r3, #48]	@ 0x30
 800265e:	e005      	b.n	800266c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002660:	6978      	ldr	r0, [r7, #20]
 8002662:	f001 fd39 	bl	80040d8 <vPortFree>
 8002666:	e001      	b.n	800266c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002668:	2300      	movs	r3, #0
 800266a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800266c:	69fb      	ldr	r3, [r7, #28]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d017      	beq.n	80026a2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002672:	69fb      	ldr	r3, [r7, #28]
 8002674:	2200      	movs	r2, #0
 8002676:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800267a:	88fa      	ldrh	r2, [r7, #6]
 800267c:	2300      	movs	r3, #0
 800267e:	9303      	str	r3, [sp, #12]
 8002680:	69fb      	ldr	r3, [r7, #28]
 8002682:	9302      	str	r3, [sp, #8]
 8002684:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002686:	9301      	str	r3, [sp, #4]
 8002688:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800268a:	9300      	str	r3, [sp, #0]
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	68b9      	ldr	r1, [r7, #8]
 8002690:	68f8      	ldr	r0, [r7, #12]
 8002692:	f000 f80f 	bl	80026b4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002696:	69f8      	ldr	r0, [r7, #28]
 8002698:	f000 f8b4 	bl	8002804 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800269c:	2301      	movs	r3, #1
 800269e:	61bb      	str	r3, [r7, #24]
 80026a0:	e002      	b.n	80026a8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80026a2:	f04f 33ff 	mov.w	r3, #4294967295
 80026a6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80026a8:	69bb      	ldr	r3, [r7, #24]
	}
 80026aa:	4618      	mov	r0, r3
 80026ac:	3720      	adds	r7, #32
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}
	...

080026b4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b088      	sub	sp, #32
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	60f8      	str	r0, [r7, #12]
 80026bc:	60b9      	str	r1, [r7, #8]
 80026be:	607a      	str	r2, [r7, #4]
 80026c0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80026c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026c4:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	009b      	lsls	r3, r3, #2
 80026ca:	461a      	mov	r2, r3
 80026cc:	21a5      	movs	r1, #165	@ 0xa5
 80026ce:	f001 fe23 	bl	8004318 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80026d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026d4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80026dc:	3b01      	subs	r3, #1
 80026de:	009b      	lsls	r3, r3, #2
 80026e0:	4413      	add	r3, r2
 80026e2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80026e4:	69bb      	ldr	r3, [r7, #24]
 80026e6:	f023 0307 	bic.w	r3, r3, #7
 80026ea:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80026ec:	69bb      	ldr	r3, [r7, #24]
 80026ee:	f003 0307 	and.w	r3, r3, #7
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d00b      	beq.n	800270e <prvInitialiseNewTask+0x5a>
	__asm volatile
 80026f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80026fa:	f383 8811 	msr	BASEPRI, r3
 80026fe:	f3bf 8f6f 	isb	sy
 8002702:	f3bf 8f4f 	dsb	sy
 8002706:	617b      	str	r3, [r7, #20]
}
 8002708:	bf00      	nop
 800270a:	bf00      	nop
 800270c:	e7fd      	b.n	800270a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d01f      	beq.n	8002754 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002714:	2300      	movs	r3, #0
 8002716:	61fb      	str	r3, [r7, #28]
 8002718:	e012      	b.n	8002740 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800271a:	68ba      	ldr	r2, [r7, #8]
 800271c:	69fb      	ldr	r3, [r7, #28]
 800271e:	4413      	add	r3, r2
 8002720:	7819      	ldrb	r1, [r3, #0]
 8002722:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002724:	69fb      	ldr	r3, [r7, #28]
 8002726:	4413      	add	r3, r2
 8002728:	3334      	adds	r3, #52	@ 0x34
 800272a:	460a      	mov	r2, r1
 800272c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800272e:	68ba      	ldr	r2, [r7, #8]
 8002730:	69fb      	ldr	r3, [r7, #28]
 8002732:	4413      	add	r3, r2
 8002734:	781b      	ldrb	r3, [r3, #0]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d006      	beq.n	8002748 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800273a:	69fb      	ldr	r3, [r7, #28]
 800273c:	3301      	adds	r3, #1
 800273e:	61fb      	str	r3, [r7, #28]
 8002740:	69fb      	ldr	r3, [r7, #28]
 8002742:	2b0f      	cmp	r3, #15
 8002744:	d9e9      	bls.n	800271a <prvInitialiseNewTask+0x66>
 8002746:	e000      	b.n	800274a <prvInitialiseNewTask+0x96>
			{
				break;
 8002748:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800274a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800274c:	2200      	movs	r2, #0
 800274e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002752:	e003      	b.n	800275c <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002754:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002756:	2200      	movs	r2, #0
 8002758:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800275c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800275e:	2b37      	cmp	r3, #55	@ 0x37
 8002760:	d901      	bls.n	8002766 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002762:	2337      	movs	r3, #55	@ 0x37
 8002764:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002766:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002768:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800276a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800276c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800276e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002770:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8002772:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002774:	2200      	movs	r2, #0
 8002776:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002778:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800277a:	3304      	adds	r3, #4
 800277c:	4618      	mov	r0, r3
 800277e:	f7ff f965 	bl	8001a4c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002782:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002784:	3318      	adds	r3, #24
 8002786:	4618      	mov	r0, r3
 8002788:	f7ff f960 	bl	8001a4c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800278c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800278e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002790:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002792:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002794:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8002798:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800279a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800279c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800279e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80027a0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80027a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027a4:	2200      	movs	r2, #0
 80027a6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80027aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027ac:	2200      	movs	r2, #0
 80027ae:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80027b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027b4:	3354      	adds	r3, #84	@ 0x54
 80027b6:	224c      	movs	r2, #76	@ 0x4c
 80027b8:	2100      	movs	r1, #0
 80027ba:	4618      	mov	r0, r3
 80027bc:	f001 fdac 	bl	8004318 <memset>
 80027c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027c2:	4a0d      	ldr	r2, [pc, #52]	@ (80027f8 <prvInitialiseNewTask+0x144>)
 80027c4:	659a      	str	r2, [r3, #88]	@ 0x58
 80027c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027c8:	4a0c      	ldr	r2, [pc, #48]	@ (80027fc <prvInitialiseNewTask+0x148>)
 80027ca:	65da      	str	r2, [r3, #92]	@ 0x5c
 80027cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027ce:	4a0c      	ldr	r2, [pc, #48]	@ (8002800 <prvInitialiseNewTask+0x14c>)
 80027d0:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80027d2:	683a      	ldr	r2, [r7, #0]
 80027d4:	68f9      	ldr	r1, [r7, #12]
 80027d6:	69b8      	ldr	r0, [r7, #24]
 80027d8:	f001 f95a 	bl	8003a90 <pxPortInitialiseStack>
 80027dc:	4602      	mov	r2, r0
 80027de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027e0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80027e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d002      	beq.n	80027ee <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80027e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80027ec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80027ee:	bf00      	nop
 80027f0:	3720      	adds	r7, #32
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop
 80027f8:	20004a74 	.word	0x20004a74
 80027fc:	20004adc 	.word	0x20004adc
 8002800:	20004b44 	.word	0x20004b44

08002804 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b082      	sub	sp, #8
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800280c:	f001 fa74 	bl	8003cf8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002810:	4b2d      	ldr	r3, [pc, #180]	@ (80028c8 <prvAddNewTaskToReadyList+0xc4>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	3301      	adds	r3, #1
 8002816:	4a2c      	ldr	r2, [pc, #176]	@ (80028c8 <prvAddNewTaskToReadyList+0xc4>)
 8002818:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800281a:	4b2c      	ldr	r3, [pc, #176]	@ (80028cc <prvAddNewTaskToReadyList+0xc8>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d109      	bne.n	8002836 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002822:	4a2a      	ldr	r2, [pc, #168]	@ (80028cc <prvAddNewTaskToReadyList+0xc8>)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002828:	4b27      	ldr	r3, [pc, #156]	@ (80028c8 <prvAddNewTaskToReadyList+0xc4>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	2b01      	cmp	r3, #1
 800282e:	d110      	bne.n	8002852 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002830:	f000 fc2e 	bl	8003090 <prvInitialiseTaskLists>
 8002834:	e00d      	b.n	8002852 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002836:	4b26      	ldr	r3, [pc, #152]	@ (80028d0 <prvAddNewTaskToReadyList+0xcc>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d109      	bne.n	8002852 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800283e:	4b23      	ldr	r3, [pc, #140]	@ (80028cc <prvAddNewTaskToReadyList+0xc8>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002848:	429a      	cmp	r2, r3
 800284a:	d802      	bhi.n	8002852 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800284c:	4a1f      	ldr	r2, [pc, #124]	@ (80028cc <prvAddNewTaskToReadyList+0xc8>)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002852:	4b20      	ldr	r3, [pc, #128]	@ (80028d4 <prvAddNewTaskToReadyList+0xd0>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	3301      	adds	r3, #1
 8002858:	4a1e      	ldr	r2, [pc, #120]	@ (80028d4 <prvAddNewTaskToReadyList+0xd0>)
 800285a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800285c:	4b1d      	ldr	r3, [pc, #116]	@ (80028d4 <prvAddNewTaskToReadyList+0xd0>)
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002868:	4b1b      	ldr	r3, [pc, #108]	@ (80028d8 <prvAddNewTaskToReadyList+0xd4>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	429a      	cmp	r2, r3
 800286e:	d903      	bls.n	8002878 <prvAddNewTaskToReadyList+0x74>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002874:	4a18      	ldr	r2, [pc, #96]	@ (80028d8 <prvAddNewTaskToReadyList+0xd4>)
 8002876:	6013      	str	r3, [r2, #0]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800287c:	4613      	mov	r3, r2
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	4413      	add	r3, r2
 8002882:	009b      	lsls	r3, r3, #2
 8002884:	4a15      	ldr	r2, [pc, #84]	@ (80028dc <prvAddNewTaskToReadyList+0xd8>)
 8002886:	441a      	add	r2, r3
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	3304      	adds	r3, #4
 800288c:	4619      	mov	r1, r3
 800288e:	4610      	mov	r0, r2
 8002890:	f7ff f8e9 	bl	8001a66 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002894:	f001 fa62 	bl	8003d5c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002898:	4b0d      	ldr	r3, [pc, #52]	@ (80028d0 <prvAddNewTaskToReadyList+0xcc>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d00e      	beq.n	80028be <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80028a0:	4b0a      	ldr	r3, [pc, #40]	@ (80028cc <prvAddNewTaskToReadyList+0xc8>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028aa:	429a      	cmp	r2, r3
 80028ac:	d207      	bcs.n	80028be <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80028ae:	4b0c      	ldr	r3, [pc, #48]	@ (80028e0 <prvAddNewTaskToReadyList+0xdc>)
 80028b0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80028b4:	601a      	str	r2, [r3, #0]
 80028b6:	f3bf 8f4f 	dsb	sy
 80028ba:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80028be:	bf00      	nop
 80028c0:	3708      	adds	r7, #8
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	bf00      	nop
 80028c8:	20000cf4 	.word	0x20000cf4
 80028cc:	20000820 	.word	0x20000820
 80028d0:	20000d00 	.word	0x20000d00
 80028d4:	20000d10 	.word	0x20000d10
 80028d8:	20000cfc 	.word	0x20000cfc
 80028dc:	20000824 	.word	0x20000824
 80028e0:	e000ed04 	.word	0xe000ed04

080028e4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b084      	sub	sp, #16
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80028ec:	2300      	movs	r3, #0
 80028ee:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d018      	beq.n	8002928 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80028f6:	4b14      	ldr	r3, [pc, #80]	@ (8002948 <vTaskDelay+0x64>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d00b      	beq.n	8002916 <vTaskDelay+0x32>
	__asm volatile
 80028fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002902:	f383 8811 	msr	BASEPRI, r3
 8002906:	f3bf 8f6f 	isb	sy
 800290a:	f3bf 8f4f 	dsb	sy
 800290e:	60bb      	str	r3, [r7, #8]
}
 8002910:	bf00      	nop
 8002912:	bf00      	nop
 8002914:	e7fd      	b.n	8002912 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002916:	f000 f88b 	bl	8002a30 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800291a:	2100      	movs	r1, #0
 800291c:	6878      	ldr	r0, [r7, #4]
 800291e:	f000 fd09 	bl	8003334 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002922:	f000 f893 	bl	8002a4c <xTaskResumeAll>
 8002926:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d107      	bne.n	800293e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800292e:	4b07      	ldr	r3, [pc, #28]	@ (800294c <vTaskDelay+0x68>)
 8002930:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002934:	601a      	str	r2, [r3, #0]
 8002936:	f3bf 8f4f 	dsb	sy
 800293a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800293e:	bf00      	nop
 8002940:	3710      	adds	r7, #16
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	20000d1c 	.word	0x20000d1c
 800294c:	e000ed04 	.word	0xe000ed04

08002950 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b08a      	sub	sp, #40	@ 0x28
 8002954:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002956:	2300      	movs	r3, #0
 8002958:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800295a:	2300      	movs	r3, #0
 800295c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800295e:	463a      	mov	r2, r7
 8002960:	1d39      	adds	r1, r7, #4
 8002962:	f107 0308 	add.w	r3, r7, #8
 8002966:	4618      	mov	r0, r3
 8002968:	f7ff f81c 	bl	80019a4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800296c:	6839      	ldr	r1, [r7, #0]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	68ba      	ldr	r2, [r7, #8]
 8002972:	9202      	str	r2, [sp, #8]
 8002974:	9301      	str	r3, [sp, #4]
 8002976:	2300      	movs	r3, #0
 8002978:	9300      	str	r3, [sp, #0]
 800297a:	2300      	movs	r3, #0
 800297c:	460a      	mov	r2, r1
 800297e:	4924      	ldr	r1, [pc, #144]	@ (8002a10 <vTaskStartScheduler+0xc0>)
 8002980:	4824      	ldr	r0, [pc, #144]	@ (8002a14 <vTaskStartScheduler+0xc4>)
 8002982:	f7ff fdf1 	bl	8002568 <xTaskCreateStatic>
 8002986:	4603      	mov	r3, r0
 8002988:	4a23      	ldr	r2, [pc, #140]	@ (8002a18 <vTaskStartScheduler+0xc8>)
 800298a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800298c:	4b22      	ldr	r3, [pc, #136]	@ (8002a18 <vTaskStartScheduler+0xc8>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d002      	beq.n	800299a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002994:	2301      	movs	r3, #1
 8002996:	617b      	str	r3, [r7, #20]
 8002998:	e001      	b.n	800299e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800299a:	2300      	movs	r3, #0
 800299c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	d102      	bne.n	80029aa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80029a4:	f000 fd1a 	bl	80033dc <xTimerCreateTimerTask>
 80029a8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	2b01      	cmp	r3, #1
 80029ae:	d11b      	bne.n	80029e8 <vTaskStartScheduler+0x98>
	__asm volatile
 80029b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80029b4:	f383 8811 	msr	BASEPRI, r3
 80029b8:	f3bf 8f6f 	isb	sy
 80029bc:	f3bf 8f4f 	dsb	sy
 80029c0:	613b      	str	r3, [r7, #16]
}
 80029c2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80029c4:	4b15      	ldr	r3, [pc, #84]	@ (8002a1c <vTaskStartScheduler+0xcc>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	3354      	adds	r3, #84	@ 0x54
 80029ca:	4a15      	ldr	r2, [pc, #84]	@ (8002a20 <vTaskStartScheduler+0xd0>)
 80029cc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80029ce:	4b15      	ldr	r3, [pc, #84]	@ (8002a24 <vTaskStartScheduler+0xd4>)
 80029d0:	f04f 32ff 	mov.w	r2, #4294967295
 80029d4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80029d6:	4b14      	ldr	r3, [pc, #80]	@ (8002a28 <vTaskStartScheduler+0xd8>)
 80029d8:	2201      	movs	r2, #1
 80029da:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80029dc:	4b13      	ldr	r3, [pc, #76]	@ (8002a2c <vTaskStartScheduler+0xdc>)
 80029de:	2200      	movs	r2, #0
 80029e0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80029e2:	f001 f8e5 	bl	8003bb0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80029e6:	e00f      	b.n	8002a08 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029ee:	d10b      	bne.n	8002a08 <vTaskStartScheduler+0xb8>
	__asm volatile
 80029f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80029f4:	f383 8811 	msr	BASEPRI, r3
 80029f8:	f3bf 8f6f 	isb	sy
 80029fc:	f3bf 8f4f 	dsb	sy
 8002a00:	60fb      	str	r3, [r7, #12]
}
 8002a02:	bf00      	nop
 8002a04:	bf00      	nop
 8002a06:	e7fd      	b.n	8002a04 <vTaskStartScheduler+0xb4>
}
 8002a08:	bf00      	nop
 8002a0a:	3718      	adds	r7, #24
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}
 8002a10:	0800452c 	.word	0x0800452c
 8002a14:	08003061 	.word	0x08003061
 8002a18:	20000d18 	.word	0x20000d18
 8002a1c:	20000820 	.word	0x20000820
 8002a20:	20000010 	.word	0x20000010
 8002a24:	20000d14 	.word	0x20000d14
 8002a28:	20000d00 	.word	0x20000d00
 8002a2c:	20000cf8 	.word	0x20000cf8

08002a30 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002a30:	b480      	push	{r7}
 8002a32:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8002a34:	4b04      	ldr	r3, [pc, #16]	@ (8002a48 <vTaskSuspendAll+0x18>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	3301      	adds	r3, #1
 8002a3a:	4a03      	ldr	r2, [pc, #12]	@ (8002a48 <vTaskSuspendAll+0x18>)
 8002a3c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8002a3e:	bf00      	nop
 8002a40:	46bd      	mov	sp, r7
 8002a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a46:	4770      	bx	lr
 8002a48:	20000d1c 	.word	0x20000d1c

08002a4c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b084      	sub	sp, #16
 8002a50:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002a52:	2300      	movs	r3, #0
 8002a54:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002a56:	2300      	movs	r3, #0
 8002a58:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002a5a:	4b42      	ldr	r3, [pc, #264]	@ (8002b64 <xTaskResumeAll+0x118>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d10b      	bne.n	8002a7a <xTaskResumeAll+0x2e>
	__asm volatile
 8002a62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a66:	f383 8811 	msr	BASEPRI, r3
 8002a6a:	f3bf 8f6f 	isb	sy
 8002a6e:	f3bf 8f4f 	dsb	sy
 8002a72:	603b      	str	r3, [r7, #0]
}
 8002a74:	bf00      	nop
 8002a76:	bf00      	nop
 8002a78:	e7fd      	b.n	8002a76 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002a7a:	f001 f93d 	bl	8003cf8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002a7e:	4b39      	ldr	r3, [pc, #228]	@ (8002b64 <xTaskResumeAll+0x118>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	3b01      	subs	r3, #1
 8002a84:	4a37      	ldr	r2, [pc, #220]	@ (8002b64 <xTaskResumeAll+0x118>)
 8002a86:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002a88:	4b36      	ldr	r3, [pc, #216]	@ (8002b64 <xTaskResumeAll+0x118>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d162      	bne.n	8002b56 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002a90:	4b35      	ldr	r3, [pc, #212]	@ (8002b68 <xTaskResumeAll+0x11c>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d05e      	beq.n	8002b56 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002a98:	e02f      	b.n	8002afa <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002a9a:	4b34      	ldr	r3, [pc, #208]	@ (8002b6c <xTaskResumeAll+0x120>)
 8002a9c:	68db      	ldr	r3, [r3, #12]
 8002a9e:	68db      	ldr	r3, [r3, #12]
 8002aa0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	3318      	adds	r3, #24
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f7ff f83a 	bl	8001b20 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	3304      	adds	r3, #4
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f7ff f835 	bl	8001b20 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002aba:	4b2d      	ldr	r3, [pc, #180]	@ (8002b70 <xTaskResumeAll+0x124>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	429a      	cmp	r2, r3
 8002ac0:	d903      	bls.n	8002aca <xTaskResumeAll+0x7e>
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ac6:	4a2a      	ldr	r2, [pc, #168]	@ (8002b70 <xTaskResumeAll+0x124>)
 8002ac8:	6013      	str	r3, [r2, #0]
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ace:	4613      	mov	r3, r2
 8002ad0:	009b      	lsls	r3, r3, #2
 8002ad2:	4413      	add	r3, r2
 8002ad4:	009b      	lsls	r3, r3, #2
 8002ad6:	4a27      	ldr	r2, [pc, #156]	@ (8002b74 <xTaskResumeAll+0x128>)
 8002ad8:	441a      	add	r2, r3
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	3304      	adds	r3, #4
 8002ade:	4619      	mov	r1, r3
 8002ae0:	4610      	mov	r0, r2
 8002ae2:	f7fe ffc0 	bl	8001a66 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002aea:	4b23      	ldr	r3, [pc, #140]	@ (8002b78 <xTaskResumeAll+0x12c>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d302      	bcc.n	8002afa <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8002af4:	4b21      	ldr	r3, [pc, #132]	@ (8002b7c <xTaskResumeAll+0x130>)
 8002af6:	2201      	movs	r2, #1
 8002af8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002afa:	4b1c      	ldr	r3, [pc, #112]	@ (8002b6c <xTaskResumeAll+0x120>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d1cb      	bne.n	8002a9a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d001      	beq.n	8002b0c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002b08:	f000 fb66 	bl	80031d8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002b0c:	4b1c      	ldr	r3, [pc, #112]	@ (8002b80 <xTaskResumeAll+0x134>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d010      	beq.n	8002b3a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002b18:	f000 f846 	bl	8002ba8 <xTaskIncrementTick>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d002      	beq.n	8002b28 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8002b22:	4b16      	ldr	r3, [pc, #88]	@ (8002b7c <xTaskResumeAll+0x130>)
 8002b24:	2201      	movs	r2, #1
 8002b26:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	3b01      	subs	r3, #1
 8002b2c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d1f1      	bne.n	8002b18 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8002b34:	4b12      	ldr	r3, [pc, #72]	@ (8002b80 <xTaskResumeAll+0x134>)
 8002b36:	2200      	movs	r2, #0
 8002b38:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002b3a:	4b10      	ldr	r3, [pc, #64]	@ (8002b7c <xTaskResumeAll+0x130>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d009      	beq.n	8002b56 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002b42:	2301      	movs	r3, #1
 8002b44:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002b46:	4b0f      	ldr	r3, [pc, #60]	@ (8002b84 <xTaskResumeAll+0x138>)
 8002b48:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002b4c:	601a      	str	r2, [r3, #0]
 8002b4e:	f3bf 8f4f 	dsb	sy
 8002b52:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002b56:	f001 f901 	bl	8003d5c <vPortExitCritical>

	return xAlreadyYielded;
 8002b5a:	68bb      	ldr	r3, [r7, #8]
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	3710      	adds	r7, #16
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}
 8002b64:	20000d1c 	.word	0x20000d1c
 8002b68:	20000cf4 	.word	0x20000cf4
 8002b6c:	20000cb4 	.word	0x20000cb4
 8002b70:	20000cfc 	.word	0x20000cfc
 8002b74:	20000824 	.word	0x20000824
 8002b78:	20000820 	.word	0x20000820
 8002b7c:	20000d08 	.word	0x20000d08
 8002b80:	20000d04 	.word	0x20000d04
 8002b84:	e000ed04 	.word	0xe000ed04

08002b88 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b083      	sub	sp, #12
 8002b8c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8002b8e:	4b05      	ldr	r3, [pc, #20]	@ (8002ba4 <xTaskGetTickCount+0x1c>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8002b94:	687b      	ldr	r3, [r7, #4]
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	370c      	adds	r7, #12
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr
 8002ba2:	bf00      	nop
 8002ba4:	20000cf8 	.word	0x20000cf8

08002ba8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b086      	sub	sp, #24
 8002bac:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002bb2:	4b4f      	ldr	r3, [pc, #316]	@ (8002cf0 <xTaskIncrementTick+0x148>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	f040 8090 	bne.w	8002cdc <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002bbc:	4b4d      	ldr	r3, [pc, #308]	@ (8002cf4 <xTaskIncrementTick+0x14c>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	3301      	adds	r3, #1
 8002bc2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002bc4:	4a4b      	ldr	r2, [pc, #300]	@ (8002cf4 <xTaskIncrementTick+0x14c>)
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d121      	bne.n	8002c14 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8002bd0:	4b49      	ldr	r3, [pc, #292]	@ (8002cf8 <xTaskIncrementTick+0x150>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d00b      	beq.n	8002bf2 <xTaskIncrementTick+0x4a>
	__asm volatile
 8002bda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bde:	f383 8811 	msr	BASEPRI, r3
 8002be2:	f3bf 8f6f 	isb	sy
 8002be6:	f3bf 8f4f 	dsb	sy
 8002bea:	603b      	str	r3, [r7, #0]
}
 8002bec:	bf00      	nop
 8002bee:	bf00      	nop
 8002bf0:	e7fd      	b.n	8002bee <xTaskIncrementTick+0x46>
 8002bf2:	4b41      	ldr	r3, [pc, #260]	@ (8002cf8 <xTaskIncrementTick+0x150>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	60fb      	str	r3, [r7, #12]
 8002bf8:	4b40      	ldr	r3, [pc, #256]	@ (8002cfc <xTaskIncrementTick+0x154>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a3e      	ldr	r2, [pc, #248]	@ (8002cf8 <xTaskIncrementTick+0x150>)
 8002bfe:	6013      	str	r3, [r2, #0]
 8002c00:	4a3e      	ldr	r2, [pc, #248]	@ (8002cfc <xTaskIncrementTick+0x154>)
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	6013      	str	r3, [r2, #0]
 8002c06:	4b3e      	ldr	r3, [pc, #248]	@ (8002d00 <xTaskIncrementTick+0x158>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	3301      	adds	r3, #1
 8002c0c:	4a3c      	ldr	r2, [pc, #240]	@ (8002d00 <xTaskIncrementTick+0x158>)
 8002c0e:	6013      	str	r3, [r2, #0]
 8002c10:	f000 fae2 	bl	80031d8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002c14:	4b3b      	ldr	r3, [pc, #236]	@ (8002d04 <xTaskIncrementTick+0x15c>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	693a      	ldr	r2, [r7, #16]
 8002c1a:	429a      	cmp	r2, r3
 8002c1c:	d349      	bcc.n	8002cb2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002c1e:	4b36      	ldr	r3, [pc, #216]	@ (8002cf8 <xTaskIncrementTick+0x150>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d104      	bne.n	8002c32 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c28:	4b36      	ldr	r3, [pc, #216]	@ (8002d04 <xTaskIncrementTick+0x15c>)
 8002c2a:	f04f 32ff 	mov.w	r2, #4294967295
 8002c2e:	601a      	str	r2, [r3, #0]
					break;
 8002c30:	e03f      	b.n	8002cb2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002c32:	4b31      	ldr	r3, [pc, #196]	@ (8002cf8 <xTaskIncrementTick+0x150>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	68db      	ldr	r3, [r3, #12]
 8002c38:	68db      	ldr	r3, [r3, #12]
 8002c3a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002c42:	693a      	ldr	r2, [r7, #16]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	429a      	cmp	r2, r3
 8002c48:	d203      	bcs.n	8002c52 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002c4a:	4a2e      	ldr	r2, [pc, #184]	@ (8002d04 <xTaskIncrementTick+0x15c>)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002c50:	e02f      	b.n	8002cb2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	3304      	adds	r3, #4
 8002c56:	4618      	mov	r0, r3
 8002c58:	f7fe ff62 	bl	8001b20 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d004      	beq.n	8002c6e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	3318      	adds	r3, #24
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f7fe ff59 	bl	8001b20 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c72:	4b25      	ldr	r3, [pc, #148]	@ (8002d08 <xTaskIncrementTick+0x160>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	429a      	cmp	r2, r3
 8002c78:	d903      	bls.n	8002c82 <xTaskIncrementTick+0xda>
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c7e:	4a22      	ldr	r2, [pc, #136]	@ (8002d08 <xTaskIncrementTick+0x160>)
 8002c80:	6013      	str	r3, [r2, #0]
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c86:	4613      	mov	r3, r2
 8002c88:	009b      	lsls	r3, r3, #2
 8002c8a:	4413      	add	r3, r2
 8002c8c:	009b      	lsls	r3, r3, #2
 8002c8e:	4a1f      	ldr	r2, [pc, #124]	@ (8002d0c <xTaskIncrementTick+0x164>)
 8002c90:	441a      	add	r2, r3
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	3304      	adds	r3, #4
 8002c96:	4619      	mov	r1, r3
 8002c98:	4610      	mov	r0, r2
 8002c9a:	f7fe fee4 	bl	8001a66 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ca2:	4b1b      	ldr	r3, [pc, #108]	@ (8002d10 <xTaskIncrementTick+0x168>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ca8:	429a      	cmp	r2, r3
 8002caa:	d3b8      	bcc.n	8002c1e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8002cac:	2301      	movs	r3, #1
 8002cae:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002cb0:	e7b5      	b.n	8002c1e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002cb2:	4b17      	ldr	r3, [pc, #92]	@ (8002d10 <xTaskIncrementTick+0x168>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002cb8:	4914      	ldr	r1, [pc, #80]	@ (8002d0c <xTaskIncrementTick+0x164>)
 8002cba:	4613      	mov	r3, r2
 8002cbc:	009b      	lsls	r3, r3, #2
 8002cbe:	4413      	add	r3, r2
 8002cc0:	009b      	lsls	r3, r3, #2
 8002cc2:	440b      	add	r3, r1
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	2b01      	cmp	r3, #1
 8002cc8:	d901      	bls.n	8002cce <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8002cce:	4b11      	ldr	r3, [pc, #68]	@ (8002d14 <xTaskIncrementTick+0x16c>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d007      	beq.n	8002ce6 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	617b      	str	r3, [r7, #20]
 8002cda:	e004      	b.n	8002ce6 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8002cdc:	4b0e      	ldr	r3, [pc, #56]	@ (8002d18 <xTaskIncrementTick+0x170>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	3301      	adds	r3, #1
 8002ce2:	4a0d      	ldr	r2, [pc, #52]	@ (8002d18 <xTaskIncrementTick+0x170>)
 8002ce4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8002ce6:	697b      	ldr	r3, [r7, #20]
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	3718      	adds	r7, #24
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}
 8002cf0:	20000d1c 	.word	0x20000d1c
 8002cf4:	20000cf8 	.word	0x20000cf8
 8002cf8:	20000cac 	.word	0x20000cac
 8002cfc:	20000cb0 	.word	0x20000cb0
 8002d00:	20000d0c 	.word	0x20000d0c
 8002d04:	20000d14 	.word	0x20000d14
 8002d08:	20000cfc 	.word	0x20000cfc
 8002d0c:	20000824 	.word	0x20000824
 8002d10:	20000820 	.word	0x20000820
 8002d14:	20000d08 	.word	0x20000d08
 8002d18:	20000d04 	.word	0x20000d04

08002d1c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b085      	sub	sp, #20
 8002d20:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002d22:	4b2b      	ldr	r3, [pc, #172]	@ (8002dd0 <vTaskSwitchContext+0xb4>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d003      	beq.n	8002d32 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002d2a:	4b2a      	ldr	r3, [pc, #168]	@ (8002dd4 <vTaskSwitchContext+0xb8>)
 8002d2c:	2201      	movs	r2, #1
 8002d2e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002d30:	e047      	b.n	8002dc2 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8002d32:	4b28      	ldr	r3, [pc, #160]	@ (8002dd4 <vTaskSwitchContext+0xb8>)
 8002d34:	2200      	movs	r2, #0
 8002d36:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002d38:	4b27      	ldr	r3, [pc, #156]	@ (8002dd8 <vTaskSwitchContext+0xbc>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	60fb      	str	r3, [r7, #12]
 8002d3e:	e011      	b.n	8002d64 <vTaskSwitchContext+0x48>
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d10b      	bne.n	8002d5e <vTaskSwitchContext+0x42>
	__asm volatile
 8002d46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d4a:	f383 8811 	msr	BASEPRI, r3
 8002d4e:	f3bf 8f6f 	isb	sy
 8002d52:	f3bf 8f4f 	dsb	sy
 8002d56:	607b      	str	r3, [r7, #4]
}
 8002d58:	bf00      	nop
 8002d5a:	bf00      	nop
 8002d5c:	e7fd      	b.n	8002d5a <vTaskSwitchContext+0x3e>
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	3b01      	subs	r3, #1
 8002d62:	60fb      	str	r3, [r7, #12]
 8002d64:	491d      	ldr	r1, [pc, #116]	@ (8002ddc <vTaskSwitchContext+0xc0>)
 8002d66:	68fa      	ldr	r2, [r7, #12]
 8002d68:	4613      	mov	r3, r2
 8002d6a:	009b      	lsls	r3, r3, #2
 8002d6c:	4413      	add	r3, r2
 8002d6e:	009b      	lsls	r3, r3, #2
 8002d70:	440b      	add	r3, r1
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d0e3      	beq.n	8002d40 <vTaskSwitchContext+0x24>
 8002d78:	68fa      	ldr	r2, [r7, #12]
 8002d7a:	4613      	mov	r3, r2
 8002d7c:	009b      	lsls	r3, r3, #2
 8002d7e:	4413      	add	r3, r2
 8002d80:	009b      	lsls	r3, r3, #2
 8002d82:	4a16      	ldr	r2, [pc, #88]	@ (8002ddc <vTaskSwitchContext+0xc0>)
 8002d84:	4413      	add	r3, r2
 8002d86:	60bb      	str	r3, [r7, #8]
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	685a      	ldr	r2, [r3, #4]
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	605a      	str	r2, [r3, #4]
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	685a      	ldr	r2, [r3, #4]
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	3308      	adds	r3, #8
 8002d9a:	429a      	cmp	r2, r3
 8002d9c:	d104      	bne.n	8002da8 <vTaskSwitchContext+0x8c>
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	685a      	ldr	r2, [r3, #4]
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	605a      	str	r2, [r3, #4]
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	68db      	ldr	r3, [r3, #12]
 8002dae:	4a0c      	ldr	r2, [pc, #48]	@ (8002de0 <vTaskSwitchContext+0xc4>)
 8002db0:	6013      	str	r3, [r2, #0]
 8002db2:	4a09      	ldr	r2, [pc, #36]	@ (8002dd8 <vTaskSwitchContext+0xbc>)
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8002db8:	4b09      	ldr	r3, [pc, #36]	@ (8002de0 <vTaskSwitchContext+0xc4>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	3354      	adds	r3, #84	@ 0x54
 8002dbe:	4a09      	ldr	r2, [pc, #36]	@ (8002de4 <vTaskSwitchContext+0xc8>)
 8002dc0:	6013      	str	r3, [r2, #0]
}
 8002dc2:	bf00      	nop
 8002dc4:	3714      	adds	r7, #20
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dcc:	4770      	bx	lr
 8002dce:	bf00      	nop
 8002dd0:	20000d1c 	.word	0x20000d1c
 8002dd4:	20000d08 	.word	0x20000d08
 8002dd8:	20000cfc 	.word	0x20000cfc
 8002ddc:	20000824 	.word	0x20000824
 8002de0:	20000820 	.word	0x20000820
 8002de4:	20000010 	.word	0x20000010

08002de8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b084      	sub	sp, #16
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
 8002df0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d10b      	bne.n	8002e10 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8002df8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002dfc:	f383 8811 	msr	BASEPRI, r3
 8002e00:	f3bf 8f6f 	isb	sy
 8002e04:	f3bf 8f4f 	dsb	sy
 8002e08:	60fb      	str	r3, [r7, #12]
}
 8002e0a:	bf00      	nop
 8002e0c:	bf00      	nop
 8002e0e:	e7fd      	b.n	8002e0c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002e10:	4b07      	ldr	r3, [pc, #28]	@ (8002e30 <vTaskPlaceOnEventList+0x48>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	3318      	adds	r3, #24
 8002e16:	4619      	mov	r1, r3
 8002e18:	6878      	ldr	r0, [r7, #4]
 8002e1a:	f7fe fe48 	bl	8001aae <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002e1e:	2101      	movs	r1, #1
 8002e20:	6838      	ldr	r0, [r7, #0]
 8002e22:	f000 fa87 	bl	8003334 <prvAddCurrentTaskToDelayedList>
}
 8002e26:	bf00      	nop
 8002e28:	3710      	adds	r7, #16
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}
 8002e2e:	bf00      	nop
 8002e30:	20000820 	.word	0x20000820

08002e34 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b086      	sub	sp, #24
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	60f8      	str	r0, [r7, #12]
 8002e3c:	60b9      	str	r1, [r7, #8]
 8002e3e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d10b      	bne.n	8002e5e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8002e46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e4a:	f383 8811 	msr	BASEPRI, r3
 8002e4e:	f3bf 8f6f 	isb	sy
 8002e52:	f3bf 8f4f 	dsb	sy
 8002e56:	617b      	str	r3, [r7, #20]
}
 8002e58:	bf00      	nop
 8002e5a:	bf00      	nop
 8002e5c:	e7fd      	b.n	8002e5a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002e5e:	4b0a      	ldr	r3, [pc, #40]	@ (8002e88 <vTaskPlaceOnEventListRestricted+0x54>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	3318      	adds	r3, #24
 8002e64:	4619      	mov	r1, r3
 8002e66:	68f8      	ldr	r0, [r7, #12]
 8002e68:	f7fe fdfd 	bl	8001a66 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d002      	beq.n	8002e78 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8002e72:	f04f 33ff 	mov.w	r3, #4294967295
 8002e76:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8002e78:	6879      	ldr	r1, [r7, #4]
 8002e7a:	68b8      	ldr	r0, [r7, #8]
 8002e7c:	f000 fa5a 	bl	8003334 <prvAddCurrentTaskToDelayedList>
	}
 8002e80:	bf00      	nop
 8002e82:	3718      	adds	r7, #24
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}
 8002e88:	20000820 	.word	0x20000820

08002e8c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b086      	sub	sp, #24
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	68db      	ldr	r3, [r3, #12]
 8002e98:	68db      	ldr	r3, [r3, #12]
 8002e9a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d10b      	bne.n	8002eba <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8002ea2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ea6:	f383 8811 	msr	BASEPRI, r3
 8002eaa:	f3bf 8f6f 	isb	sy
 8002eae:	f3bf 8f4f 	dsb	sy
 8002eb2:	60fb      	str	r3, [r7, #12]
}
 8002eb4:	bf00      	nop
 8002eb6:	bf00      	nop
 8002eb8:	e7fd      	b.n	8002eb6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	3318      	adds	r3, #24
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f7fe fe2e 	bl	8001b20 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002ec4:	4b1d      	ldr	r3, [pc, #116]	@ (8002f3c <xTaskRemoveFromEventList+0xb0>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d11d      	bne.n	8002f08 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8002ecc:	693b      	ldr	r3, [r7, #16]
 8002ece:	3304      	adds	r3, #4
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f7fe fe25 	bl	8001b20 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002eda:	4b19      	ldr	r3, [pc, #100]	@ (8002f40 <xTaskRemoveFromEventList+0xb4>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	429a      	cmp	r2, r3
 8002ee0:	d903      	bls.n	8002eea <xTaskRemoveFromEventList+0x5e>
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ee6:	4a16      	ldr	r2, [pc, #88]	@ (8002f40 <xTaskRemoveFromEventList+0xb4>)
 8002ee8:	6013      	str	r3, [r2, #0]
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002eee:	4613      	mov	r3, r2
 8002ef0:	009b      	lsls	r3, r3, #2
 8002ef2:	4413      	add	r3, r2
 8002ef4:	009b      	lsls	r3, r3, #2
 8002ef6:	4a13      	ldr	r2, [pc, #76]	@ (8002f44 <xTaskRemoveFromEventList+0xb8>)
 8002ef8:	441a      	add	r2, r3
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	3304      	adds	r3, #4
 8002efe:	4619      	mov	r1, r3
 8002f00:	4610      	mov	r0, r2
 8002f02:	f7fe fdb0 	bl	8001a66 <vListInsertEnd>
 8002f06:	e005      	b.n	8002f14 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	3318      	adds	r3, #24
 8002f0c:	4619      	mov	r1, r3
 8002f0e:	480e      	ldr	r0, [pc, #56]	@ (8002f48 <xTaskRemoveFromEventList+0xbc>)
 8002f10:	f7fe fda9 	bl	8001a66 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f18:	4b0c      	ldr	r3, [pc, #48]	@ (8002f4c <xTaskRemoveFromEventList+0xc0>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f1e:	429a      	cmp	r2, r3
 8002f20:	d905      	bls.n	8002f2e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8002f22:	2301      	movs	r3, #1
 8002f24:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8002f26:	4b0a      	ldr	r3, [pc, #40]	@ (8002f50 <xTaskRemoveFromEventList+0xc4>)
 8002f28:	2201      	movs	r2, #1
 8002f2a:	601a      	str	r2, [r3, #0]
 8002f2c:	e001      	b.n	8002f32 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8002f32:	697b      	ldr	r3, [r7, #20]
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	3718      	adds	r7, #24
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}
 8002f3c:	20000d1c 	.word	0x20000d1c
 8002f40:	20000cfc 	.word	0x20000cfc
 8002f44:	20000824 	.word	0x20000824
 8002f48:	20000cb4 	.word	0x20000cb4
 8002f4c:	20000820 	.word	0x20000820
 8002f50:	20000d08 	.word	0x20000d08

08002f54 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002f54:	b480      	push	{r7}
 8002f56:	b083      	sub	sp, #12
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002f5c:	4b06      	ldr	r3, [pc, #24]	@ (8002f78 <vTaskInternalSetTimeOutState+0x24>)
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8002f64:	4b05      	ldr	r3, [pc, #20]	@ (8002f7c <vTaskInternalSetTimeOutState+0x28>)
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	605a      	str	r2, [r3, #4]
}
 8002f6c:	bf00      	nop
 8002f6e:	370c      	adds	r7, #12
 8002f70:	46bd      	mov	sp, r7
 8002f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f76:	4770      	bx	lr
 8002f78:	20000d0c 	.word	0x20000d0c
 8002f7c:	20000cf8 	.word	0x20000cf8

08002f80 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b088      	sub	sp, #32
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
 8002f88:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d10b      	bne.n	8002fa8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8002f90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f94:	f383 8811 	msr	BASEPRI, r3
 8002f98:	f3bf 8f6f 	isb	sy
 8002f9c:	f3bf 8f4f 	dsb	sy
 8002fa0:	613b      	str	r3, [r7, #16]
}
 8002fa2:	bf00      	nop
 8002fa4:	bf00      	nop
 8002fa6:	e7fd      	b.n	8002fa4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d10b      	bne.n	8002fc6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8002fae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fb2:	f383 8811 	msr	BASEPRI, r3
 8002fb6:	f3bf 8f6f 	isb	sy
 8002fba:	f3bf 8f4f 	dsb	sy
 8002fbe:	60fb      	str	r3, [r7, #12]
}
 8002fc0:	bf00      	nop
 8002fc2:	bf00      	nop
 8002fc4:	e7fd      	b.n	8002fc2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8002fc6:	f000 fe97 	bl	8003cf8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8002fca:	4b1d      	ldr	r3, [pc, #116]	@ (8003040 <xTaskCheckForTimeOut+0xc0>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	69ba      	ldr	r2, [r7, #24]
 8002fd6:	1ad3      	subs	r3, r2, r3
 8002fd8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fe2:	d102      	bne.n	8002fea <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	61fb      	str	r3, [r7, #28]
 8002fe8:	e023      	b.n	8003032 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	4b15      	ldr	r3, [pc, #84]	@ (8003044 <xTaskCheckForTimeOut+0xc4>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	429a      	cmp	r2, r3
 8002ff4:	d007      	beq.n	8003006 <xTaskCheckForTimeOut+0x86>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	69ba      	ldr	r2, [r7, #24]
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	d302      	bcc.n	8003006 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003000:	2301      	movs	r3, #1
 8003002:	61fb      	str	r3, [r7, #28]
 8003004:	e015      	b.n	8003032 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	697a      	ldr	r2, [r7, #20]
 800300c:	429a      	cmp	r2, r3
 800300e:	d20b      	bcs.n	8003028 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	681a      	ldr	r2, [r3, #0]
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	1ad2      	subs	r2, r2, r3
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800301c:	6878      	ldr	r0, [r7, #4]
 800301e:	f7ff ff99 	bl	8002f54 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003022:	2300      	movs	r3, #0
 8003024:	61fb      	str	r3, [r7, #28]
 8003026:	e004      	b.n	8003032 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	2200      	movs	r2, #0
 800302c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800302e:	2301      	movs	r3, #1
 8003030:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003032:	f000 fe93 	bl	8003d5c <vPortExitCritical>

	return xReturn;
 8003036:	69fb      	ldr	r3, [r7, #28]
}
 8003038:	4618      	mov	r0, r3
 800303a:	3720      	adds	r7, #32
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}
 8003040:	20000cf8 	.word	0x20000cf8
 8003044:	20000d0c 	.word	0x20000d0c

08003048 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003048:	b480      	push	{r7}
 800304a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800304c:	4b03      	ldr	r3, [pc, #12]	@ (800305c <vTaskMissedYield+0x14>)
 800304e:	2201      	movs	r2, #1
 8003050:	601a      	str	r2, [r3, #0]
}
 8003052:	bf00      	nop
 8003054:	46bd      	mov	sp, r7
 8003056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305a:	4770      	bx	lr
 800305c:	20000d08 	.word	0x20000d08

08003060 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b082      	sub	sp, #8
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003068:	f000 f852 	bl	8003110 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800306c:	4b06      	ldr	r3, [pc, #24]	@ (8003088 <prvIdleTask+0x28>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	2b01      	cmp	r3, #1
 8003072:	d9f9      	bls.n	8003068 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003074:	4b05      	ldr	r3, [pc, #20]	@ (800308c <prvIdleTask+0x2c>)
 8003076:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800307a:	601a      	str	r2, [r3, #0]
 800307c:	f3bf 8f4f 	dsb	sy
 8003080:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003084:	e7f0      	b.n	8003068 <prvIdleTask+0x8>
 8003086:	bf00      	nop
 8003088:	20000824 	.word	0x20000824
 800308c:	e000ed04 	.word	0xe000ed04

08003090 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b082      	sub	sp, #8
 8003094:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003096:	2300      	movs	r3, #0
 8003098:	607b      	str	r3, [r7, #4]
 800309a:	e00c      	b.n	80030b6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800309c:	687a      	ldr	r2, [r7, #4]
 800309e:	4613      	mov	r3, r2
 80030a0:	009b      	lsls	r3, r3, #2
 80030a2:	4413      	add	r3, r2
 80030a4:	009b      	lsls	r3, r3, #2
 80030a6:	4a12      	ldr	r2, [pc, #72]	@ (80030f0 <prvInitialiseTaskLists+0x60>)
 80030a8:	4413      	add	r3, r2
 80030aa:	4618      	mov	r0, r3
 80030ac:	f7fe fcae 	bl	8001a0c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	3301      	adds	r3, #1
 80030b4:	607b      	str	r3, [r7, #4]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2b37      	cmp	r3, #55	@ 0x37
 80030ba:	d9ef      	bls.n	800309c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80030bc:	480d      	ldr	r0, [pc, #52]	@ (80030f4 <prvInitialiseTaskLists+0x64>)
 80030be:	f7fe fca5 	bl	8001a0c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80030c2:	480d      	ldr	r0, [pc, #52]	@ (80030f8 <prvInitialiseTaskLists+0x68>)
 80030c4:	f7fe fca2 	bl	8001a0c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80030c8:	480c      	ldr	r0, [pc, #48]	@ (80030fc <prvInitialiseTaskLists+0x6c>)
 80030ca:	f7fe fc9f 	bl	8001a0c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80030ce:	480c      	ldr	r0, [pc, #48]	@ (8003100 <prvInitialiseTaskLists+0x70>)
 80030d0:	f7fe fc9c 	bl	8001a0c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80030d4:	480b      	ldr	r0, [pc, #44]	@ (8003104 <prvInitialiseTaskLists+0x74>)
 80030d6:	f7fe fc99 	bl	8001a0c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80030da:	4b0b      	ldr	r3, [pc, #44]	@ (8003108 <prvInitialiseTaskLists+0x78>)
 80030dc:	4a05      	ldr	r2, [pc, #20]	@ (80030f4 <prvInitialiseTaskLists+0x64>)
 80030de:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80030e0:	4b0a      	ldr	r3, [pc, #40]	@ (800310c <prvInitialiseTaskLists+0x7c>)
 80030e2:	4a05      	ldr	r2, [pc, #20]	@ (80030f8 <prvInitialiseTaskLists+0x68>)
 80030e4:	601a      	str	r2, [r3, #0]
}
 80030e6:	bf00      	nop
 80030e8:	3708      	adds	r7, #8
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	bf00      	nop
 80030f0:	20000824 	.word	0x20000824
 80030f4:	20000c84 	.word	0x20000c84
 80030f8:	20000c98 	.word	0x20000c98
 80030fc:	20000cb4 	.word	0x20000cb4
 8003100:	20000cc8 	.word	0x20000cc8
 8003104:	20000ce0 	.word	0x20000ce0
 8003108:	20000cac 	.word	0x20000cac
 800310c:	20000cb0 	.word	0x20000cb0

08003110 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b082      	sub	sp, #8
 8003114:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003116:	e019      	b.n	800314c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003118:	f000 fdee 	bl	8003cf8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800311c:	4b10      	ldr	r3, [pc, #64]	@ (8003160 <prvCheckTasksWaitingTermination+0x50>)
 800311e:	68db      	ldr	r3, [r3, #12]
 8003120:	68db      	ldr	r3, [r3, #12]
 8003122:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	3304      	adds	r3, #4
 8003128:	4618      	mov	r0, r3
 800312a:	f7fe fcf9 	bl	8001b20 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800312e:	4b0d      	ldr	r3, [pc, #52]	@ (8003164 <prvCheckTasksWaitingTermination+0x54>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	3b01      	subs	r3, #1
 8003134:	4a0b      	ldr	r2, [pc, #44]	@ (8003164 <prvCheckTasksWaitingTermination+0x54>)
 8003136:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003138:	4b0b      	ldr	r3, [pc, #44]	@ (8003168 <prvCheckTasksWaitingTermination+0x58>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	3b01      	subs	r3, #1
 800313e:	4a0a      	ldr	r2, [pc, #40]	@ (8003168 <prvCheckTasksWaitingTermination+0x58>)
 8003140:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003142:	f000 fe0b 	bl	8003d5c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	f000 f810 	bl	800316c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800314c:	4b06      	ldr	r3, [pc, #24]	@ (8003168 <prvCheckTasksWaitingTermination+0x58>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d1e1      	bne.n	8003118 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003154:	bf00      	nop
 8003156:	bf00      	nop
 8003158:	3708      	adds	r7, #8
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
 800315e:	bf00      	nop
 8003160:	20000cc8 	.word	0x20000cc8
 8003164:	20000cf4 	.word	0x20000cf4
 8003168:	20000cdc 	.word	0x20000cdc

0800316c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800316c:	b580      	push	{r7, lr}
 800316e:	b084      	sub	sp, #16
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	3354      	adds	r3, #84	@ 0x54
 8003178:	4618      	mov	r0, r3
 800317a:	f001 f8d5 	bl	8004328 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8003184:	2b00      	cmp	r3, #0
 8003186:	d108      	bne.n	800319a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800318c:	4618      	mov	r0, r3
 800318e:	f000 ffa3 	bl	80040d8 <vPortFree>
				vPortFree( pxTCB );
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	f000 ffa0 	bl	80040d8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003198:	e019      	b.n	80031ce <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	d103      	bne.n	80031ac <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80031a4:	6878      	ldr	r0, [r7, #4]
 80031a6:	f000 ff97 	bl	80040d8 <vPortFree>
	}
 80031aa:	e010      	b.n	80031ce <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80031b2:	2b02      	cmp	r3, #2
 80031b4:	d00b      	beq.n	80031ce <prvDeleteTCB+0x62>
	__asm volatile
 80031b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031ba:	f383 8811 	msr	BASEPRI, r3
 80031be:	f3bf 8f6f 	isb	sy
 80031c2:	f3bf 8f4f 	dsb	sy
 80031c6:	60fb      	str	r3, [r7, #12]
}
 80031c8:	bf00      	nop
 80031ca:	bf00      	nop
 80031cc:	e7fd      	b.n	80031ca <prvDeleteTCB+0x5e>
	}
 80031ce:	bf00      	nop
 80031d0:	3710      	adds	r7, #16
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}
	...

080031d8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80031d8:	b480      	push	{r7}
 80031da:	b083      	sub	sp, #12
 80031dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80031de:	4b0c      	ldr	r3, [pc, #48]	@ (8003210 <prvResetNextTaskUnblockTime+0x38>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d104      	bne.n	80031f2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80031e8:	4b0a      	ldr	r3, [pc, #40]	@ (8003214 <prvResetNextTaskUnblockTime+0x3c>)
 80031ea:	f04f 32ff 	mov.w	r2, #4294967295
 80031ee:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80031f0:	e008      	b.n	8003204 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80031f2:	4b07      	ldr	r3, [pc, #28]	@ (8003210 <prvResetNextTaskUnblockTime+0x38>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	68db      	ldr	r3, [r3, #12]
 80031f8:	68db      	ldr	r3, [r3, #12]
 80031fa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	4a04      	ldr	r2, [pc, #16]	@ (8003214 <prvResetNextTaskUnblockTime+0x3c>)
 8003202:	6013      	str	r3, [r2, #0]
}
 8003204:	bf00      	nop
 8003206:	370c      	adds	r7, #12
 8003208:	46bd      	mov	sp, r7
 800320a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320e:	4770      	bx	lr
 8003210:	20000cac 	.word	0x20000cac
 8003214:	20000d14 	.word	0x20000d14

08003218 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003218:	b480      	push	{r7}
 800321a:	b083      	sub	sp, #12
 800321c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800321e:	4b0b      	ldr	r3, [pc, #44]	@ (800324c <xTaskGetSchedulerState+0x34>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d102      	bne.n	800322c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003226:	2301      	movs	r3, #1
 8003228:	607b      	str	r3, [r7, #4]
 800322a:	e008      	b.n	800323e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800322c:	4b08      	ldr	r3, [pc, #32]	@ (8003250 <xTaskGetSchedulerState+0x38>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d102      	bne.n	800323a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003234:	2302      	movs	r3, #2
 8003236:	607b      	str	r3, [r7, #4]
 8003238:	e001      	b.n	800323e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800323a:	2300      	movs	r3, #0
 800323c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800323e:	687b      	ldr	r3, [r7, #4]
	}
 8003240:	4618      	mov	r0, r3
 8003242:	370c      	adds	r7, #12
 8003244:	46bd      	mov	sp, r7
 8003246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324a:	4770      	bx	lr
 800324c:	20000d00 	.word	0x20000d00
 8003250:	20000d1c 	.word	0x20000d1c

08003254 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003254:	b580      	push	{r7, lr}
 8003256:	b086      	sub	sp, #24
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003260:	2300      	movs	r3, #0
 8003262:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d058      	beq.n	800331c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800326a:	4b2f      	ldr	r3, [pc, #188]	@ (8003328 <xTaskPriorityDisinherit+0xd4>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	693a      	ldr	r2, [r7, #16]
 8003270:	429a      	cmp	r2, r3
 8003272:	d00b      	beq.n	800328c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8003274:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003278:	f383 8811 	msr	BASEPRI, r3
 800327c:	f3bf 8f6f 	isb	sy
 8003280:	f3bf 8f4f 	dsb	sy
 8003284:	60fb      	str	r3, [r7, #12]
}
 8003286:	bf00      	nop
 8003288:	bf00      	nop
 800328a:	e7fd      	b.n	8003288 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003290:	2b00      	cmp	r3, #0
 8003292:	d10b      	bne.n	80032ac <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8003294:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003298:	f383 8811 	msr	BASEPRI, r3
 800329c:	f3bf 8f6f 	isb	sy
 80032a0:	f3bf 8f4f 	dsb	sy
 80032a4:	60bb      	str	r3, [r7, #8]
}
 80032a6:	bf00      	nop
 80032a8:	bf00      	nop
 80032aa:	e7fd      	b.n	80032a8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032b0:	1e5a      	subs	r2, r3, #1
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80032ba:	693b      	ldr	r3, [r7, #16]
 80032bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032be:	429a      	cmp	r2, r3
 80032c0:	d02c      	beq.n	800331c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d128      	bne.n	800331c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	3304      	adds	r3, #4
 80032ce:	4618      	mov	r0, r3
 80032d0:	f7fe fc26 	bl	8001b20 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032e0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80032e8:	693b      	ldr	r3, [r7, #16]
 80032ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80032ec:	4b0f      	ldr	r3, [pc, #60]	@ (800332c <xTaskPriorityDisinherit+0xd8>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d903      	bls.n	80032fc <xTaskPriorityDisinherit+0xa8>
 80032f4:	693b      	ldr	r3, [r7, #16]
 80032f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032f8:	4a0c      	ldr	r2, [pc, #48]	@ (800332c <xTaskPriorityDisinherit+0xd8>)
 80032fa:	6013      	str	r3, [r2, #0]
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003300:	4613      	mov	r3, r2
 8003302:	009b      	lsls	r3, r3, #2
 8003304:	4413      	add	r3, r2
 8003306:	009b      	lsls	r3, r3, #2
 8003308:	4a09      	ldr	r2, [pc, #36]	@ (8003330 <xTaskPriorityDisinherit+0xdc>)
 800330a:	441a      	add	r2, r3
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	3304      	adds	r3, #4
 8003310:	4619      	mov	r1, r3
 8003312:	4610      	mov	r0, r2
 8003314:	f7fe fba7 	bl	8001a66 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003318:	2301      	movs	r3, #1
 800331a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800331c:	697b      	ldr	r3, [r7, #20]
	}
 800331e:	4618      	mov	r0, r3
 8003320:	3718      	adds	r7, #24
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}
 8003326:	bf00      	nop
 8003328:	20000820 	.word	0x20000820
 800332c:	20000cfc 	.word	0x20000cfc
 8003330:	20000824 	.word	0x20000824

08003334 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b084      	sub	sp, #16
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
 800333c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800333e:	4b21      	ldr	r3, [pc, #132]	@ (80033c4 <prvAddCurrentTaskToDelayedList+0x90>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003344:	4b20      	ldr	r3, [pc, #128]	@ (80033c8 <prvAddCurrentTaskToDelayedList+0x94>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	3304      	adds	r3, #4
 800334a:	4618      	mov	r0, r3
 800334c:	f7fe fbe8 	bl	8001b20 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003356:	d10a      	bne.n	800336e <prvAddCurrentTaskToDelayedList+0x3a>
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d007      	beq.n	800336e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800335e:	4b1a      	ldr	r3, [pc, #104]	@ (80033c8 <prvAddCurrentTaskToDelayedList+0x94>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	3304      	adds	r3, #4
 8003364:	4619      	mov	r1, r3
 8003366:	4819      	ldr	r0, [pc, #100]	@ (80033cc <prvAddCurrentTaskToDelayedList+0x98>)
 8003368:	f7fe fb7d 	bl	8001a66 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800336c:	e026      	b.n	80033bc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800336e:	68fa      	ldr	r2, [r7, #12]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	4413      	add	r3, r2
 8003374:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003376:	4b14      	ldr	r3, [pc, #80]	@ (80033c8 <prvAddCurrentTaskToDelayedList+0x94>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	68ba      	ldr	r2, [r7, #8]
 800337c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800337e:	68ba      	ldr	r2, [r7, #8]
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	429a      	cmp	r2, r3
 8003384:	d209      	bcs.n	800339a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003386:	4b12      	ldr	r3, [pc, #72]	@ (80033d0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8003388:	681a      	ldr	r2, [r3, #0]
 800338a:	4b0f      	ldr	r3, [pc, #60]	@ (80033c8 <prvAddCurrentTaskToDelayedList+0x94>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	3304      	adds	r3, #4
 8003390:	4619      	mov	r1, r3
 8003392:	4610      	mov	r0, r2
 8003394:	f7fe fb8b 	bl	8001aae <vListInsert>
}
 8003398:	e010      	b.n	80033bc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800339a:	4b0e      	ldr	r3, [pc, #56]	@ (80033d4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	4b0a      	ldr	r3, [pc, #40]	@ (80033c8 <prvAddCurrentTaskToDelayedList+0x94>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	3304      	adds	r3, #4
 80033a4:	4619      	mov	r1, r3
 80033a6:	4610      	mov	r0, r2
 80033a8:	f7fe fb81 	bl	8001aae <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80033ac:	4b0a      	ldr	r3, [pc, #40]	@ (80033d8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	68ba      	ldr	r2, [r7, #8]
 80033b2:	429a      	cmp	r2, r3
 80033b4:	d202      	bcs.n	80033bc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80033b6:	4a08      	ldr	r2, [pc, #32]	@ (80033d8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	6013      	str	r3, [r2, #0]
}
 80033bc:	bf00      	nop
 80033be:	3710      	adds	r7, #16
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bd80      	pop	{r7, pc}
 80033c4:	20000cf8 	.word	0x20000cf8
 80033c8:	20000820 	.word	0x20000820
 80033cc:	20000ce0 	.word	0x20000ce0
 80033d0:	20000cb0 	.word	0x20000cb0
 80033d4:	20000cac 	.word	0x20000cac
 80033d8:	20000d14 	.word	0x20000d14

080033dc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b08a      	sub	sp, #40	@ 0x28
 80033e0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80033e2:	2300      	movs	r3, #0
 80033e4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80033e6:	f000 fb13 	bl	8003a10 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80033ea:	4b1d      	ldr	r3, [pc, #116]	@ (8003460 <xTimerCreateTimerTask+0x84>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d021      	beq.n	8003436 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80033f2:	2300      	movs	r3, #0
 80033f4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80033f6:	2300      	movs	r3, #0
 80033f8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80033fa:	1d3a      	adds	r2, r7, #4
 80033fc:	f107 0108 	add.w	r1, r7, #8
 8003400:	f107 030c 	add.w	r3, r7, #12
 8003404:	4618      	mov	r0, r3
 8003406:	f7fe fae7 	bl	80019d8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800340a:	6879      	ldr	r1, [r7, #4]
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	68fa      	ldr	r2, [r7, #12]
 8003410:	9202      	str	r2, [sp, #8]
 8003412:	9301      	str	r3, [sp, #4]
 8003414:	2302      	movs	r3, #2
 8003416:	9300      	str	r3, [sp, #0]
 8003418:	2300      	movs	r3, #0
 800341a:	460a      	mov	r2, r1
 800341c:	4911      	ldr	r1, [pc, #68]	@ (8003464 <xTimerCreateTimerTask+0x88>)
 800341e:	4812      	ldr	r0, [pc, #72]	@ (8003468 <xTimerCreateTimerTask+0x8c>)
 8003420:	f7ff f8a2 	bl	8002568 <xTaskCreateStatic>
 8003424:	4603      	mov	r3, r0
 8003426:	4a11      	ldr	r2, [pc, #68]	@ (800346c <xTimerCreateTimerTask+0x90>)
 8003428:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800342a:	4b10      	ldr	r3, [pc, #64]	@ (800346c <xTimerCreateTimerTask+0x90>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d001      	beq.n	8003436 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8003432:	2301      	movs	r3, #1
 8003434:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d10b      	bne.n	8003454 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800343c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003440:	f383 8811 	msr	BASEPRI, r3
 8003444:	f3bf 8f6f 	isb	sy
 8003448:	f3bf 8f4f 	dsb	sy
 800344c:	613b      	str	r3, [r7, #16]
}
 800344e:	bf00      	nop
 8003450:	bf00      	nop
 8003452:	e7fd      	b.n	8003450 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8003454:	697b      	ldr	r3, [r7, #20]
}
 8003456:	4618      	mov	r0, r3
 8003458:	3718      	adds	r7, #24
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}
 800345e:	bf00      	nop
 8003460:	20000d50 	.word	0x20000d50
 8003464:	08004534 	.word	0x08004534
 8003468:	080035a9 	.word	0x080035a9
 800346c:	20000d54 	.word	0x20000d54

08003470 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b08a      	sub	sp, #40	@ 0x28
 8003474:	af00      	add	r7, sp, #0
 8003476:	60f8      	str	r0, [r7, #12]
 8003478:	60b9      	str	r1, [r7, #8]
 800347a:	607a      	str	r2, [r7, #4]
 800347c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800347e:	2300      	movs	r3, #0
 8003480:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d10b      	bne.n	80034a0 <xTimerGenericCommand+0x30>
	__asm volatile
 8003488:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800348c:	f383 8811 	msr	BASEPRI, r3
 8003490:	f3bf 8f6f 	isb	sy
 8003494:	f3bf 8f4f 	dsb	sy
 8003498:	623b      	str	r3, [r7, #32]
}
 800349a:	bf00      	nop
 800349c:	bf00      	nop
 800349e:	e7fd      	b.n	800349c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80034a0:	4b19      	ldr	r3, [pc, #100]	@ (8003508 <xTimerGenericCommand+0x98>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d02a      	beq.n	80034fe <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	2b05      	cmp	r3, #5
 80034b8:	dc18      	bgt.n	80034ec <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80034ba:	f7ff fead 	bl	8003218 <xTaskGetSchedulerState>
 80034be:	4603      	mov	r3, r0
 80034c0:	2b02      	cmp	r3, #2
 80034c2:	d109      	bne.n	80034d8 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80034c4:	4b10      	ldr	r3, [pc, #64]	@ (8003508 <xTimerGenericCommand+0x98>)
 80034c6:	6818      	ldr	r0, [r3, #0]
 80034c8:	f107 0110 	add.w	r1, r7, #16
 80034cc:	2300      	movs	r3, #0
 80034ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80034d0:	f7fe fc5a 	bl	8001d88 <xQueueGenericSend>
 80034d4:	6278      	str	r0, [r7, #36]	@ 0x24
 80034d6:	e012      	b.n	80034fe <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80034d8:	4b0b      	ldr	r3, [pc, #44]	@ (8003508 <xTimerGenericCommand+0x98>)
 80034da:	6818      	ldr	r0, [r3, #0]
 80034dc:	f107 0110 	add.w	r1, r7, #16
 80034e0:	2300      	movs	r3, #0
 80034e2:	2200      	movs	r2, #0
 80034e4:	f7fe fc50 	bl	8001d88 <xQueueGenericSend>
 80034e8:	6278      	str	r0, [r7, #36]	@ 0x24
 80034ea:	e008      	b.n	80034fe <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80034ec:	4b06      	ldr	r3, [pc, #24]	@ (8003508 <xTimerGenericCommand+0x98>)
 80034ee:	6818      	ldr	r0, [r3, #0]
 80034f0:	f107 0110 	add.w	r1, r7, #16
 80034f4:	2300      	movs	r3, #0
 80034f6:	683a      	ldr	r2, [r7, #0]
 80034f8:	f7fe fd48 	bl	8001f8c <xQueueGenericSendFromISR>
 80034fc:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80034fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003500:	4618      	mov	r0, r3
 8003502:	3728      	adds	r7, #40	@ 0x28
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}
 8003508:	20000d50 	.word	0x20000d50

0800350c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b088      	sub	sp, #32
 8003510:	af02      	add	r7, sp, #8
 8003512:	6078      	str	r0, [r7, #4]
 8003514:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003516:	4b23      	ldr	r3, [pc, #140]	@ (80035a4 <prvProcessExpiredTimer+0x98>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	68db      	ldr	r3, [r3, #12]
 800351c:	68db      	ldr	r3, [r3, #12]
 800351e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	3304      	adds	r3, #4
 8003524:	4618      	mov	r0, r3
 8003526:	f7fe fafb 	bl	8001b20 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003530:	f003 0304 	and.w	r3, r3, #4
 8003534:	2b00      	cmp	r3, #0
 8003536:	d023      	beq.n	8003580 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	699a      	ldr	r2, [r3, #24]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	18d1      	adds	r1, r2, r3
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	683a      	ldr	r2, [r7, #0]
 8003544:	6978      	ldr	r0, [r7, #20]
 8003546:	f000 f8d5 	bl	80036f4 <prvInsertTimerInActiveList>
 800354a:	4603      	mov	r3, r0
 800354c:	2b00      	cmp	r3, #0
 800354e:	d020      	beq.n	8003592 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003550:	2300      	movs	r3, #0
 8003552:	9300      	str	r3, [sp, #0]
 8003554:	2300      	movs	r3, #0
 8003556:	687a      	ldr	r2, [r7, #4]
 8003558:	2100      	movs	r1, #0
 800355a:	6978      	ldr	r0, [r7, #20]
 800355c:	f7ff ff88 	bl	8003470 <xTimerGenericCommand>
 8003560:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d114      	bne.n	8003592 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8003568:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800356c:	f383 8811 	msr	BASEPRI, r3
 8003570:	f3bf 8f6f 	isb	sy
 8003574:	f3bf 8f4f 	dsb	sy
 8003578:	60fb      	str	r3, [r7, #12]
}
 800357a:	bf00      	nop
 800357c:	bf00      	nop
 800357e:	e7fd      	b.n	800357c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003586:	f023 0301 	bic.w	r3, r3, #1
 800358a:	b2da      	uxtb	r2, r3
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	6a1b      	ldr	r3, [r3, #32]
 8003596:	6978      	ldr	r0, [r7, #20]
 8003598:	4798      	blx	r3
}
 800359a:	bf00      	nop
 800359c:	3718      	adds	r7, #24
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}
 80035a2:	bf00      	nop
 80035a4:	20000d48 	.word	0x20000d48

080035a8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b084      	sub	sp, #16
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80035b0:	f107 0308 	add.w	r3, r7, #8
 80035b4:	4618      	mov	r0, r3
 80035b6:	f000 f859 	bl	800366c <prvGetNextExpireTime>
 80035ba:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	4619      	mov	r1, r3
 80035c0:	68f8      	ldr	r0, [r7, #12]
 80035c2:	f000 f805 	bl	80035d0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80035c6:	f000 f8d7 	bl	8003778 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80035ca:	bf00      	nop
 80035cc:	e7f0      	b.n	80035b0 <prvTimerTask+0x8>
	...

080035d0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b084      	sub	sp, #16
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
 80035d8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80035da:	f7ff fa29 	bl	8002a30 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80035de:	f107 0308 	add.w	r3, r7, #8
 80035e2:	4618      	mov	r0, r3
 80035e4:	f000 f866 	bl	80036b4 <prvSampleTimeNow>
 80035e8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d130      	bne.n	8003652 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d10a      	bne.n	800360c <prvProcessTimerOrBlockTask+0x3c>
 80035f6:	687a      	ldr	r2, [r7, #4]
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	429a      	cmp	r2, r3
 80035fc:	d806      	bhi.n	800360c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80035fe:	f7ff fa25 	bl	8002a4c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003602:	68f9      	ldr	r1, [r7, #12]
 8003604:	6878      	ldr	r0, [r7, #4]
 8003606:	f7ff ff81 	bl	800350c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800360a:	e024      	b.n	8003656 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d008      	beq.n	8003624 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003612:	4b13      	ldr	r3, [pc, #76]	@ (8003660 <prvProcessTimerOrBlockTask+0x90>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d101      	bne.n	8003620 <prvProcessTimerOrBlockTask+0x50>
 800361c:	2301      	movs	r3, #1
 800361e:	e000      	b.n	8003622 <prvProcessTimerOrBlockTask+0x52>
 8003620:	2300      	movs	r3, #0
 8003622:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003624:	4b0f      	ldr	r3, [pc, #60]	@ (8003664 <prvProcessTimerOrBlockTask+0x94>)
 8003626:	6818      	ldr	r0, [r3, #0]
 8003628:	687a      	ldr	r2, [r7, #4]
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	1ad3      	subs	r3, r2, r3
 800362e:	683a      	ldr	r2, [r7, #0]
 8003630:	4619      	mov	r1, r3
 8003632:	f7fe ff65 	bl	8002500 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8003636:	f7ff fa09 	bl	8002a4c <xTaskResumeAll>
 800363a:	4603      	mov	r3, r0
 800363c:	2b00      	cmp	r3, #0
 800363e:	d10a      	bne.n	8003656 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8003640:	4b09      	ldr	r3, [pc, #36]	@ (8003668 <prvProcessTimerOrBlockTask+0x98>)
 8003642:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003646:	601a      	str	r2, [r3, #0]
 8003648:	f3bf 8f4f 	dsb	sy
 800364c:	f3bf 8f6f 	isb	sy
}
 8003650:	e001      	b.n	8003656 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8003652:	f7ff f9fb 	bl	8002a4c <xTaskResumeAll>
}
 8003656:	bf00      	nop
 8003658:	3710      	adds	r7, #16
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}
 800365e:	bf00      	nop
 8003660:	20000d4c 	.word	0x20000d4c
 8003664:	20000d50 	.word	0x20000d50
 8003668:	e000ed04 	.word	0xe000ed04

0800366c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800366c:	b480      	push	{r7}
 800366e:	b085      	sub	sp, #20
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003674:	4b0e      	ldr	r3, [pc, #56]	@ (80036b0 <prvGetNextExpireTime+0x44>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d101      	bne.n	8003682 <prvGetNextExpireTime+0x16>
 800367e:	2201      	movs	r2, #1
 8003680:	e000      	b.n	8003684 <prvGetNextExpireTime+0x18>
 8003682:	2200      	movs	r2, #0
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d105      	bne.n	800369c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003690:	4b07      	ldr	r3, [pc, #28]	@ (80036b0 <prvGetNextExpireTime+0x44>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	68db      	ldr	r3, [r3, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	60fb      	str	r3, [r7, #12]
 800369a:	e001      	b.n	80036a0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800369c:	2300      	movs	r3, #0
 800369e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80036a0:	68fb      	ldr	r3, [r7, #12]
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	3714      	adds	r7, #20
 80036a6:	46bd      	mov	sp, r7
 80036a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ac:	4770      	bx	lr
 80036ae:	bf00      	nop
 80036b0:	20000d48 	.word	0x20000d48

080036b4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b084      	sub	sp, #16
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80036bc:	f7ff fa64 	bl	8002b88 <xTaskGetTickCount>
 80036c0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80036c2:	4b0b      	ldr	r3, [pc, #44]	@ (80036f0 <prvSampleTimeNow+0x3c>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	68fa      	ldr	r2, [r7, #12]
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d205      	bcs.n	80036d8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80036cc:	f000 f93a 	bl	8003944 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2201      	movs	r2, #1
 80036d4:	601a      	str	r2, [r3, #0]
 80036d6:	e002      	b.n	80036de <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2200      	movs	r2, #0
 80036dc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80036de:	4a04      	ldr	r2, [pc, #16]	@ (80036f0 <prvSampleTimeNow+0x3c>)
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80036e4:	68fb      	ldr	r3, [r7, #12]
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	3710      	adds	r7, #16
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}
 80036ee:	bf00      	nop
 80036f0:	20000d58 	.word	0x20000d58

080036f4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b086      	sub	sp, #24
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	60f8      	str	r0, [r7, #12]
 80036fc:	60b9      	str	r1, [r7, #8]
 80036fe:	607a      	str	r2, [r7, #4]
 8003700:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8003702:	2300      	movs	r3, #0
 8003704:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	68ba      	ldr	r2, [r7, #8]
 800370a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	68fa      	ldr	r2, [r7, #12]
 8003710:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8003712:	68ba      	ldr	r2, [r7, #8]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	429a      	cmp	r2, r3
 8003718:	d812      	bhi.n	8003740 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800371a:	687a      	ldr	r2, [r7, #4]
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	1ad2      	subs	r2, r2, r3
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	699b      	ldr	r3, [r3, #24]
 8003724:	429a      	cmp	r2, r3
 8003726:	d302      	bcc.n	800372e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003728:	2301      	movs	r3, #1
 800372a:	617b      	str	r3, [r7, #20]
 800372c:	e01b      	b.n	8003766 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800372e:	4b10      	ldr	r3, [pc, #64]	@ (8003770 <prvInsertTimerInActiveList+0x7c>)
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	3304      	adds	r3, #4
 8003736:	4619      	mov	r1, r3
 8003738:	4610      	mov	r0, r2
 800373a:	f7fe f9b8 	bl	8001aae <vListInsert>
 800373e:	e012      	b.n	8003766 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003740:	687a      	ldr	r2, [r7, #4]
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	429a      	cmp	r2, r3
 8003746:	d206      	bcs.n	8003756 <prvInsertTimerInActiveList+0x62>
 8003748:	68ba      	ldr	r2, [r7, #8]
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	429a      	cmp	r2, r3
 800374e:	d302      	bcc.n	8003756 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8003750:	2301      	movs	r3, #1
 8003752:	617b      	str	r3, [r7, #20]
 8003754:	e007      	b.n	8003766 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003756:	4b07      	ldr	r3, [pc, #28]	@ (8003774 <prvInsertTimerInActiveList+0x80>)
 8003758:	681a      	ldr	r2, [r3, #0]
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	3304      	adds	r3, #4
 800375e:	4619      	mov	r1, r3
 8003760:	4610      	mov	r0, r2
 8003762:	f7fe f9a4 	bl	8001aae <vListInsert>
		}
	}

	return xProcessTimerNow;
 8003766:	697b      	ldr	r3, [r7, #20]
}
 8003768:	4618      	mov	r0, r3
 800376a:	3718      	adds	r7, #24
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}
 8003770:	20000d4c 	.word	0x20000d4c
 8003774:	20000d48 	.word	0x20000d48

08003778 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b08e      	sub	sp, #56	@ 0x38
 800377c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800377e:	e0ce      	b.n	800391e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2b00      	cmp	r3, #0
 8003784:	da19      	bge.n	80037ba <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8003786:	1d3b      	adds	r3, r7, #4
 8003788:	3304      	adds	r3, #4
 800378a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800378c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800378e:	2b00      	cmp	r3, #0
 8003790:	d10b      	bne.n	80037aa <prvProcessReceivedCommands+0x32>
	__asm volatile
 8003792:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003796:	f383 8811 	msr	BASEPRI, r3
 800379a:	f3bf 8f6f 	isb	sy
 800379e:	f3bf 8f4f 	dsb	sy
 80037a2:	61fb      	str	r3, [r7, #28]
}
 80037a4:	bf00      	nop
 80037a6:	bf00      	nop
 80037a8:	e7fd      	b.n	80037a6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80037aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80037b0:	6850      	ldr	r0, [r2, #4]
 80037b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80037b4:	6892      	ldr	r2, [r2, #8]
 80037b6:	4611      	mov	r1, r2
 80037b8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	f2c0 80ae 	blt.w	800391e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80037c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037c8:	695b      	ldr	r3, [r3, #20]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d004      	beq.n	80037d8 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80037ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037d0:	3304      	adds	r3, #4
 80037d2:	4618      	mov	r0, r3
 80037d4:	f7fe f9a4 	bl	8001b20 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80037d8:	463b      	mov	r3, r7
 80037da:	4618      	mov	r0, r3
 80037dc:	f7ff ff6a 	bl	80036b4 <prvSampleTimeNow>
 80037e0:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2b09      	cmp	r3, #9
 80037e6:	f200 8097 	bhi.w	8003918 <prvProcessReceivedCommands+0x1a0>
 80037ea:	a201      	add	r2, pc, #4	@ (adr r2, 80037f0 <prvProcessReceivedCommands+0x78>)
 80037ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037f0:	08003819 	.word	0x08003819
 80037f4:	08003819 	.word	0x08003819
 80037f8:	08003819 	.word	0x08003819
 80037fc:	0800388f 	.word	0x0800388f
 8003800:	080038a3 	.word	0x080038a3
 8003804:	080038ef 	.word	0x080038ef
 8003808:	08003819 	.word	0x08003819
 800380c:	08003819 	.word	0x08003819
 8003810:	0800388f 	.word	0x0800388f
 8003814:	080038a3 	.word	0x080038a3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003818:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800381a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800381e:	f043 0301 	orr.w	r3, r3, #1
 8003822:	b2da      	uxtb	r2, r3
 8003824:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003826:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800382a:	68ba      	ldr	r2, [r7, #8]
 800382c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800382e:	699b      	ldr	r3, [r3, #24]
 8003830:	18d1      	adds	r1, r2, r3
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003836:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003838:	f7ff ff5c 	bl	80036f4 <prvInsertTimerInActiveList>
 800383c:	4603      	mov	r3, r0
 800383e:	2b00      	cmp	r3, #0
 8003840:	d06c      	beq.n	800391c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003842:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003844:	6a1b      	ldr	r3, [r3, #32]
 8003846:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003848:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800384a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800384c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003850:	f003 0304 	and.w	r3, r3, #4
 8003854:	2b00      	cmp	r3, #0
 8003856:	d061      	beq.n	800391c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003858:	68ba      	ldr	r2, [r7, #8]
 800385a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800385c:	699b      	ldr	r3, [r3, #24]
 800385e:	441a      	add	r2, r3
 8003860:	2300      	movs	r3, #0
 8003862:	9300      	str	r3, [sp, #0]
 8003864:	2300      	movs	r3, #0
 8003866:	2100      	movs	r1, #0
 8003868:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800386a:	f7ff fe01 	bl	8003470 <xTimerGenericCommand>
 800386e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8003870:	6a3b      	ldr	r3, [r7, #32]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d152      	bne.n	800391c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8003876:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800387a:	f383 8811 	msr	BASEPRI, r3
 800387e:	f3bf 8f6f 	isb	sy
 8003882:	f3bf 8f4f 	dsb	sy
 8003886:	61bb      	str	r3, [r7, #24]
}
 8003888:	bf00      	nop
 800388a:	bf00      	nop
 800388c:	e7fd      	b.n	800388a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800388e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003890:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003894:	f023 0301 	bic.w	r3, r3, #1
 8003898:	b2da      	uxtb	r2, r3
 800389a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800389c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80038a0:	e03d      	b.n	800391e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80038a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038a4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80038a8:	f043 0301 	orr.w	r3, r3, #1
 80038ac:	b2da      	uxtb	r2, r3
 80038ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038b0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80038b4:	68ba      	ldr	r2, [r7, #8]
 80038b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038b8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80038ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038bc:	699b      	ldr	r3, [r3, #24]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d10b      	bne.n	80038da <prvProcessReceivedCommands+0x162>
	__asm volatile
 80038c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038c6:	f383 8811 	msr	BASEPRI, r3
 80038ca:	f3bf 8f6f 	isb	sy
 80038ce:	f3bf 8f4f 	dsb	sy
 80038d2:	617b      	str	r3, [r7, #20]
}
 80038d4:	bf00      	nop
 80038d6:	bf00      	nop
 80038d8:	e7fd      	b.n	80038d6 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80038da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038dc:	699a      	ldr	r2, [r3, #24]
 80038de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038e0:	18d1      	adds	r1, r2, r3
 80038e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038e6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80038e8:	f7ff ff04 	bl	80036f4 <prvInsertTimerInActiveList>
					break;
 80038ec:	e017      	b.n	800391e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80038ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038f0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80038f4:	f003 0302 	and.w	r3, r3, #2
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d103      	bne.n	8003904 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80038fc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80038fe:	f000 fbeb 	bl	80040d8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8003902:	e00c      	b.n	800391e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003904:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003906:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800390a:	f023 0301 	bic.w	r3, r3, #1
 800390e:	b2da      	uxtb	r2, r3
 8003910:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003912:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8003916:	e002      	b.n	800391e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8003918:	bf00      	nop
 800391a:	e000      	b.n	800391e <prvProcessReceivedCommands+0x1a6>
					break;
 800391c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800391e:	4b08      	ldr	r3, [pc, #32]	@ (8003940 <prvProcessReceivedCommands+0x1c8>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	1d39      	adds	r1, r7, #4
 8003924:	2200      	movs	r2, #0
 8003926:	4618      	mov	r0, r3
 8003928:	f7fe fbce 	bl	80020c8 <xQueueReceive>
 800392c:	4603      	mov	r3, r0
 800392e:	2b00      	cmp	r3, #0
 8003930:	f47f af26 	bne.w	8003780 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8003934:	bf00      	nop
 8003936:	bf00      	nop
 8003938:	3730      	adds	r7, #48	@ 0x30
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}
 800393e:	bf00      	nop
 8003940:	20000d50 	.word	0x20000d50

08003944 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b088      	sub	sp, #32
 8003948:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800394a:	e049      	b.n	80039e0 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800394c:	4b2e      	ldr	r3, [pc, #184]	@ (8003a08 <prvSwitchTimerLists+0xc4>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	68db      	ldr	r3, [r3, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003956:	4b2c      	ldr	r3, [pc, #176]	@ (8003a08 <prvSwitchTimerLists+0xc4>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	68db      	ldr	r3, [r3, #12]
 800395c:	68db      	ldr	r3, [r3, #12]
 800395e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	3304      	adds	r3, #4
 8003964:	4618      	mov	r0, r3
 8003966:	f7fe f8db 	bl	8001b20 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	6a1b      	ldr	r3, [r3, #32]
 800396e:	68f8      	ldr	r0, [r7, #12]
 8003970:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003978:	f003 0304 	and.w	r3, r3, #4
 800397c:	2b00      	cmp	r3, #0
 800397e:	d02f      	beq.n	80039e0 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	699b      	ldr	r3, [r3, #24]
 8003984:	693a      	ldr	r2, [r7, #16]
 8003986:	4413      	add	r3, r2
 8003988:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800398a:	68ba      	ldr	r2, [r7, #8]
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	429a      	cmp	r2, r3
 8003990:	d90e      	bls.n	80039b0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	68ba      	ldr	r2, [r7, #8]
 8003996:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	68fa      	ldr	r2, [r7, #12]
 800399c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800399e:	4b1a      	ldr	r3, [pc, #104]	@ (8003a08 <prvSwitchTimerLists+0xc4>)
 80039a0:	681a      	ldr	r2, [r3, #0]
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	3304      	adds	r3, #4
 80039a6:	4619      	mov	r1, r3
 80039a8:	4610      	mov	r0, r2
 80039aa:	f7fe f880 	bl	8001aae <vListInsert>
 80039ae:	e017      	b.n	80039e0 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80039b0:	2300      	movs	r3, #0
 80039b2:	9300      	str	r3, [sp, #0]
 80039b4:	2300      	movs	r3, #0
 80039b6:	693a      	ldr	r2, [r7, #16]
 80039b8:	2100      	movs	r1, #0
 80039ba:	68f8      	ldr	r0, [r7, #12]
 80039bc:	f7ff fd58 	bl	8003470 <xTimerGenericCommand>
 80039c0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d10b      	bne.n	80039e0 <prvSwitchTimerLists+0x9c>
	__asm volatile
 80039c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039cc:	f383 8811 	msr	BASEPRI, r3
 80039d0:	f3bf 8f6f 	isb	sy
 80039d4:	f3bf 8f4f 	dsb	sy
 80039d8:	603b      	str	r3, [r7, #0]
}
 80039da:	bf00      	nop
 80039dc:	bf00      	nop
 80039de:	e7fd      	b.n	80039dc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80039e0:	4b09      	ldr	r3, [pc, #36]	@ (8003a08 <prvSwitchTimerLists+0xc4>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d1b0      	bne.n	800394c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80039ea:	4b07      	ldr	r3, [pc, #28]	@ (8003a08 <prvSwitchTimerLists+0xc4>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80039f0:	4b06      	ldr	r3, [pc, #24]	@ (8003a0c <prvSwitchTimerLists+0xc8>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a04      	ldr	r2, [pc, #16]	@ (8003a08 <prvSwitchTimerLists+0xc4>)
 80039f6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80039f8:	4a04      	ldr	r2, [pc, #16]	@ (8003a0c <prvSwitchTimerLists+0xc8>)
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	6013      	str	r3, [r2, #0]
}
 80039fe:	bf00      	nop
 8003a00:	3718      	adds	r7, #24
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}
 8003a06:	bf00      	nop
 8003a08:	20000d48 	.word	0x20000d48
 8003a0c:	20000d4c 	.word	0x20000d4c

08003a10 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b082      	sub	sp, #8
 8003a14:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8003a16:	f000 f96f 	bl	8003cf8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8003a1a:	4b15      	ldr	r3, [pc, #84]	@ (8003a70 <prvCheckForValidListAndQueue+0x60>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d120      	bne.n	8003a64 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8003a22:	4814      	ldr	r0, [pc, #80]	@ (8003a74 <prvCheckForValidListAndQueue+0x64>)
 8003a24:	f7fd fff2 	bl	8001a0c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8003a28:	4813      	ldr	r0, [pc, #76]	@ (8003a78 <prvCheckForValidListAndQueue+0x68>)
 8003a2a:	f7fd ffef 	bl	8001a0c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8003a2e:	4b13      	ldr	r3, [pc, #76]	@ (8003a7c <prvCheckForValidListAndQueue+0x6c>)
 8003a30:	4a10      	ldr	r2, [pc, #64]	@ (8003a74 <prvCheckForValidListAndQueue+0x64>)
 8003a32:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8003a34:	4b12      	ldr	r3, [pc, #72]	@ (8003a80 <prvCheckForValidListAndQueue+0x70>)
 8003a36:	4a10      	ldr	r2, [pc, #64]	@ (8003a78 <prvCheckForValidListAndQueue+0x68>)
 8003a38:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	9300      	str	r3, [sp, #0]
 8003a3e:	4b11      	ldr	r3, [pc, #68]	@ (8003a84 <prvCheckForValidListAndQueue+0x74>)
 8003a40:	4a11      	ldr	r2, [pc, #68]	@ (8003a88 <prvCheckForValidListAndQueue+0x78>)
 8003a42:	2110      	movs	r1, #16
 8003a44:	200a      	movs	r0, #10
 8003a46:	f7fe f8ff 	bl	8001c48 <xQueueGenericCreateStatic>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	4a08      	ldr	r2, [pc, #32]	@ (8003a70 <prvCheckForValidListAndQueue+0x60>)
 8003a4e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8003a50:	4b07      	ldr	r3, [pc, #28]	@ (8003a70 <prvCheckForValidListAndQueue+0x60>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d005      	beq.n	8003a64 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003a58:	4b05      	ldr	r3, [pc, #20]	@ (8003a70 <prvCheckForValidListAndQueue+0x60>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	490b      	ldr	r1, [pc, #44]	@ (8003a8c <prvCheckForValidListAndQueue+0x7c>)
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f7fe fd24 	bl	80024ac <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003a64:	f000 f97a 	bl	8003d5c <vPortExitCritical>
}
 8003a68:	bf00      	nop
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}
 8003a6e:	bf00      	nop
 8003a70:	20000d50 	.word	0x20000d50
 8003a74:	20000d20 	.word	0x20000d20
 8003a78:	20000d34 	.word	0x20000d34
 8003a7c:	20000d48 	.word	0x20000d48
 8003a80:	20000d4c 	.word	0x20000d4c
 8003a84:	20000dfc 	.word	0x20000dfc
 8003a88:	20000d5c 	.word	0x20000d5c
 8003a8c:	0800453c 	.word	0x0800453c

08003a90 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003a90:	b480      	push	{r7}
 8003a92:	b085      	sub	sp, #20
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	60f8      	str	r0, [r7, #12]
 8003a98:	60b9      	str	r1, [r7, #8]
 8003a9a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	3b04      	subs	r3, #4
 8003aa0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003aa8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	3b04      	subs	r3, #4
 8003aae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	f023 0201 	bic.w	r2, r3, #1
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	3b04      	subs	r3, #4
 8003abe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003ac0:	4a0c      	ldr	r2, [pc, #48]	@ (8003af4 <pxPortInitialiseStack+0x64>)
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	3b14      	subs	r3, #20
 8003aca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003acc:	687a      	ldr	r2, [r7, #4]
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	3b04      	subs	r3, #4
 8003ad6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	f06f 0202 	mvn.w	r2, #2
 8003ade:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	3b20      	subs	r3, #32
 8003ae4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
}
 8003ae8:	4618      	mov	r0, r3
 8003aea:	3714      	adds	r7, #20
 8003aec:	46bd      	mov	sp, r7
 8003aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af2:	4770      	bx	lr
 8003af4:	08003af9 	.word	0x08003af9

08003af8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003af8:	b480      	push	{r7}
 8003afa:	b085      	sub	sp, #20
 8003afc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8003afe:	2300      	movs	r3, #0
 8003b00:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003b02:	4b13      	ldr	r3, [pc, #76]	@ (8003b50 <prvTaskExitError+0x58>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b0a:	d00b      	beq.n	8003b24 <prvTaskExitError+0x2c>
	__asm volatile
 8003b0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b10:	f383 8811 	msr	BASEPRI, r3
 8003b14:	f3bf 8f6f 	isb	sy
 8003b18:	f3bf 8f4f 	dsb	sy
 8003b1c:	60fb      	str	r3, [r7, #12]
}
 8003b1e:	bf00      	nop
 8003b20:	bf00      	nop
 8003b22:	e7fd      	b.n	8003b20 <prvTaskExitError+0x28>
	__asm volatile
 8003b24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b28:	f383 8811 	msr	BASEPRI, r3
 8003b2c:	f3bf 8f6f 	isb	sy
 8003b30:	f3bf 8f4f 	dsb	sy
 8003b34:	60bb      	str	r3, [r7, #8]
}
 8003b36:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003b38:	bf00      	nop
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d0fc      	beq.n	8003b3a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003b40:	bf00      	nop
 8003b42:	bf00      	nop
 8003b44:	3714      	adds	r7, #20
 8003b46:	46bd      	mov	sp, r7
 8003b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4c:	4770      	bx	lr
 8003b4e:	bf00      	nop
 8003b50:	2000000c 	.word	0x2000000c
	...

08003b60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003b60:	4b07      	ldr	r3, [pc, #28]	@ (8003b80 <pxCurrentTCBConst2>)
 8003b62:	6819      	ldr	r1, [r3, #0]
 8003b64:	6808      	ldr	r0, [r1, #0]
 8003b66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b6a:	f380 8809 	msr	PSP, r0
 8003b6e:	f3bf 8f6f 	isb	sy
 8003b72:	f04f 0000 	mov.w	r0, #0
 8003b76:	f380 8811 	msr	BASEPRI, r0
 8003b7a:	4770      	bx	lr
 8003b7c:	f3af 8000 	nop.w

08003b80 <pxCurrentTCBConst2>:
 8003b80:	20000820 	.word	0x20000820
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003b84:	bf00      	nop
 8003b86:	bf00      	nop

08003b88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003b88:	4808      	ldr	r0, [pc, #32]	@ (8003bac <prvPortStartFirstTask+0x24>)
 8003b8a:	6800      	ldr	r0, [r0, #0]
 8003b8c:	6800      	ldr	r0, [r0, #0]
 8003b8e:	f380 8808 	msr	MSP, r0
 8003b92:	f04f 0000 	mov.w	r0, #0
 8003b96:	f380 8814 	msr	CONTROL, r0
 8003b9a:	b662      	cpsie	i
 8003b9c:	b661      	cpsie	f
 8003b9e:	f3bf 8f4f 	dsb	sy
 8003ba2:	f3bf 8f6f 	isb	sy
 8003ba6:	df00      	svc	0
 8003ba8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003baa:	bf00      	nop
 8003bac:	e000ed08 	.word	0xe000ed08

08003bb0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b086      	sub	sp, #24
 8003bb4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003bb6:	4b47      	ldr	r3, [pc, #284]	@ (8003cd4 <xPortStartScheduler+0x124>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a47      	ldr	r2, [pc, #284]	@ (8003cd8 <xPortStartScheduler+0x128>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d10b      	bne.n	8003bd8 <xPortStartScheduler+0x28>
	__asm volatile
 8003bc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bc4:	f383 8811 	msr	BASEPRI, r3
 8003bc8:	f3bf 8f6f 	isb	sy
 8003bcc:	f3bf 8f4f 	dsb	sy
 8003bd0:	613b      	str	r3, [r7, #16]
}
 8003bd2:	bf00      	nop
 8003bd4:	bf00      	nop
 8003bd6:	e7fd      	b.n	8003bd4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003bd8:	4b3e      	ldr	r3, [pc, #248]	@ (8003cd4 <xPortStartScheduler+0x124>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a3f      	ldr	r2, [pc, #252]	@ (8003cdc <xPortStartScheduler+0x12c>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d10b      	bne.n	8003bfa <xPortStartScheduler+0x4a>
	__asm volatile
 8003be2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003be6:	f383 8811 	msr	BASEPRI, r3
 8003bea:	f3bf 8f6f 	isb	sy
 8003bee:	f3bf 8f4f 	dsb	sy
 8003bf2:	60fb      	str	r3, [r7, #12]
}
 8003bf4:	bf00      	nop
 8003bf6:	bf00      	nop
 8003bf8:	e7fd      	b.n	8003bf6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003bfa:	4b39      	ldr	r3, [pc, #228]	@ (8003ce0 <xPortStartScheduler+0x130>)
 8003bfc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	781b      	ldrb	r3, [r3, #0]
 8003c02:	b2db      	uxtb	r3, r3
 8003c04:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	22ff      	movs	r2, #255	@ 0xff
 8003c0a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	781b      	ldrb	r3, [r3, #0]
 8003c10:	b2db      	uxtb	r3, r3
 8003c12:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003c14:	78fb      	ldrb	r3, [r7, #3]
 8003c16:	b2db      	uxtb	r3, r3
 8003c18:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003c1c:	b2da      	uxtb	r2, r3
 8003c1e:	4b31      	ldr	r3, [pc, #196]	@ (8003ce4 <xPortStartScheduler+0x134>)
 8003c20:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003c22:	4b31      	ldr	r3, [pc, #196]	@ (8003ce8 <xPortStartScheduler+0x138>)
 8003c24:	2207      	movs	r2, #7
 8003c26:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003c28:	e009      	b.n	8003c3e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8003c2a:	4b2f      	ldr	r3, [pc, #188]	@ (8003ce8 <xPortStartScheduler+0x138>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	3b01      	subs	r3, #1
 8003c30:	4a2d      	ldr	r2, [pc, #180]	@ (8003ce8 <xPortStartScheduler+0x138>)
 8003c32:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003c34:	78fb      	ldrb	r3, [r7, #3]
 8003c36:	b2db      	uxtb	r3, r3
 8003c38:	005b      	lsls	r3, r3, #1
 8003c3a:	b2db      	uxtb	r3, r3
 8003c3c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003c3e:	78fb      	ldrb	r3, [r7, #3]
 8003c40:	b2db      	uxtb	r3, r3
 8003c42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c46:	2b80      	cmp	r3, #128	@ 0x80
 8003c48:	d0ef      	beq.n	8003c2a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003c4a:	4b27      	ldr	r3, [pc, #156]	@ (8003ce8 <xPortStartScheduler+0x138>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f1c3 0307 	rsb	r3, r3, #7
 8003c52:	2b04      	cmp	r3, #4
 8003c54:	d00b      	beq.n	8003c6e <xPortStartScheduler+0xbe>
	__asm volatile
 8003c56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c5a:	f383 8811 	msr	BASEPRI, r3
 8003c5e:	f3bf 8f6f 	isb	sy
 8003c62:	f3bf 8f4f 	dsb	sy
 8003c66:	60bb      	str	r3, [r7, #8]
}
 8003c68:	bf00      	nop
 8003c6a:	bf00      	nop
 8003c6c:	e7fd      	b.n	8003c6a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003c6e:	4b1e      	ldr	r3, [pc, #120]	@ (8003ce8 <xPortStartScheduler+0x138>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	021b      	lsls	r3, r3, #8
 8003c74:	4a1c      	ldr	r2, [pc, #112]	@ (8003ce8 <xPortStartScheduler+0x138>)
 8003c76:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003c78:	4b1b      	ldr	r3, [pc, #108]	@ (8003ce8 <xPortStartScheduler+0x138>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003c80:	4a19      	ldr	r2, [pc, #100]	@ (8003ce8 <xPortStartScheduler+0x138>)
 8003c82:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	b2da      	uxtb	r2, r3
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003c8c:	4b17      	ldr	r3, [pc, #92]	@ (8003cec <xPortStartScheduler+0x13c>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a16      	ldr	r2, [pc, #88]	@ (8003cec <xPortStartScheduler+0x13c>)
 8003c92:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003c96:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003c98:	4b14      	ldr	r3, [pc, #80]	@ (8003cec <xPortStartScheduler+0x13c>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a13      	ldr	r2, [pc, #76]	@ (8003cec <xPortStartScheduler+0x13c>)
 8003c9e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8003ca2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003ca4:	f000 f8da 	bl	8003e5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003ca8:	4b11      	ldr	r3, [pc, #68]	@ (8003cf0 <xPortStartScheduler+0x140>)
 8003caa:	2200      	movs	r2, #0
 8003cac:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003cae:	f000 f8f9 	bl	8003ea4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003cb2:	4b10      	ldr	r3, [pc, #64]	@ (8003cf4 <xPortStartScheduler+0x144>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a0f      	ldr	r2, [pc, #60]	@ (8003cf4 <xPortStartScheduler+0x144>)
 8003cb8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8003cbc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003cbe:	f7ff ff63 	bl	8003b88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003cc2:	f7ff f82b 	bl	8002d1c <vTaskSwitchContext>
	prvTaskExitError();
 8003cc6:	f7ff ff17 	bl	8003af8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003cca:	2300      	movs	r3, #0
}
 8003ccc:	4618      	mov	r0, r3
 8003cce:	3718      	adds	r7, #24
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	bd80      	pop	{r7, pc}
 8003cd4:	e000ed00 	.word	0xe000ed00
 8003cd8:	410fc271 	.word	0x410fc271
 8003cdc:	410fc270 	.word	0x410fc270
 8003ce0:	e000e400 	.word	0xe000e400
 8003ce4:	20000e4c 	.word	0x20000e4c
 8003ce8:	20000e50 	.word	0x20000e50
 8003cec:	e000ed20 	.word	0xe000ed20
 8003cf0:	2000000c 	.word	0x2000000c
 8003cf4:	e000ef34 	.word	0xe000ef34

08003cf8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b083      	sub	sp, #12
 8003cfc:	af00      	add	r7, sp, #0
	__asm volatile
 8003cfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d02:	f383 8811 	msr	BASEPRI, r3
 8003d06:	f3bf 8f6f 	isb	sy
 8003d0a:	f3bf 8f4f 	dsb	sy
 8003d0e:	607b      	str	r3, [r7, #4]
}
 8003d10:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003d12:	4b10      	ldr	r3, [pc, #64]	@ (8003d54 <vPortEnterCritical+0x5c>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	3301      	adds	r3, #1
 8003d18:	4a0e      	ldr	r2, [pc, #56]	@ (8003d54 <vPortEnterCritical+0x5c>)
 8003d1a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003d1c:	4b0d      	ldr	r3, [pc, #52]	@ (8003d54 <vPortEnterCritical+0x5c>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	2b01      	cmp	r3, #1
 8003d22:	d110      	bne.n	8003d46 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003d24:	4b0c      	ldr	r3, [pc, #48]	@ (8003d58 <vPortEnterCritical+0x60>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	b2db      	uxtb	r3, r3
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d00b      	beq.n	8003d46 <vPortEnterCritical+0x4e>
	__asm volatile
 8003d2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d32:	f383 8811 	msr	BASEPRI, r3
 8003d36:	f3bf 8f6f 	isb	sy
 8003d3a:	f3bf 8f4f 	dsb	sy
 8003d3e:	603b      	str	r3, [r7, #0]
}
 8003d40:	bf00      	nop
 8003d42:	bf00      	nop
 8003d44:	e7fd      	b.n	8003d42 <vPortEnterCritical+0x4a>
	}
}
 8003d46:	bf00      	nop
 8003d48:	370c      	adds	r7, #12
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d50:	4770      	bx	lr
 8003d52:	bf00      	nop
 8003d54:	2000000c 	.word	0x2000000c
 8003d58:	e000ed04 	.word	0xe000ed04

08003d5c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b083      	sub	sp, #12
 8003d60:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003d62:	4b12      	ldr	r3, [pc, #72]	@ (8003dac <vPortExitCritical+0x50>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d10b      	bne.n	8003d82 <vPortExitCritical+0x26>
	__asm volatile
 8003d6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d6e:	f383 8811 	msr	BASEPRI, r3
 8003d72:	f3bf 8f6f 	isb	sy
 8003d76:	f3bf 8f4f 	dsb	sy
 8003d7a:	607b      	str	r3, [r7, #4]
}
 8003d7c:	bf00      	nop
 8003d7e:	bf00      	nop
 8003d80:	e7fd      	b.n	8003d7e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003d82:	4b0a      	ldr	r3, [pc, #40]	@ (8003dac <vPortExitCritical+0x50>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	3b01      	subs	r3, #1
 8003d88:	4a08      	ldr	r2, [pc, #32]	@ (8003dac <vPortExitCritical+0x50>)
 8003d8a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003d8c:	4b07      	ldr	r3, [pc, #28]	@ (8003dac <vPortExitCritical+0x50>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d105      	bne.n	8003da0 <vPortExitCritical+0x44>
 8003d94:	2300      	movs	r3, #0
 8003d96:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	f383 8811 	msr	BASEPRI, r3
}
 8003d9e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003da0:	bf00      	nop
 8003da2:	370c      	adds	r7, #12
 8003da4:	46bd      	mov	sp, r7
 8003da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003daa:	4770      	bx	lr
 8003dac:	2000000c 	.word	0x2000000c

08003db0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003db0:	f3ef 8009 	mrs	r0, PSP
 8003db4:	f3bf 8f6f 	isb	sy
 8003db8:	4b15      	ldr	r3, [pc, #84]	@ (8003e10 <pxCurrentTCBConst>)
 8003dba:	681a      	ldr	r2, [r3, #0]
 8003dbc:	f01e 0f10 	tst.w	lr, #16
 8003dc0:	bf08      	it	eq
 8003dc2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003dc6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003dca:	6010      	str	r0, [r2, #0]
 8003dcc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003dd0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8003dd4:	f380 8811 	msr	BASEPRI, r0
 8003dd8:	f3bf 8f4f 	dsb	sy
 8003ddc:	f3bf 8f6f 	isb	sy
 8003de0:	f7fe ff9c 	bl	8002d1c <vTaskSwitchContext>
 8003de4:	f04f 0000 	mov.w	r0, #0
 8003de8:	f380 8811 	msr	BASEPRI, r0
 8003dec:	bc09      	pop	{r0, r3}
 8003dee:	6819      	ldr	r1, [r3, #0]
 8003df0:	6808      	ldr	r0, [r1, #0]
 8003df2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003df6:	f01e 0f10 	tst.w	lr, #16
 8003dfa:	bf08      	it	eq
 8003dfc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003e00:	f380 8809 	msr	PSP, r0
 8003e04:	f3bf 8f6f 	isb	sy
 8003e08:	4770      	bx	lr
 8003e0a:	bf00      	nop
 8003e0c:	f3af 8000 	nop.w

08003e10 <pxCurrentTCBConst>:
 8003e10:	20000820 	.word	0x20000820
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003e14:	bf00      	nop
 8003e16:	bf00      	nop

08003e18 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b082      	sub	sp, #8
 8003e1c:	af00      	add	r7, sp, #0
	__asm volatile
 8003e1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e22:	f383 8811 	msr	BASEPRI, r3
 8003e26:	f3bf 8f6f 	isb	sy
 8003e2a:	f3bf 8f4f 	dsb	sy
 8003e2e:	607b      	str	r3, [r7, #4]
}
 8003e30:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003e32:	f7fe feb9 	bl	8002ba8 <xTaskIncrementTick>
 8003e36:	4603      	mov	r3, r0
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d003      	beq.n	8003e44 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003e3c:	4b06      	ldr	r3, [pc, #24]	@ (8003e58 <xPortSysTickHandler+0x40>)
 8003e3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003e42:	601a      	str	r2, [r3, #0]
 8003e44:	2300      	movs	r3, #0
 8003e46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	f383 8811 	msr	BASEPRI, r3
}
 8003e4e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003e50:	bf00      	nop
 8003e52:	3708      	adds	r7, #8
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bd80      	pop	{r7, pc}
 8003e58:	e000ed04 	.word	0xe000ed04

08003e5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003e60:	4b0b      	ldr	r3, [pc, #44]	@ (8003e90 <vPortSetupTimerInterrupt+0x34>)
 8003e62:	2200      	movs	r2, #0
 8003e64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003e66:	4b0b      	ldr	r3, [pc, #44]	@ (8003e94 <vPortSetupTimerInterrupt+0x38>)
 8003e68:	2200      	movs	r2, #0
 8003e6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003e6c:	4b0a      	ldr	r3, [pc, #40]	@ (8003e98 <vPortSetupTimerInterrupt+0x3c>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a0a      	ldr	r2, [pc, #40]	@ (8003e9c <vPortSetupTimerInterrupt+0x40>)
 8003e72:	fba2 2303 	umull	r2, r3, r2, r3
 8003e76:	099b      	lsrs	r3, r3, #6
 8003e78:	4a09      	ldr	r2, [pc, #36]	@ (8003ea0 <vPortSetupTimerInterrupt+0x44>)
 8003e7a:	3b01      	subs	r3, #1
 8003e7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003e7e:	4b04      	ldr	r3, [pc, #16]	@ (8003e90 <vPortSetupTimerInterrupt+0x34>)
 8003e80:	2207      	movs	r2, #7
 8003e82:	601a      	str	r2, [r3, #0]
}
 8003e84:	bf00      	nop
 8003e86:	46bd      	mov	sp, r7
 8003e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8c:	4770      	bx	lr
 8003e8e:	bf00      	nop
 8003e90:	e000e010 	.word	0xe000e010
 8003e94:	e000e018 	.word	0xe000e018
 8003e98:	20000000 	.word	0x20000000
 8003e9c:	10624dd3 	.word	0x10624dd3
 8003ea0:	e000e014 	.word	0xe000e014

08003ea4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003ea4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8003eb4 <vPortEnableVFP+0x10>
 8003ea8:	6801      	ldr	r1, [r0, #0]
 8003eaa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8003eae:	6001      	str	r1, [r0, #0]
 8003eb0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8003eb2:	bf00      	nop
 8003eb4:	e000ed88 	.word	0xe000ed88

08003eb8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8003eb8:	b480      	push	{r7}
 8003eba:	b085      	sub	sp, #20
 8003ebc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8003ebe:	f3ef 8305 	mrs	r3, IPSR
 8003ec2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	2b0f      	cmp	r3, #15
 8003ec8:	d915      	bls.n	8003ef6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003eca:	4a18      	ldr	r2, [pc, #96]	@ (8003f2c <vPortValidateInterruptPriority+0x74>)
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	4413      	add	r3, r2
 8003ed0:	781b      	ldrb	r3, [r3, #0]
 8003ed2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003ed4:	4b16      	ldr	r3, [pc, #88]	@ (8003f30 <vPortValidateInterruptPriority+0x78>)
 8003ed6:	781b      	ldrb	r3, [r3, #0]
 8003ed8:	7afa      	ldrb	r2, [r7, #11]
 8003eda:	429a      	cmp	r2, r3
 8003edc:	d20b      	bcs.n	8003ef6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8003ede:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ee2:	f383 8811 	msr	BASEPRI, r3
 8003ee6:	f3bf 8f6f 	isb	sy
 8003eea:	f3bf 8f4f 	dsb	sy
 8003eee:	607b      	str	r3, [r7, #4]
}
 8003ef0:	bf00      	nop
 8003ef2:	bf00      	nop
 8003ef4:	e7fd      	b.n	8003ef2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003ef6:	4b0f      	ldr	r3, [pc, #60]	@ (8003f34 <vPortValidateInterruptPriority+0x7c>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003efe:	4b0e      	ldr	r3, [pc, #56]	@ (8003f38 <vPortValidateInterruptPriority+0x80>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	429a      	cmp	r2, r3
 8003f04:	d90b      	bls.n	8003f1e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8003f06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f0a:	f383 8811 	msr	BASEPRI, r3
 8003f0e:	f3bf 8f6f 	isb	sy
 8003f12:	f3bf 8f4f 	dsb	sy
 8003f16:	603b      	str	r3, [r7, #0]
}
 8003f18:	bf00      	nop
 8003f1a:	bf00      	nop
 8003f1c:	e7fd      	b.n	8003f1a <vPortValidateInterruptPriority+0x62>
	}
 8003f1e:	bf00      	nop
 8003f20:	3714      	adds	r7, #20
 8003f22:	46bd      	mov	sp, r7
 8003f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f28:	4770      	bx	lr
 8003f2a:	bf00      	nop
 8003f2c:	e000e3f0 	.word	0xe000e3f0
 8003f30:	20000e4c 	.word	0x20000e4c
 8003f34:	e000ed0c 	.word	0xe000ed0c
 8003f38:	20000e50 	.word	0x20000e50

08003f3c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b08a      	sub	sp, #40	@ 0x28
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003f44:	2300      	movs	r3, #0
 8003f46:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003f48:	f7fe fd72 	bl	8002a30 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003f4c:	4b5c      	ldr	r3, [pc, #368]	@ (80040c0 <pvPortMalloc+0x184>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d101      	bne.n	8003f58 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003f54:	f000 f924 	bl	80041a0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003f58:	4b5a      	ldr	r3, [pc, #360]	@ (80040c4 <pvPortMalloc+0x188>)
 8003f5a:	681a      	ldr	r2, [r3, #0]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	4013      	ands	r3, r2
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	f040 8095 	bne.w	8004090 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d01e      	beq.n	8003faa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8003f6c:	2208      	movs	r2, #8
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	4413      	add	r3, r2
 8003f72:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	f003 0307 	and.w	r3, r3, #7
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d015      	beq.n	8003faa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	f023 0307 	bic.w	r3, r3, #7
 8003f84:	3308      	adds	r3, #8
 8003f86:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	f003 0307 	and.w	r3, r3, #7
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d00b      	beq.n	8003faa <pvPortMalloc+0x6e>
	__asm volatile
 8003f92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f96:	f383 8811 	msr	BASEPRI, r3
 8003f9a:	f3bf 8f6f 	isb	sy
 8003f9e:	f3bf 8f4f 	dsb	sy
 8003fa2:	617b      	str	r3, [r7, #20]
}
 8003fa4:	bf00      	nop
 8003fa6:	bf00      	nop
 8003fa8:	e7fd      	b.n	8003fa6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d06f      	beq.n	8004090 <pvPortMalloc+0x154>
 8003fb0:	4b45      	ldr	r3, [pc, #276]	@ (80040c8 <pvPortMalloc+0x18c>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	687a      	ldr	r2, [r7, #4]
 8003fb6:	429a      	cmp	r2, r3
 8003fb8:	d86a      	bhi.n	8004090 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003fba:	4b44      	ldr	r3, [pc, #272]	@ (80040cc <pvPortMalloc+0x190>)
 8003fbc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003fbe:	4b43      	ldr	r3, [pc, #268]	@ (80040cc <pvPortMalloc+0x190>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003fc4:	e004      	b.n	8003fd0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8003fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fc8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003fd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	687a      	ldr	r2, [r7, #4]
 8003fd6:	429a      	cmp	r2, r3
 8003fd8:	d903      	bls.n	8003fe2 <pvPortMalloc+0xa6>
 8003fda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d1f1      	bne.n	8003fc6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003fe2:	4b37      	ldr	r3, [pc, #220]	@ (80040c0 <pvPortMalloc+0x184>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fe8:	429a      	cmp	r2, r3
 8003fea:	d051      	beq.n	8004090 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003fec:	6a3b      	ldr	r3, [r7, #32]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	2208      	movs	r2, #8
 8003ff2:	4413      	add	r3, r2
 8003ff4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003ff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	6a3b      	ldr	r3, [r7, #32]
 8003ffc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003ffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004000:	685a      	ldr	r2, [r3, #4]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	1ad2      	subs	r2, r2, r3
 8004006:	2308      	movs	r3, #8
 8004008:	005b      	lsls	r3, r3, #1
 800400a:	429a      	cmp	r2, r3
 800400c:	d920      	bls.n	8004050 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800400e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	4413      	add	r3, r2
 8004014:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004016:	69bb      	ldr	r3, [r7, #24]
 8004018:	f003 0307 	and.w	r3, r3, #7
 800401c:	2b00      	cmp	r3, #0
 800401e:	d00b      	beq.n	8004038 <pvPortMalloc+0xfc>
	__asm volatile
 8004020:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004024:	f383 8811 	msr	BASEPRI, r3
 8004028:	f3bf 8f6f 	isb	sy
 800402c:	f3bf 8f4f 	dsb	sy
 8004030:	613b      	str	r3, [r7, #16]
}
 8004032:	bf00      	nop
 8004034:	bf00      	nop
 8004036:	e7fd      	b.n	8004034 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800403a:	685a      	ldr	r2, [r3, #4]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	1ad2      	subs	r2, r2, r3
 8004040:	69bb      	ldr	r3, [r7, #24]
 8004042:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004044:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004046:	687a      	ldr	r2, [r7, #4]
 8004048:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800404a:	69b8      	ldr	r0, [r7, #24]
 800404c:	f000 f90a 	bl	8004264 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004050:	4b1d      	ldr	r3, [pc, #116]	@ (80040c8 <pvPortMalloc+0x18c>)
 8004052:	681a      	ldr	r2, [r3, #0]
 8004054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	1ad3      	subs	r3, r2, r3
 800405a:	4a1b      	ldr	r2, [pc, #108]	@ (80040c8 <pvPortMalloc+0x18c>)
 800405c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800405e:	4b1a      	ldr	r3, [pc, #104]	@ (80040c8 <pvPortMalloc+0x18c>)
 8004060:	681a      	ldr	r2, [r3, #0]
 8004062:	4b1b      	ldr	r3, [pc, #108]	@ (80040d0 <pvPortMalloc+0x194>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	429a      	cmp	r2, r3
 8004068:	d203      	bcs.n	8004072 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800406a:	4b17      	ldr	r3, [pc, #92]	@ (80040c8 <pvPortMalloc+0x18c>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a18      	ldr	r2, [pc, #96]	@ (80040d0 <pvPortMalloc+0x194>)
 8004070:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004074:	685a      	ldr	r2, [r3, #4]
 8004076:	4b13      	ldr	r3, [pc, #76]	@ (80040c4 <pvPortMalloc+0x188>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	431a      	orrs	r2, r3
 800407c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800407e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004080:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004082:	2200      	movs	r2, #0
 8004084:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004086:	4b13      	ldr	r3, [pc, #76]	@ (80040d4 <pvPortMalloc+0x198>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	3301      	adds	r3, #1
 800408c:	4a11      	ldr	r2, [pc, #68]	@ (80040d4 <pvPortMalloc+0x198>)
 800408e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004090:	f7fe fcdc 	bl	8002a4c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004094:	69fb      	ldr	r3, [r7, #28]
 8004096:	f003 0307 	and.w	r3, r3, #7
 800409a:	2b00      	cmp	r3, #0
 800409c:	d00b      	beq.n	80040b6 <pvPortMalloc+0x17a>
	__asm volatile
 800409e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040a2:	f383 8811 	msr	BASEPRI, r3
 80040a6:	f3bf 8f6f 	isb	sy
 80040aa:	f3bf 8f4f 	dsb	sy
 80040ae:	60fb      	str	r3, [r7, #12]
}
 80040b0:	bf00      	nop
 80040b2:	bf00      	nop
 80040b4:	e7fd      	b.n	80040b2 <pvPortMalloc+0x176>
	return pvReturn;
 80040b6:	69fb      	ldr	r3, [r7, #28]
}
 80040b8:	4618      	mov	r0, r3
 80040ba:	3728      	adds	r7, #40	@ 0x28
 80040bc:	46bd      	mov	sp, r7
 80040be:	bd80      	pop	{r7, pc}
 80040c0:	20004a5c 	.word	0x20004a5c
 80040c4:	20004a70 	.word	0x20004a70
 80040c8:	20004a60 	.word	0x20004a60
 80040cc:	20004a54 	.word	0x20004a54
 80040d0:	20004a64 	.word	0x20004a64
 80040d4:	20004a68 	.word	0x20004a68

080040d8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b086      	sub	sp, #24
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d04f      	beq.n	800418a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80040ea:	2308      	movs	r3, #8
 80040ec:	425b      	negs	r3, r3
 80040ee:	697a      	ldr	r2, [r7, #20]
 80040f0:	4413      	add	r3, r2
 80040f2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	685a      	ldr	r2, [r3, #4]
 80040fc:	4b25      	ldr	r3, [pc, #148]	@ (8004194 <vPortFree+0xbc>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4013      	ands	r3, r2
 8004102:	2b00      	cmp	r3, #0
 8004104:	d10b      	bne.n	800411e <vPortFree+0x46>
	__asm volatile
 8004106:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800410a:	f383 8811 	msr	BASEPRI, r3
 800410e:	f3bf 8f6f 	isb	sy
 8004112:	f3bf 8f4f 	dsb	sy
 8004116:	60fb      	str	r3, [r7, #12]
}
 8004118:	bf00      	nop
 800411a:	bf00      	nop
 800411c:	e7fd      	b.n	800411a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d00b      	beq.n	800413e <vPortFree+0x66>
	__asm volatile
 8004126:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800412a:	f383 8811 	msr	BASEPRI, r3
 800412e:	f3bf 8f6f 	isb	sy
 8004132:	f3bf 8f4f 	dsb	sy
 8004136:	60bb      	str	r3, [r7, #8]
}
 8004138:	bf00      	nop
 800413a:	bf00      	nop
 800413c:	e7fd      	b.n	800413a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	685a      	ldr	r2, [r3, #4]
 8004142:	4b14      	ldr	r3, [pc, #80]	@ (8004194 <vPortFree+0xbc>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4013      	ands	r3, r2
 8004148:	2b00      	cmp	r3, #0
 800414a:	d01e      	beq.n	800418a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d11a      	bne.n	800418a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004154:	693b      	ldr	r3, [r7, #16]
 8004156:	685a      	ldr	r2, [r3, #4]
 8004158:	4b0e      	ldr	r3, [pc, #56]	@ (8004194 <vPortFree+0xbc>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	43db      	mvns	r3, r3
 800415e:	401a      	ands	r2, r3
 8004160:	693b      	ldr	r3, [r7, #16]
 8004162:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004164:	f7fe fc64 	bl	8002a30 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004168:	693b      	ldr	r3, [r7, #16]
 800416a:	685a      	ldr	r2, [r3, #4]
 800416c:	4b0a      	ldr	r3, [pc, #40]	@ (8004198 <vPortFree+0xc0>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4413      	add	r3, r2
 8004172:	4a09      	ldr	r2, [pc, #36]	@ (8004198 <vPortFree+0xc0>)
 8004174:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004176:	6938      	ldr	r0, [r7, #16]
 8004178:	f000 f874 	bl	8004264 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800417c:	4b07      	ldr	r3, [pc, #28]	@ (800419c <vPortFree+0xc4>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	3301      	adds	r3, #1
 8004182:	4a06      	ldr	r2, [pc, #24]	@ (800419c <vPortFree+0xc4>)
 8004184:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004186:	f7fe fc61 	bl	8002a4c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800418a:	bf00      	nop
 800418c:	3718      	adds	r7, #24
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}
 8004192:	bf00      	nop
 8004194:	20004a70 	.word	0x20004a70
 8004198:	20004a60 	.word	0x20004a60
 800419c:	20004a6c 	.word	0x20004a6c

080041a0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80041a0:	b480      	push	{r7}
 80041a2:	b085      	sub	sp, #20
 80041a4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80041a6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80041aa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80041ac:	4b27      	ldr	r3, [pc, #156]	@ (800424c <prvHeapInit+0xac>)
 80041ae:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	f003 0307 	and.w	r3, r3, #7
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d00c      	beq.n	80041d4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	3307      	adds	r3, #7
 80041be:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	f023 0307 	bic.w	r3, r3, #7
 80041c6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80041c8:	68ba      	ldr	r2, [r7, #8]
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	1ad3      	subs	r3, r2, r3
 80041ce:	4a1f      	ldr	r2, [pc, #124]	@ (800424c <prvHeapInit+0xac>)
 80041d0:	4413      	add	r3, r2
 80041d2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80041d8:	4a1d      	ldr	r2, [pc, #116]	@ (8004250 <prvHeapInit+0xb0>)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80041de:	4b1c      	ldr	r3, [pc, #112]	@ (8004250 <prvHeapInit+0xb0>)
 80041e0:	2200      	movs	r2, #0
 80041e2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	68ba      	ldr	r2, [r7, #8]
 80041e8:	4413      	add	r3, r2
 80041ea:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80041ec:	2208      	movs	r2, #8
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	1a9b      	subs	r3, r3, r2
 80041f2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	f023 0307 	bic.w	r3, r3, #7
 80041fa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	4a15      	ldr	r2, [pc, #84]	@ (8004254 <prvHeapInit+0xb4>)
 8004200:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004202:	4b14      	ldr	r3, [pc, #80]	@ (8004254 <prvHeapInit+0xb4>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	2200      	movs	r2, #0
 8004208:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800420a:	4b12      	ldr	r3, [pc, #72]	@ (8004254 <prvHeapInit+0xb4>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	2200      	movs	r2, #0
 8004210:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	68fa      	ldr	r2, [r7, #12]
 800421a:	1ad2      	subs	r2, r2, r3
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004220:	4b0c      	ldr	r3, [pc, #48]	@ (8004254 <prvHeapInit+0xb4>)
 8004222:	681a      	ldr	r2, [r3, #0]
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	4a0a      	ldr	r2, [pc, #40]	@ (8004258 <prvHeapInit+0xb8>)
 800422e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	4a09      	ldr	r2, [pc, #36]	@ (800425c <prvHeapInit+0xbc>)
 8004236:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004238:	4b09      	ldr	r3, [pc, #36]	@ (8004260 <prvHeapInit+0xc0>)
 800423a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800423e:	601a      	str	r2, [r3, #0]
}
 8004240:	bf00      	nop
 8004242:	3714      	adds	r7, #20
 8004244:	46bd      	mov	sp, r7
 8004246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424a:	4770      	bx	lr
 800424c:	20000e54 	.word	0x20000e54
 8004250:	20004a54 	.word	0x20004a54
 8004254:	20004a5c 	.word	0x20004a5c
 8004258:	20004a64 	.word	0x20004a64
 800425c:	20004a60 	.word	0x20004a60
 8004260:	20004a70 	.word	0x20004a70

08004264 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004264:	b480      	push	{r7}
 8004266:	b085      	sub	sp, #20
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800426c:	4b28      	ldr	r3, [pc, #160]	@ (8004310 <prvInsertBlockIntoFreeList+0xac>)
 800426e:	60fb      	str	r3, [r7, #12]
 8004270:	e002      	b.n	8004278 <prvInsertBlockIntoFreeList+0x14>
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	60fb      	str	r3, [r7, #12]
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	687a      	ldr	r2, [r7, #4]
 800427e:	429a      	cmp	r2, r3
 8004280:	d8f7      	bhi.n	8004272 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	68ba      	ldr	r2, [r7, #8]
 800428c:	4413      	add	r3, r2
 800428e:	687a      	ldr	r2, [r7, #4]
 8004290:	429a      	cmp	r2, r3
 8004292:	d108      	bne.n	80042a6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	685a      	ldr	r2, [r3, #4]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	441a      	add	r2, r3
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	68ba      	ldr	r2, [r7, #8]
 80042b0:	441a      	add	r2, r3
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	429a      	cmp	r2, r3
 80042b8:	d118      	bne.n	80042ec <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681a      	ldr	r2, [r3, #0]
 80042be:	4b15      	ldr	r3, [pc, #84]	@ (8004314 <prvInsertBlockIntoFreeList+0xb0>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	429a      	cmp	r2, r3
 80042c4:	d00d      	beq.n	80042e2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	685a      	ldr	r2, [r3, #4]
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	441a      	add	r2, r3
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	681a      	ldr	r2, [r3, #0]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	601a      	str	r2, [r3, #0]
 80042e0:	e008      	b.n	80042f4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80042e2:	4b0c      	ldr	r3, [pc, #48]	@ (8004314 <prvInsertBlockIntoFreeList+0xb0>)
 80042e4:	681a      	ldr	r2, [r3, #0]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	601a      	str	r2, [r3, #0]
 80042ea:	e003      	b.n	80042f4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681a      	ldr	r2, [r3, #0]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80042f4:	68fa      	ldr	r2, [r7, #12]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	429a      	cmp	r2, r3
 80042fa:	d002      	beq.n	8004302 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	687a      	ldr	r2, [r7, #4]
 8004300:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004302:	bf00      	nop
 8004304:	3714      	adds	r7, #20
 8004306:	46bd      	mov	sp, r7
 8004308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430c:	4770      	bx	lr
 800430e:	bf00      	nop
 8004310:	20004a54 	.word	0x20004a54
 8004314:	20004a5c 	.word	0x20004a5c

08004318 <memset>:
 8004318:	4402      	add	r2, r0
 800431a:	4603      	mov	r3, r0
 800431c:	4293      	cmp	r3, r2
 800431e:	d100      	bne.n	8004322 <memset+0xa>
 8004320:	4770      	bx	lr
 8004322:	f803 1b01 	strb.w	r1, [r3], #1
 8004326:	e7f9      	b.n	800431c <memset+0x4>

08004328 <_reclaim_reent>:
 8004328:	4b29      	ldr	r3, [pc, #164]	@ (80043d0 <_reclaim_reent+0xa8>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4283      	cmp	r3, r0
 800432e:	b570      	push	{r4, r5, r6, lr}
 8004330:	4604      	mov	r4, r0
 8004332:	d04b      	beq.n	80043cc <_reclaim_reent+0xa4>
 8004334:	69c3      	ldr	r3, [r0, #28]
 8004336:	b1ab      	cbz	r3, 8004364 <_reclaim_reent+0x3c>
 8004338:	68db      	ldr	r3, [r3, #12]
 800433a:	b16b      	cbz	r3, 8004358 <_reclaim_reent+0x30>
 800433c:	2500      	movs	r5, #0
 800433e:	69e3      	ldr	r3, [r4, #28]
 8004340:	68db      	ldr	r3, [r3, #12]
 8004342:	5959      	ldr	r1, [r3, r5]
 8004344:	2900      	cmp	r1, #0
 8004346:	d13b      	bne.n	80043c0 <_reclaim_reent+0x98>
 8004348:	3504      	adds	r5, #4
 800434a:	2d80      	cmp	r5, #128	@ 0x80
 800434c:	d1f7      	bne.n	800433e <_reclaim_reent+0x16>
 800434e:	69e3      	ldr	r3, [r4, #28]
 8004350:	4620      	mov	r0, r4
 8004352:	68d9      	ldr	r1, [r3, #12]
 8004354:	f000 f872 	bl	800443c <_free_r>
 8004358:	69e3      	ldr	r3, [r4, #28]
 800435a:	6819      	ldr	r1, [r3, #0]
 800435c:	b111      	cbz	r1, 8004364 <_reclaim_reent+0x3c>
 800435e:	4620      	mov	r0, r4
 8004360:	f000 f86c 	bl	800443c <_free_r>
 8004364:	6961      	ldr	r1, [r4, #20]
 8004366:	b111      	cbz	r1, 800436e <_reclaim_reent+0x46>
 8004368:	4620      	mov	r0, r4
 800436a:	f000 f867 	bl	800443c <_free_r>
 800436e:	69e1      	ldr	r1, [r4, #28]
 8004370:	b111      	cbz	r1, 8004378 <_reclaim_reent+0x50>
 8004372:	4620      	mov	r0, r4
 8004374:	f000 f862 	bl	800443c <_free_r>
 8004378:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800437a:	b111      	cbz	r1, 8004382 <_reclaim_reent+0x5a>
 800437c:	4620      	mov	r0, r4
 800437e:	f000 f85d 	bl	800443c <_free_r>
 8004382:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004384:	b111      	cbz	r1, 800438c <_reclaim_reent+0x64>
 8004386:	4620      	mov	r0, r4
 8004388:	f000 f858 	bl	800443c <_free_r>
 800438c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800438e:	b111      	cbz	r1, 8004396 <_reclaim_reent+0x6e>
 8004390:	4620      	mov	r0, r4
 8004392:	f000 f853 	bl	800443c <_free_r>
 8004396:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8004398:	b111      	cbz	r1, 80043a0 <_reclaim_reent+0x78>
 800439a:	4620      	mov	r0, r4
 800439c:	f000 f84e 	bl	800443c <_free_r>
 80043a0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80043a2:	b111      	cbz	r1, 80043aa <_reclaim_reent+0x82>
 80043a4:	4620      	mov	r0, r4
 80043a6:	f000 f849 	bl	800443c <_free_r>
 80043aa:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80043ac:	b111      	cbz	r1, 80043b4 <_reclaim_reent+0x8c>
 80043ae:	4620      	mov	r0, r4
 80043b0:	f000 f844 	bl	800443c <_free_r>
 80043b4:	6a23      	ldr	r3, [r4, #32]
 80043b6:	b14b      	cbz	r3, 80043cc <_reclaim_reent+0xa4>
 80043b8:	4620      	mov	r0, r4
 80043ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80043be:	4718      	bx	r3
 80043c0:	680e      	ldr	r6, [r1, #0]
 80043c2:	4620      	mov	r0, r4
 80043c4:	f000 f83a 	bl	800443c <_free_r>
 80043c8:	4631      	mov	r1, r6
 80043ca:	e7bb      	b.n	8004344 <_reclaim_reent+0x1c>
 80043cc:	bd70      	pop	{r4, r5, r6, pc}
 80043ce:	bf00      	nop
 80043d0:	20000010 	.word	0x20000010

080043d4 <__libc_init_array>:
 80043d4:	b570      	push	{r4, r5, r6, lr}
 80043d6:	4d0d      	ldr	r5, [pc, #52]	@ (800440c <__libc_init_array+0x38>)
 80043d8:	4c0d      	ldr	r4, [pc, #52]	@ (8004410 <__libc_init_array+0x3c>)
 80043da:	1b64      	subs	r4, r4, r5
 80043dc:	10a4      	asrs	r4, r4, #2
 80043de:	2600      	movs	r6, #0
 80043e0:	42a6      	cmp	r6, r4
 80043e2:	d109      	bne.n	80043f8 <__libc_init_array+0x24>
 80043e4:	4d0b      	ldr	r5, [pc, #44]	@ (8004414 <__libc_init_array+0x40>)
 80043e6:	4c0c      	ldr	r4, [pc, #48]	@ (8004418 <__libc_init_array+0x44>)
 80043e8:	f000 f87e 	bl	80044e8 <_init>
 80043ec:	1b64      	subs	r4, r4, r5
 80043ee:	10a4      	asrs	r4, r4, #2
 80043f0:	2600      	movs	r6, #0
 80043f2:	42a6      	cmp	r6, r4
 80043f4:	d105      	bne.n	8004402 <__libc_init_array+0x2e>
 80043f6:	bd70      	pop	{r4, r5, r6, pc}
 80043f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80043fc:	4798      	blx	r3
 80043fe:	3601      	adds	r6, #1
 8004400:	e7ee      	b.n	80043e0 <__libc_init_array+0xc>
 8004402:	f855 3b04 	ldr.w	r3, [r5], #4
 8004406:	4798      	blx	r3
 8004408:	3601      	adds	r6, #1
 800440a:	e7f2      	b.n	80043f2 <__libc_init_array+0x1e>
 800440c:	080045c8 	.word	0x080045c8
 8004410:	080045c8 	.word	0x080045c8
 8004414:	080045c8 	.word	0x080045c8
 8004418:	080045cc 	.word	0x080045cc

0800441c <__retarget_lock_acquire_recursive>:
 800441c:	4770      	bx	lr

0800441e <__retarget_lock_release_recursive>:
 800441e:	4770      	bx	lr

08004420 <memcpy>:
 8004420:	440a      	add	r2, r1
 8004422:	4291      	cmp	r1, r2
 8004424:	f100 33ff 	add.w	r3, r0, #4294967295
 8004428:	d100      	bne.n	800442c <memcpy+0xc>
 800442a:	4770      	bx	lr
 800442c:	b510      	push	{r4, lr}
 800442e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004432:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004436:	4291      	cmp	r1, r2
 8004438:	d1f9      	bne.n	800442e <memcpy+0xe>
 800443a:	bd10      	pop	{r4, pc}

0800443c <_free_r>:
 800443c:	b538      	push	{r3, r4, r5, lr}
 800443e:	4605      	mov	r5, r0
 8004440:	2900      	cmp	r1, #0
 8004442:	d041      	beq.n	80044c8 <_free_r+0x8c>
 8004444:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004448:	1f0c      	subs	r4, r1, #4
 800444a:	2b00      	cmp	r3, #0
 800444c:	bfb8      	it	lt
 800444e:	18e4      	addlt	r4, r4, r3
 8004450:	f000 f83e 	bl	80044d0 <__malloc_lock>
 8004454:	4a1d      	ldr	r2, [pc, #116]	@ (80044cc <_free_r+0x90>)
 8004456:	6813      	ldr	r3, [r2, #0]
 8004458:	b933      	cbnz	r3, 8004468 <_free_r+0x2c>
 800445a:	6063      	str	r3, [r4, #4]
 800445c:	6014      	str	r4, [r2, #0]
 800445e:	4628      	mov	r0, r5
 8004460:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004464:	f000 b83a 	b.w	80044dc <__malloc_unlock>
 8004468:	42a3      	cmp	r3, r4
 800446a:	d908      	bls.n	800447e <_free_r+0x42>
 800446c:	6820      	ldr	r0, [r4, #0]
 800446e:	1821      	adds	r1, r4, r0
 8004470:	428b      	cmp	r3, r1
 8004472:	bf01      	itttt	eq
 8004474:	6819      	ldreq	r1, [r3, #0]
 8004476:	685b      	ldreq	r3, [r3, #4]
 8004478:	1809      	addeq	r1, r1, r0
 800447a:	6021      	streq	r1, [r4, #0]
 800447c:	e7ed      	b.n	800445a <_free_r+0x1e>
 800447e:	461a      	mov	r2, r3
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	b10b      	cbz	r3, 8004488 <_free_r+0x4c>
 8004484:	42a3      	cmp	r3, r4
 8004486:	d9fa      	bls.n	800447e <_free_r+0x42>
 8004488:	6811      	ldr	r1, [r2, #0]
 800448a:	1850      	adds	r0, r2, r1
 800448c:	42a0      	cmp	r0, r4
 800448e:	d10b      	bne.n	80044a8 <_free_r+0x6c>
 8004490:	6820      	ldr	r0, [r4, #0]
 8004492:	4401      	add	r1, r0
 8004494:	1850      	adds	r0, r2, r1
 8004496:	4283      	cmp	r3, r0
 8004498:	6011      	str	r1, [r2, #0]
 800449a:	d1e0      	bne.n	800445e <_free_r+0x22>
 800449c:	6818      	ldr	r0, [r3, #0]
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	6053      	str	r3, [r2, #4]
 80044a2:	4408      	add	r0, r1
 80044a4:	6010      	str	r0, [r2, #0]
 80044a6:	e7da      	b.n	800445e <_free_r+0x22>
 80044a8:	d902      	bls.n	80044b0 <_free_r+0x74>
 80044aa:	230c      	movs	r3, #12
 80044ac:	602b      	str	r3, [r5, #0]
 80044ae:	e7d6      	b.n	800445e <_free_r+0x22>
 80044b0:	6820      	ldr	r0, [r4, #0]
 80044b2:	1821      	adds	r1, r4, r0
 80044b4:	428b      	cmp	r3, r1
 80044b6:	bf04      	itt	eq
 80044b8:	6819      	ldreq	r1, [r3, #0]
 80044ba:	685b      	ldreq	r3, [r3, #4]
 80044bc:	6063      	str	r3, [r4, #4]
 80044be:	bf04      	itt	eq
 80044c0:	1809      	addeq	r1, r1, r0
 80044c2:	6021      	streq	r1, [r4, #0]
 80044c4:	6054      	str	r4, [r2, #4]
 80044c6:	e7ca      	b.n	800445e <_free_r+0x22>
 80044c8:	bd38      	pop	{r3, r4, r5, pc}
 80044ca:	bf00      	nop
 80044cc:	20004bb0 	.word	0x20004bb0

080044d0 <__malloc_lock>:
 80044d0:	4801      	ldr	r0, [pc, #4]	@ (80044d8 <__malloc_lock+0x8>)
 80044d2:	f7ff bfa3 	b.w	800441c <__retarget_lock_acquire_recursive>
 80044d6:	bf00      	nop
 80044d8:	20004bac 	.word	0x20004bac

080044dc <__malloc_unlock>:
 80044dc:	4801      	ldr	r0, [pc, #4]	@ (80044e4 <__malloc_unlock+0x8>)
 80044de:	f7ff bf9e 	b.w	800441e <__retarget_lock_release_recursive>
 80044e2:	bf00      	nop
 80044e4:	20004bac 	.word	0x20004bac

080044e8 <_init>:
 80044e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044ea:	bf00      	nop
 80044ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044ee:	bc08      	pop	{r3}
 80044f0:	469e      	mov	lr, r3
 80044f2:	4770      	bx	lr

080044f4 <_fini>:
 80044f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044f6:	bf00      	nop
 80044f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044fa:	bc08      	pop	{r3}
 80044fc:	469e      	mov	lr, r3
 80044fe:	4770      	bx	lr
